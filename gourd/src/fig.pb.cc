// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fig.proto

#include "fig.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace fig {
namespace v1 {
PROTOBUF_CONSTEXPR IdRequest::IdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdRequestDefaultTypeInternal() {}
  union {
    IdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdRequestDefaultTypeInternal _IdRequest_default_instance_;
PROTOBUF_CONSTEXPR Pager::Pager(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PagerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PagerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PagerDefaultTypeInternal() {}
  union {
    Pager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PagerDefaultTypeInternal _Pager_default_instance_;
PROTOBUF_CONSTEXPR Pagination::Pagination(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.total_)*/int64_t{0}
  , /*decltype(_impl_.has_next_)*/false
  , /*decltype(_impl_.has_previous_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PaginationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaginationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaginationDefaultTypeInternal() {}
  union {
    Pagination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaginationDefaultTypeInternal _Pagination_default_instance_;
PROTOBUF_CONSTEXPR MediaContent::MediaContent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.published_at_)*/nullptr
  , /*decltype(_impl_.editor_)*/0
  , /*decltype(_impl_.status_)*/0} {}
struct MediaContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaContentDefaultTypeInternal() {}
  union {
    MediaContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaContentDefaultTypeInternal _MediaContent_default_instance_;
PROTOBUF_CONSTEXPR UserDetail::UserDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDetailDefaultTypeInternal() {}
  union {
    UserDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDetailDefaultTypeInternal _UserDetail_default_instance_;
PROTOBUF_CONSTEXPR Oauth2State::Oauth2State(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.goto__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Oauth2StateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Oauth2StateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Oauth2StateDefaultTypeInternal() {}
  union {
    Oauth2State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Oauth2StateDefaultTypeInternal _Oauth2State_default_instance_;
PROTOBUF_CONSTEXPR UserProfile_PayloadEntry_DoNotUse::UserProfile_PayloadEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct UserProfile_PayloadEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserProfile_PayloadEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserProfile_PayloadEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UserProfile_PayloadEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserProfile_PayloadEntry_DoNotUseDefaultTypeInternal _UserProfile_PayloadEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR UserProfile::UserProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserProfileDefaultTypeInternal() {}
  union {
    UserProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserProfileDefaultTypeInternal _UserProfile_default_instance_;
PROTOBUF_CONSTEXPR UserIndexResponse_Item::UserIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.locale_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.confirmed_at_)*/nullptr
  , /*decltype(_impl_.locked_at_)*/nullptr
  , /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_.by_)*/0} {}
struct UserIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserIndexResponse_ItemDefaultTypeInternal() {}
  union {
    UserIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserIndexResponse_ItemDefaultTypeInternal _UserIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR UserIndexResponse::UserIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserIndexResponseDefaultTypeInternal() {}
  union {
    UserIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserIndexResponseDefaultTypeInternal _UserIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR UserSetPasswordRequest::UserSetPasswordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserSetPasswordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSetPasswordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSetPasswordRequestDefaultTypeInternal() {}
  union {
    UserSetPasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSetPasswordRequestDefaultTypeInternal _UserSetPasswordRequest_default_instance_;
PROTOBUF_CONSTEXPR UserChangePasswordRequest::UserChangePasswordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.current_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_confirmation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserChangePasswordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserChangePasswordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserChangePasswordRequestDefaultTypeInternal() {}
  union {
    UserChangePasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserChangePasswordRequestDefaultTypeInternal _UserChangePasswordRequest_default_instance_;
PROTOBUF_CONSTEXPR UserLogsRequest::UserLogsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.plugin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr} {}
struct UserLogsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLogsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLogsRequestDefaultTypeInternal() {}
  union {
    UserLogsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLogsRequestDefaultTypeInternal _UserLogsRequest_default_instance_;
PROTOBUF_CONSTEXPR UserLogsResponse_Item::UserLogsResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plugin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserLogsResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLogsResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLogsResponse_ItemDefaultTypeInternal() {}
  union {
    UserLogsResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLogsResponse_ItemDefaultTypeInternal _UserLogsResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR UserLogsResponse::UserLogsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserLogsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLogsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLogsResponseDefaultTypeInternal() {}
  union {
    UserLogsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLogsResponseDefaultTypeInternal _UserLogsResponse_default_instance_;
PROTOBUF_CONSTEXPR UserResetPasswordRequest::UserResetPasswordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserResetPasswordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserResetPasswordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserResetPasswordRequestDefaultTypeInternal() {}
  union {
    UserResetPasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserResetPasswordRequestDefaultTypeInternal _UserResetPasswordRequest_default_instance_;
PROTOBUF_CONSTEXPR UserTokenRequest::UserTokenRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserTokenRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserTokenRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserTokenRequestDefaultTypeInternal() {}
  union {
    UserTokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserTokenRequestDefaultTypeInternal _UserTokenRequest_default_instance_;
PROTOBUF_CONSTEXPR UserQueryRequest::UserQueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.by_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UserQueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserQueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserQueryRequestDefaultTypeInternal() {}
  union {
    UserQueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserQueryRequestDefaultTypeInternal _UserQueryRequest_default_instance_;
PROTOBUF_CONSTEXPR UserSignUpByEmailRequest::UserSignUpByEmailRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.locale_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.home_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserSignUpByEmailRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignUpByEmailRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignUpByEmailRequestDefaultTypeInternal() {}
  union {
    UserSignUpByEmailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignUpByEmailRequestDefaultTypeInternal _UserSignUpByEmailRequest_default_instance_;
PROTOBUF_CONSTEXPR UserSignInByPasswordRequest::UserSignInByPasswordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_.user_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UserSignInByPasswordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignInByPasswordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignInByPasswordRequestDefaultTypeInternal() {}
  union {
    UserSignInByPasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignInByPasswordRequestDefaultTypeInternal _UserSignInByPasswordRequest_default_instance_;
PROTOBUF_CONSTEXPR UserSignInResponse::UserSignInResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roles_)*/{}
  , /*decltype(_impl_.permissions_)*/{}
  , /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.by_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserSignInResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignInResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignInResponseDefaultTypeInternal() {}
  union {
    UserSignInResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignInResponseDefaultTypeInternal _UserSignInResponse_default_instance_;
PROTOBUF_CONSTEXPR SettingSetRequest::SettingSetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.global_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SettingSetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingSetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingSetRequestDefaultTypeInternal() {}
  union {
    SettingSetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingSetRequestDefaultTypeInternal _SettingSetRequest_default_instance_;
PROTOBUF_CONSTEXPR SettingGetRequest::SettingGetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.global_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SettingGetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingGetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingGetRequestDefaultTypeInternal() {}
  union {
    SettingGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingGetRequestDefaultTypeInternal _SettingGetRequest_default_instance_;
PROTOBUF_CONSTEXPR SettingByUserRequest::SettingByUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SettingByUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingByUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingByUserRequestDefaultTypeInternal() {}
  union {
    SettingByUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingByUserRequestDefaultTypeInternal _SettingByUserRequest_default_instance_;
PROTOBUF_CONSTEXPR SettingsResponse_Item::SettingsResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.user_id_)*/0} {}
struct SettingsResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingsResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingsResponse_ItemDefaultTypeInternal() {}
  union {
    SettingsResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingsResponse_ItemDefaultTypeInternal _SettingsResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR SettingsResponse::SettingsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SettingsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingsResponseDefaultTypeInternal() {}
  union {
    SettingsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingsResponseDefaultTypeInternal _SettingsResponse_default_instance_;
PROTOBUF_CONSTEXPR LocaleByLangRequest::LocaleByLangRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleByLangRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleByLangRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleByLangRequestDefaultTypeInternal() {}
  union {
    LocaleByLangRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleByLangRequestDefaultTypeInternal _LocaleByLangRequest_default_instance_;
PROTOBUF_CONSTEXPR LocaleGetRequest::LocaleGetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleGetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleGetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleGetRequestDefaultTypeInternal() {}
  union {
    LocaleGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleGetRequestDefaultTypeInternal _LocaleGetRequest_default_instance_;
PROTOBUF_CONSTEXPR LocalesResponse_Item::LocalesResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocalesResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalesResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalesResponse_ItemDefaultTypeInternal() {}
  union {
    LocalesResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalesResponse_ItemDefaultTypeInternal _LocalesResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR LocalesResponse::LocalesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocalesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalesResponseDefaultTypeInternal() {}
  union {
    LocalesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalesResponseDefaultTypeInternal _LocalesResponse_default_instance_;
PROTOBUF_CONSTEXPR LocaleSetRequest::LocaleSetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleSetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleSetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleSetRequestDefaultTypeInternal() {}
  union {
    LocaleSetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleSetRequestDefaultTypeInternal _LocaleSetRequest_default_instance_;
PROTOBUF_CONSTEXPR IndexNowProfile::IndexNowProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexNowProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexNowProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexNowProfileDefaultTypeInternal() {}
  union {
    IndexNowProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexNowProfileDefaultTypeInternal _IndexNowProfile_default_instance_;
PROTOBUF_CONSTEXPR IndexNowPingRequest::IndexNowPingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.home_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexNowPingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexNowPingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexNowPingRequestDefaultTypeInternal() {}
  union {
    IndexNowPingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexNowPingRequestDefaultTypeInternal _IndexNowPingRequest_default_instance_;
PROTOBUF_CONSTEXPR SitemapPingRequest::SitemapPingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.home_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SitemapPingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SitemapPingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SitemapPingRequestDefaultTypeInternal() {}
  union {
    SitemapPingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SitemapPingRequestDefaultTypeInternal _SitemapPingRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteMaintenanceModeRequest::SiteMaintenanceModeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteMaintenanceModeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteMaintenanceModeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteMaintenanceModeRequestDefaultTypeInternal() {}
  union {
    SiteMaintenanceModeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteMaintenanceModeRequestDefaultTypeInternal _SiteMaintenanceModeRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteInstallRequest::SiteInstallRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteInstallRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteInstallRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteInstallRequestDefaultTypeInternal() {}
  union {
    SiteInstallRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteInstallRequestDefaultTypeInternal _SiteInstallRequest_default_instance_;
PROTOBUF_CONSTEXPR TwilioProfile::TwilioProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sms_status_callback_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TwilioProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwilioProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwilioProfileDefaultTypeInternal() {}
  union {
    TwilioProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwilioProfileDefaultTypeInternal _TwilioProfile_default_instance_;
PROTOBUF_CONSTEXPR SmtpProfile::SmtpProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cc_)*/{}
  , /*decltype(_impl_.bcc_)*/{}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.auth_method_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SmtpProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmtpProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmtpProfileDefaultTypeInternal() {}
  union {
    SmtpProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmtpProfileDefaultTypeInternal _SmtpProfile_default_instance_;
PROTOBUF_CONSTEXPR EmailTask_Address::EmailTask_Address(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailTask_AddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailTask_AddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailTask_AddressDefaultTypeInternal() {}
  union {
    EmailTask_Address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailTask_AddressDefaultTypeInternal _EmailTask_Address_default_instance_;
PROTOBUF_CONSTEXPR EmailTask_Body::EmailTask_Body(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.html_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailTask_BodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailTask_BodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailTask_BodyDefaultTypeInternal() {}
  union {
    EmailTask_Body _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailTask_BodyDefaultTypeInternal _EmailTask_Body_default_instance_;
PROTOBUF_CONSTEXPR EmailTask_Attachment::EmailTask_Attachment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailTask_AttachmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailTask_AttachmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailTask_AttachmentDefaultTypeInternal() {}
  union {
    EmailTask_Attachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailTask_AttachmentDefaultTypeInternal _EmailTask_Attachment_default_instance_;
PROTOBUF_CONSTEXPR EmailTask::EmailTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cc_)*/{}
  , /*decltype(_impl_.bcc_)*/{}
  , /*decltype(_impl_.attachments_)*/{}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_.body_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailTaskDefaultTypeInternal() {}
  union {
    EmailTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailTaskDefaultTypeInternal _EmailTask_default_instance_;
PROTOBUF_CONSTEXPR SiteTwilioPingRequest::SiteTwilioPingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profile_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteTwilioPingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteTwilioPingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteTwilioPingRequestDefaultTypeInternal() {}
  union {
    SiteTwilioPingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteTwilioPingRequestDefaultTypeInternal _SiteTwilioPingRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteSmtpPingRequest::SiteSmtpPingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_.profile_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSmtpPingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSmtpPingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSmtpPingRequestDefaultTypeInternal() {}
  union {
    SiteSmtpPingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSmtpPingRequestDefaultTypeInternal _SiteSmtpPingRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteSetLogoRequest::SiteSetLogoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSetLogoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSetLogoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSetLogoRequestDefaultTypeInternal() {}
  union {
    SiteSetLogoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSetLogoRequestDefaultTypeInternal _SiteSetLogoRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteSetCopyrightRequest::SiteSetCopyrightRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSetCopyrightRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSetCopyrightRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSetCopyrightRequestDefaultTypeInternal() {}
  union {
    SiteSetCopyrightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSetCopyrightRequestDefaultTypeInternal _SiteSetCopyrightRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteSetKeywordsRequest::SiteSetKeywordsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSetKeywordsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSetKeywordsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSetKeywordsRequestDefaultTypeInternal() {}
  union {
    SiteSetKeywordsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSetKeywordsRequestDefaultTypeInternal _SiteSetKeywordsRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteSetInfoRequest::SiteSetInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subhead_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSetInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSetInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSetInfoRequestDefaultTypeInternal() {}
  union {
    SiteSetInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSetInfoRequestDefaultTypeInternal _SiteSetInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteLayoutResponse_Author::SiteLayoutResponse_Author(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteLayoutResponse_AuthorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteLayoutResponse_AuthorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteLayoutResponse_AuthorDefaultTypeInternal() {}
  union {
    SiteLayoutResponse_Author _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteLayoutResponse_AuthorDefaultTypeInternal _SiteLayoutResponse_Author_default_instance_;
PROTOBUF_CONSTEXPR SiteLayoutResponse::SiteLayoutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keywords_)*/{}
  , /*decltype(_impl_.languages_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subhead_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.copyright_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteLayoutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteLayoutResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteLayoutResponseDefaultTypeInternal() {}
  union {
    SiteLayoutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteLayoutResponseDefaultTypeInternal _SiteLayoutResponse_default_instance_;
PROTOBUF_CONSTEXPR GoogleProfile_ReCaptcha::GoogleProfile_ReCaptcha(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.site_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GoogleProfile_ReCaptchaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleProfile_ReCaptchaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleProfile_ReCaptchaDefaultTypeInternal() {}
  union {
    GoogleProfile_ReCaptcha _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleProfile_ReCaptchaDefaultTypeInternal _GoogleProfile_ReCaptcha_default_instance_;
PROTOBUF_CONSTEXPR GoogleProfile::GoogleProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.site_verify_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.re_captcha_)*/nullptr} {}
struct GoogleProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleProfileDefaultTypeInternal() {}
  union {
    GoogleProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleProfileDefaultTypeInternal _GoogleProfile_default_instance_;
PROTOBUF_CONSTEXPR BaiduProfile_SiteVerify::BaiduProfile_SiteVerify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BaiduProfile_SiteVerifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaiduProfile_SiteVerifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaiduProfile_SiteVerifyDefaultTypeInternal() {}
  union {
    BaiduProfile_SiteVerify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaiduProfile_SiteVerifyDefaultTypeInternal _BaiduProfile_SiteVerify_default_instance_;
PROTOBUF_CONSTEXPR BaiduProfile::BaiduProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.site_verify_)*/nullptr} {}
struct BaiduProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaiduProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaiduProfileDefaultTypeInternal() {}
  union {
    BaiduProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaiduProfileDefaultTypeInternal _BaiduProfile_default_instance_;
PROTOBUF_CONSTEXPR SmsTask::SmsTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.to_)*/{}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SmsTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmsTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmsTaskDefaultTypeInternal() {}
  union {
    SmsTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmsTaskDefaultTypeInternal _SmsTask_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_Database::SiteStatusResponse_Database(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_DatabaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_DatabaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_DatabaseDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Database _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_DatabaseDefaultTypeInternal _SiteStatusResponse_Database_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.databases_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.now_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_PostgreSqlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_PostgreSqlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_PostgreSqlDefaultTypeInternal() {}
  union {
    SiteStatusResponse_PostgreSql _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_PostgreSqlDefaultTypeInternal _SiteStatusResponse_PostgreSql_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_MySql::SiteStatusResponse_MySql(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_MySqlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_MySqlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_MySqlDefaultTypeInternal() {}
  union {
    SiteStatusResponse_MySql _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_MySqlDefaultTypeInternal _SiteStatusResponse_MySql_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_Redis_Item::SiteStatusResponse_Redis_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_Redis_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_Redis_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_Redis_ItemDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Redis_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_Redis_ItemDefaultTypeInternal _SiteStatusResponse_Redis_Item_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_Redis::SiteStatusResponse_Redis(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_RedisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_RedisDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_RedisDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Redis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_RedisDefaultTypeInternal _SiteStatusResponse_Redis_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_RabbitMq::SiteStatusResponse_RabbitMq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.heartbeat_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_RabbitMqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_RabbitMqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_RabbitMqDefaultTypeInternal() {}
  union {
    SiteStatusResponse_RabbitMq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_RabbitMqDefaultTypeInternal _SiteStatusResponse_RabbitMq_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_OpenSearchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_OpenSearchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_OpenSearchDefaultTypeInternal() {}
  union {
    SiteStatusResponse_OpenSearch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_OpenSearchDefaultTypeInternal _SiteStatusResponse_OpenSearch_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_Health::SiteStatusResponse_Health(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_HealthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_HealthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_HealthDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Health _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_HealthDefaultTypeInternal _SiteStatusResponse_Health_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_System::SiteStatusResponse_System(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpu_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.boot_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.disk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.load_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.swap_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uptime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.network_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_SystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_SystemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_SystemDefaultTypeInternal() {}
  union {
    SiteStatusResponse_System _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_SystemDefaultTypeInternal _SiteStatusResponse_System_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse::SiteStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.healthes_)*/{}
  , /*decltype(_impl_.postgresql_)*/nullptr
  , /*decltype(_impl_.mysql_)*/nullptr
  , /*decltype(_impl_.redis_)*/nullptr
  , /*decltype(_impl_.rabbitmq_)*/nullptr
  , /*decltype(_impl_.opensearch_)*/nullptr
  , /*decltype(_impl_.system_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponseDefaultTypeInternal() {}
  union {
    SiteStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponseDefaultTypeInternal _SiteStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR ShorterLinkIndexResponse_Item::ShorterLinkIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShorterLinkIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShorterLinkIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShorterLinkIndexResponse_ItemDefaultTypeInternal() {}
  union {
    ShorterLinkIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShorterLinkIndexResponse_ItemDefaultTypeInternal _ShorterLinkIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR ShorterLinkIndexResponse::ShorterLinkIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShorterLinkIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShorterLinkIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShorterLinkIndexResponseDefaultTypeInternal() {}
  union {
    ShorterLinkIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShorterLinkIndexResponseDefaultTypeInternal _ShorterLinkIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR ShorterLinkCreateRequest::ShorterLinkCreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShorterLinkCreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShorterLinkCreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShorterLinkCreateRequestDefaultTypeInternal() {}
  union {
    ShorterLinkCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShorterLinkCreateRequestDefaultTypeInternal _ShorterLinkCreateRequest_default_instance_;
PROTOBUF_CONSTEXPR ShorterLinkUpdateRequest::ShorterLinkUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShorterLinkUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShorterLinkUpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShorterLinkUpdateRequestDefaultTypeInternal() {}
  union {
    ShorterLinkUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShorterLinkUpdateRequestDefaultTypeInternal _ShorterLinkUpdateRequest_default_instance_;
PROTOBUF_CONSTEXPR TagIndexResponse_Item::TagIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TagIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagIndexResponse_ItemDefaultTypeInternal() {}
  union {
    TagIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagIndexResponse_ItemDefaultTypeInternal _TagIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR TagIndexResponse::TagIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TagIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagIndexResponseDefaultTypeInternal() {}
  union {
    TagIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagIndexResponseDefaultTypeInternal _TagIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR TagCreateRequest::TagCreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TagCreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagCreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagCreateRequestDefaultTypeInternal() {}
  union {
    TagCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagCreateRequestDefaultTypeInternal _TagCreateRequest_default_instance_;
PROTOBUF_CONSTEXPR TagUpdateRequest::TagUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TagUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagUpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagUpdateRequestDefaultTypeInternal() {}
  union {
    TagUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagUpdateRequestDefaultTypeInternal _TagUpdateRequest_default_instance_;
PROTOBUF_CONSTEXPR CategoryIndexResponse_Item::CategoryIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.left_)*/0
  , /*decltype(_impl_.right_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CategoryIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryIndexResponse_ItemDefaultTypeInternal() {}
  union {
    CategoryIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryIndexResponse_ItemDefaultTypeInternal _CategoryIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR CategoryIndexResponse::CategoryIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CategoryIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryIndexResponseDefaultTypeInternal() {}
  union {
    CategoryIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryIndexResponseDefaultTypeInternal _CategoryIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR CategoryCreateRequest::CategoryCreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.by_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CategoryCreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryCreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryCreateRequestDefaultTypeInternal() {}
  union {
    CategoryCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryCreateRequestDefaultTypeInternal _CategoryCreateRequest_default_instance_;
PROTOBUF_CONSTEXPR CategoryUpdateRequest::CategoryUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CategoryUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryUpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryUpdateRequestDefaultTypeInternal() {}
  union {
    CategoryUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryUpdateRequestDefaultTypeInternal _CategoryUpdateRequest_default_instance_;
PROTOBUF_CONSTEXPR NotificationIndexResponse_Item::NotificationIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotificationIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationIndexResponse_ItemDefaultTypeInternal() {}
  union {
    NotificationIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationIndexResponse_ItemDefaultTypeInternal _NotificationIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR NotificationIndexResponse::NotificationIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotificationIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationIndexResponseDefaultTypeInternal() {}
  union {
    NotificationIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationIndexResponseDefaultTypeInternal _NotificationIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR NotificationCreateRequest::NotificationCreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotificationCreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationCreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationCreateRequestDefaultTypeInternal() {}
  union {
    NotificationCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationCreateRequestDefaultTypeInternal _NotificationCreateRequest_default_instance_;
PROTOBUF_CONSTEXPR NotificationUpdateRequest::NotificationUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotificationUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationUpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationUpdateRequestDefaultTypeInternal() {}
  union {
    NotificationUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationUpdateRequestDefaultTypeInternal _NotificationUpdateRequest_default_instance_;
PROTOBUF_CONSTEXPR AttachmentShowRequest::AttachmentShowRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentShowRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentShowRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentShowRequestDefaultTypeInternal() {}
  union {
    AttachmentShowRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentShowRequestDefaultTypeInternal _AttachmentShowRequest_default_instance_;
PROTOBUF_CONSTEXPR AttachmentShowResponse::AttachmentShowResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentShowResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentShowResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentShowResponseDefaultTypeInternal() {}
  union {
    AttachmentShowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentShowResponseDefaultTypeInternal _AttachmentShowResponse_default_instance_;
PROTOBUF_CONSTEXPR AttachmentIndexResponse_Item::AttachmentIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bucket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentIndexResponse_ItemDefaultTypeInternal() {}
  union {
    AttachmentIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentIndexResponse_ItemDefaultTypeInternal _AttachmentIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR AttachmentIndexResponse::AttachmentIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentIndexResponseDefaultTypeInternal() {}
  union {
    AttachmentIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentIndexResponseDefaultTypeInternal _AttachmentIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR LeaveWordIndexResponse_Item::LeaveWordIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaveWordIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveWordIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveWordIndexResponse_ItemDefaultTypeInternal() {}
  union {
    LeaveWordIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveWordIndexResponse_ItemDefaultTypeInternal _LeaveWordIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR LeaveWordIndexResponse::LeaveWordIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaveWordIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveWordIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveWordIndexResponseDefaultTypeInternal() {}
  union {
    LeaveWordIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveWordIndexResponseDefaultTypeInternal _LeaveWordIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR SignInByGoogleRequest::SignInByGoogleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scopes_)*/{}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.redirect_uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nonce_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignInByGoogleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignInByGoogleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignInByGoogleRequestDefaultTypeInternal() {}
  union {
    SignInByGoogleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignInByGoogleRequestDefaultTypeInternal _SignInByGoogleRequest_default_instance_;
PROTOBUF_CONSTEXPR GoogleSignInUrlRequest::GoogleSignInUrlRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.redirect_uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GoogleSignInUrlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleSignInUrlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleSignInUrlRequestDefaultTypeInternal() {}
  union {
    GoogleSignInUrlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleSignInUrlRequestDefaultTypeInternal _GoogleSignInUrlRequest_default_instance_;
PROTOBUF_CONSTEXPR GoogleSignInUrlResponse::GoogleSignInUrlResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nonce_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GoogleSignInUrlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleSignInUrlResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleSignInUrlResponseDefaultTypeInternal() {}
  union {
    GoogleSignInUrlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleSignInUrlResponseDefaultTypeInternal _GoogleSignInUrlResponse_default_instance_;
PROTOBUF_CONSTEXPR WechatUserBindByIdRequest::WechatUserBindByIdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/0
  , /*decltype(_impl_.wechat_user_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatUserBindByIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatUserBindByIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatUserBindByIdRequestDefaultTypeInternal() {}
  union {
    WechatUserBindByIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatUserBindByIdRequestDefaultTypeInternal _WechatUserBindByIdRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatUserBindByAccountRequest::WechatUserBindByAccountRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatUserBindByAccountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatUserBindByAccountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatUserBindByAccountRequestDefaultTypeInternal() {}
  union {
    WechatUserBindByAccountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatUserBindByAccountRequestDefaultTypeInternal _WechatUserBindByAccountRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatUserQueryByOpenIdRequest::WechatUserQueryByOpenIdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatUserQueryByOpenIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatUserQueryByOpenIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatUserQueryByOpenIdRequestDefaultTypeInternal() {}
  union {
    WechatUserQueryByOpenIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatUserQueryByOpenIdRequestDefaultTypeInternal _WechatUserQueryByOpenIdRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatUserQueryByUnionIdRequest::WechatUserQueryByUnionIdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.union_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatUserQueryByUnionIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatUserQueryByUnionIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatUserQueryByUnionIdRequestDefaultTypeInternal() {}
  union {
    WechatUserQueryByUnionIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatUserQueryByUnionIdRequestDefaultTypeInternal _WechatUserQueryByUnionIdRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatAllMiniProgramUserResponse_Item::WechatAllMiniProgramUserResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.union_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.user_id_)*/0} {}
struct WechatAllMiniProgramUserResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatAllMiniProgramUserResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatAllMiniProgramUserResponse_ItemDefaultTypeInternal() {}
  union {
    WechatAllMiniProgramUserResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatAllMiniProgramUserResponse_ItemDefaultTypeInternal _WechatAllMiniProgramUserResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR WechatAllMiniProgramUserResponse::WechatAllMiniProgramUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatAllMiniProgramUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatAllMiniProgramUserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatAllMiniProgramUserResponseDefaultTypeInternal() {}
  union {
    WechatAllMiniProgramUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatAllMiniProgramUserResponseDefaultTypeInternal _WechatAllMiniProgramUserResponse_default_instance_;
PROTOBUF_CONSTEXPR WechatAllOauth2UserResponse_Item::WechatAllOauth2UserResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.privilege_)*/{}
  , /*decltype(_impl_.union_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.city_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.province_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.head_img_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.user_id_)*/0
  , /*decltype(_impl_.sex_)*/0} {}
struct WechatAllOauth2UserResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatAllOauth2UserResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatAllOauth2UserResponse_ItemDefaultTypeInternal() {}
  union {
    WechatAllOauth2UserResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatAllOauth2UserResponse_ItemDefaultTypeInternal _WechatAllOauth2UserResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR WechatAllOauth2UserResponse::WechatAllOauth2UserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatAllOauth2UserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatAllOauth2UserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatAllOauth2UserResponseDefaultTypeInternal() {}
  union {
    WechatAllOauth2UserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatAllOauth2UserResponseDefaultTypeInternal _WechatAllOauth2UserResponse_default_instance_;
PROTOBUF_CONSTEXPR SignInByWechatOauth2Request::SignInByWechatOauth2Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_.language_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignInByWechatOauth2RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignInByWechatOauth2RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignInByWechatOauth2RequestDefaultTypeInternal() {}
  union {
    SignInByWechatOauth2Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignInByWechatOauth2RequestDefaultTypeInternal _SignInByWechatOauth2Request_default_instance_;
PROTOBUF_CONSTEXPR WechatOauth2SignInStateResponse::WechatOauth2SignInStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatOauth2SignInStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatOauth2SignInStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatOauth2SignInStateResponseDefaultTypeInternal() {}
  union {
    WechatOauth2SignInStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatOauth2SignInStateResponseDefaultTypeInternal _WechatOauth2SignInStateResponse_default_instance_;
PROTOBUF_CONSTEXPR WechatOauth2SignInUrlRequest::WechatOauth2SignInUrlRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.redirect_uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatOauth2SignInUrlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatOauth2SignInUrlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatOauth2SignInUrlRequestDefaultTypeInternal() {}
  union {
    WechatOauth2SignInUrlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatOauth2SignInUrlRequestDefaultTypeInternal _WechatOauth2SignInUrlRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatMiniProgramUser::WechatMiniProgramUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.union_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct WechatMiniProgramUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatMiniProgramUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatMiniProgramUserDefaultTypeInternal() {}
  union {
    WechatMiniProgramUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatMiniProgramUserDefaultTypeInternal _WechatMiniProgramUser_default_instance_;
}  // namespace v1
}  // namespace fig
}  // namespace palm
static ::_pb::Metadata file_level_metadata_fig_2eproto[102];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_fig_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_fig_2eproto = nullptr;

const uint32_t TableStruct_fig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IdRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Pager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Pager, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Pager, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Pagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Pagination, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Pagination, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Pagination, _impl_.total_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Pagination, _impl_.has_next_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Pagination, _impl_.has_previous_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::MediaContent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::MediaContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::MediaContent, _impl_.editor_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::MediaContent, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::MediaContent, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::MediaContent, _impl_.published_at_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserDetail, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserDetail, _impl_.real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Oauth2State, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Oauth2State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Oauth2State, _impl_.goto__),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Oauth2State, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Oauth2State, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::Oauth2State, _impl_.id_),
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserProfile_PayloadEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserProfile_PayloadEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserProfile_PayloadEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserProfile_PayloadEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserProfile, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserIndexResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserIndexResponse_Item, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserIndexResponse_Item, _impl_.real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserIndexResponse_Item, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserIndexResponse_Item, _impl_.locale_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserIndexResponse_Item, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserIndexResponse_Item, _impl_.confirmed_at_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserIndexResponse_Item, _impl_.locked_at_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserIndexResponse_Item, _impl_.deleted_at_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserIndexResponse_Item, _impl_.by_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserIndexResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSetPasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSetPasswordRequest, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserChangePasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserChangePasswordRequest, _impl_.current_password_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserChangePasswordRequest, _impl_.new_password_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserChangePasswordRequest, _impl_.password_confirmation_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsRequest, _impl_.plugin_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsRequest, _impl_.to_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsResponse_Item, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsResponse_Item, _impl_.plugin_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsResponse_Item, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsResponse_Item, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsResponse_Item, _impl_.created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserLogsResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserResetPasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserResetPasswordRequest, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserResetPasswordRequest, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserTokenRequest, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserQueryRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserQueryRequest, _impl_.by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignUpByEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignUpByEmailRequest, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignUpByEmailRequest, _impl_.real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignUpByEmailRequest, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignUpByEmailRequest, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignUpByEmailRequest, _impl_.locale_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignUpByEmailRequest, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignUpByEmailRequest, _impl_.home_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignInByPasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignInByPasswordRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignInByPasswordRequest, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignInByPasswordRequest, _impl_.ttl_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignInByPasswordRequest, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignInResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignInResponse, _impl_.real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignInResponse, _impl_.by_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignInResponse, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignInResponse, _impl_.roles_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::UserSignInResponse, _impl_.permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingSetRequest, _impl_.global_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingSetRequest, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingSetRequest, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingGetRequest, _impl_.global_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingGetRequest, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingByUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingByUserRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingsResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingsResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingsResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingsResponse_Item, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingsResponse_Item, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingsResponse_Item, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingsResponse_Item, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingsResponse_Item, _impl_.updated_at_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SettingsResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocaleByLangRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocaleByLangRequest, _impl_.lang_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocaleGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocaleGetRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocaleGetRequest, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocalesResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocalesResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocalesResponse_Item, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocalesResponse_Item, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocalesResponse_Item, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocalesResponse_Item, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocalesResponse_Item, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocalesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocalesResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocaleSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocaleSetRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocaleSetRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LocaleSetRequest, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNowProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNowProfile, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNowPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNowPingRequest, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNowPingRequest, _impl_.home_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SitemapPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SitemapPingRequest, _impl_.home_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteMaintenanceModeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteMaintenanceModeRequest, _impl_.ttl_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteMaintenanceModeRequest, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteInstallRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteInstallRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TwilioProfile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TwilioProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TwilioProfile, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TwilioProfile, _impl_.account_sid_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TwilioProfile, _impl_.auth_token_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TwilioProfile, _impl_.sms_status_callback_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.auth_method_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.cc_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.bcc_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Address, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Address, _impl_.email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Body, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Body, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Body, _impl_.html_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Attachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Attachment, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Attachment, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _impl_.cc_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _impl_.bcc_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _impl_.attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteTwilioPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteTwilioPingRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteTwilioPingRequest, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteTwilioPingRequest, _impl_.profile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSmtpPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSmtpPingRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSmtpPingRequest, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSmtpPingRequest, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSmtpPingRequest, _impl_.profile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetLogoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetLogoRequest, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetCopyrightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetCopyrightRequest, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetKeywordsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetKeywordsRequest, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetInfoRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetInfoRequest, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetInfoRequest, _impl_.subhead_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetInfoRequest, _impl_.description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse_Author, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse_Author, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse_Author, _impl_.email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.subhead_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.keywords_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.author_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.copyright_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.logo_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile_ReCaptcha, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile_ReCaptcha, _impl_.site_key_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile_ReCaptcha, _impl_.secret_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile, _impl_.site_verify_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile, _impl_.re_captcha_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::BaiduProfile_SiteVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::BaiduProfile_SiteVerify, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::BaiduProfile_SiteVerify, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::BaiduProfile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::BaiduProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::BaiduProfile, _impl_.site_verify_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmsTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmsTask, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmsTask, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmsTask, _impl_.body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Database, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Database, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Database, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_PostgreSql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_PostgreSql, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_PostgreSql, _impl_.now_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_PostgreSql, _impl_.databases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_MySql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_MySql, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_MySql, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis_Item, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis_Item, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis_Item, _impl_.ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_RabbitMq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_RabbitMq, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_RabbitMq, _impl_.heartbeat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_OpenSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_OpenSearch, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_OpenSearch, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Health, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Health, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Health, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.cpu_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.memory_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.boot_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.disk_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.load_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.fs_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.swap_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.uptime_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.network_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.postgresql_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.mysql_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.redis_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.rabbitmq_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.opensearch_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.system_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.healthes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse_Item, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse_Item, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse_Item, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse_Item, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkCreateRequest, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkCreateRequest, _impl_.details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkUpdateRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkUpdateRequest, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkUpdateRequest, _impl_.details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse_Item, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse_Item, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse_Item, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagCreateRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagCreateRequest, _impl_.priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagUpdateRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagUpdateRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagUpdateRequest, _impl_.priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse_Item, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse_Item, _impl_.left_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse_Item, _impl_.right_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse_Item, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryCreateRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryCreateRequest, _impl_.code_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryCreateRequest, _impl_.by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryUpdateRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryUpdateRequest, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationIndexResponse_Item, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationIndexResponse_Item, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationIndexResponse_Item, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationIndexResponse_Item, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationIndexResponse_Item, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationIndexResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationIndexResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationCreateRequest, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationCreateRequest, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationCreateRequest, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationCreateRequest, _impl_.lang_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationUpdateRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationUpdateRequest, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationUpdateRequest, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::NotificationUpdateRequest, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentShowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentShowRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentShowRequest, _impl_.ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentShowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentShowResponse, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentShowResponse, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentIndexResponse_Item, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentIndexResponse_Item, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentIndexResponse_Item, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentIndexResponse_Item, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentIndexResponse_Item, _impl_.content_type_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentIndexResponse_Item, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentIndexResponse_Item, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentIndexResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::AttachmentIndexResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _impl_.created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SignInByGoogleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SignInByGoogleRequest, _impl_.scopes_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SignInByGoogleRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SignInByGoogleRequest, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SignInByGoogleRequest, _impl_.redirect_uri_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SignInByGoogleRequest, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SignInByGoogleRequest, _impl_.ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleSignInUrlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleSignInUrlRequest, _impl_.redirect_uri_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleSignInUrlRequest, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleSignInUrlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleSignInUrlResponse, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleSignInUrlResponse, _impl_.nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatUserBindByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatUserBindByIdRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatUserBindByIdRequest, _impl_.wechat_user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatUserBindByAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatUserBindByAccountRequest, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatUserBindByAccountRequest, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatUserQueryByOpenIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatUserQueryByOpenIdRequest, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatUserQueryByOpenIdRequest, _impl_.open_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatUserQueryByUnionIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatUserQueryByUnionIdRequest, _impl_.union_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllMiniProgramUserResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllMiniProgramUserResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllMiniProgramUserResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllMiniProgramUserResponse_Item, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllMiniProgramUserResponse_Item, _impl_.union_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllMiniProgramUserResponse_Item, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllMiniProgramUserResponse_Item, _impl_.open_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllMiniProgramUserResponse_Item, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllMiniProgramUserResponse_Item, _impl_.avatar_url_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllMiniProgramUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllMiniProgramUserResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_.union_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_.open_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_.sex_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_.city_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_.province_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_.head_img_url_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_.privilege_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse_Item, _impl_.lang_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatAllOauth2UserResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SignInByWechatOauth2Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SignInByWechatOauth2Request, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SignInByWechatOauth2Request, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SignInByWechatOauth2Request, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SignInByWechatOauth2Request, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SignInByWechatOauth2Request, _impl_.ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatOauth2SignInStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatOauth2SignInStateResponse, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatOauth2SignInUrlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatOauth2SignInUrlRequest, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatOauth2SignInUrlRequest, _impl_.redirect_uri_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatOauth2SignInUrlRequest, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatMiniProgramUser, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatMiniProgramUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatMiniProgramUser, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatMiniProgramUser, _impl_.open_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatMiniProgramUser, _impl_.union_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatMiniProgramUser, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::WechatMiniProgramUser, _impl_.avatar_url_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::fig::v1::IdRequest)},
  { 7, -1, -1, sizeof(::palm::fig::v1::Pager)},
  { 15, -1, -1, sizeof(::palm::fig::v1::Pagination)},
  { 26, 36, -1, sizeof(::palm::fig::v1::MediaContent)},
  { 40, -1, -1, sizeof(::palm::fig::v1::UserDetail)},
  { 48, 58, -1, sizeof(::palm::fig::v1::Oauth2State)},
  { 62, 70, -1, sizeof(::palm::fig::v1::UserProfile_PayloadEntry_DoNotUse)},
  { 72, -1, -1, sizeof(::palm::fig::v1::UserProfile)},
  { 79, 94, -1, sizeof(::palm::fig::v1::UserIndexResponse_Item)},
  { 103, -1, -1, sizeof(::palm::fig::v1::UserIndexResponse)},
  { 110, -1, -1, sizeof(::palm::fig::v1::UserSetPasswordRequest)},
  { 117, -1, -1, sizeof(::palm::fig::v1::UserChangePasswordRequest)},
  { 126, 135, -1, sizeof(::palm::fig::v1::UserLogsRequest)},
  { 138, -1, -1, sizeof(::palm::fig::v1::UserLogsResponse_Item)},
  { 150, -1, -1, sizeof(::palm::fig::v1::UserLogsResponse)},
  { 157, -1, -1, sizeof(::palm::fig::v1::UserResetPasswordRequest)},
  { 165, -1, -1, sizeof(::palm::fig::v1::UserTokenRequest)},
  { 172, -1, -1, sizeof(::palm::fig::v1::UserQueryRequest)},
  { 183, -1, -1, sizeof(::palm::fig::v1::UserSignUpByEmailRequest)},
  { 196, -1, -1, sizeof(::palm::fig::v1::UserSignInByPasswordRequest)},
  { 208, -1, -1, sizeof(::palm::fig::v1::UserSignInResponse)},
  { 219, -1, -1, sizeof(::palm::fig::v1::SettingSetRequest)},
  { 228, -1, -1, sizeof(::palm::fig::v1::SettingGetRequest)},
  { 236, -1, -1, sizeof(::palm::fig::v1::SettingByUserRequest)},
  { 243, 255, -1, sizeof(::palm::fig::v1::SettingsResponse_Item)},
  { 261, -1, -1, sizeof(::palm::fig::v1::SettingsResponse)},
  { 268, -1, -1, sizeof(::palm::fig::v1::LocaleByLangRequest)},
  { 275, -1, -1, sizeof(::palm::fig::v1::LocaleGetRequest)},
  { 283, -1, -1, sizeof(::palm::fig::v1::LocalesResponse_Item)},
  { 295, -1, -1, sizeof(::palm::fig::v1::LocalesResponse)},
  { 302, -1, -1, sizeof(::palm::fig::v1::LocaleSetRequest)},
  { 311, -1, -1, sizeof(::palm::fig::v1::IndexNowProfile)},
  { 318, -1, -1, sizeof(::palm::fig::v1::IndexNowPingRequest)},
  { 326, -1, -1, sizeof(::palm::fig::v1::SitemapPingRequest)},
  { 333, -1, -1, sizeof(::palm::fig::v1::SiteMaintenanceModeRequest)},
  { 341, -1, -1, sizeof(::palm::fig::v1::SiteInstallRequest)},
  { 348, 358, -1, sizeof(::palm::fig::v1::TwilioProfile)},
  { 362, -1, -1, sizeof(::palm::fig::v1::SmtpProfile)},
  { 375, -1, -1, sizeof(::palm::fig::v1::EmailTask_Address)},
  { 383, -1, -1, sizeof(::palm::fig::v1::EmailTask_Body)},
  { 391, -1, -1, sizeof(::palm::fig::v1::EmailTask_Attachment)},
  { 399, -1, -1, sizeof(::palm::fig::v1::EmailTask)},
  { 411, -1, -1, sizeof(::palm::fig::v1::SiteTwilioPingRequest)},
  { 420, -1, -1, sizeof(::palm::fig::v1::SiteSmtpPingRequest)},
  { 430, -1, -1, sizeof(::palm::fig::v1::SiteSetLogoRequest)},
  { 437, -1, -1, sizeof(::palm::fig::v1::SiteSetCopyrightRequest)},
  { 444, -1, -1, sizeof(::palm::fig::v1::SiteSetKeywordsRequest)},
  { 451, -1, -1, sizeof(::palm::fig::v1::SiteSetInfoRequest)},
  { 461, -1, -1, sizeof(::palm::fig::v1::SiteLayoutResponse_Author)},
  { 469, -1, -1, sizeof(::palm::fig::v1::SiteLayoutResponse)},
  { 483, -1, -1, sizeof(::palm::fig::v1::GoogleProfile_ReCaptcha)},
  { 491, 499, -1, sizeof(::palm::fig::v1::GoogleProfile)},
  { 501, -1, -1, sizeof(::palm::fig::v1::BaiduProfile_SiteVerify)},
  { 509, 516, -1, sizeof(::palm::fig::v1::BaiduProfile)},
  { 517, -1, -1, sizeof(::palm::fig::v1::SmsTask)},
  { 526, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_Database)},
  { 534, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_PostgreSql)},
  { 543, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_MySql)},
  { 551, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_Redis_Item)},
  { 560, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_Redis)},
  { 568, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_RabbitMq)},
  { 576, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_OpenSearch)},
  { 584, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_Health)},
  { 592, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_System)},
  { 608, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse)},
  { 621, -1, -1, sizeof(::palm::fig::v1::ShorterLinkIndexResponse_Item)},
  { 632, -1, -1, sizeof(::palm::fig::v1::ShorterLinkIndexResponse)},
  { 640, -1, -1, sizeof(::palm::fig::v1::ShorterLinkCreateRequest)},
  { 648, -1, -1, sizeof(::palm::fig::v1::ShorterLinkUpdateRequest)},
  { 657, -1, -1, sizeof(::palm::fig::v1::TagIndexResponse_Item)},
  { 667, -1, -1, sizeof(::palm::fig::v1::TagIndexResponse)},
  { 674, -1, -1, sizeof(::palm::fig::v1::TagCreateRequest)},
  { 682, -1, -1, sizeof(::palm::fig::v1::TagUpdateRequest)},
  { 691, -1, -1, sizeof(::palm::fig::v1::CategoryIndexResponse_Item)},
  { 702, -1, -1, sizeof(::palm::fig::v1::CategoryIndexResponse)},
  { 709, -1, -1, sizeof(::palm::fig::v1::CategoryCreateRequest)},
  { 719, -1, -1, sizeof(::palm::fig::v1::CategoryUpdateRequest)},
  { 727, -1, -1, sizeof(::palm::fig::v1::NotificationIndexResponse_Item)},
  { 739, -1, -1, sizeof(::palm::fig::v1::NotificationIndexResponse)},
  { 747, -1, -1, sizeof(::palm::fig::v1::NotificationCreateRequest)},
  { 757, -1, -1, sizeof(::palm::fig::v1::NotificationUpdateRequest)},
  { 767, -1, -1, sizeof(::palm::fig::v1::AttachmentShowRequest)},
  { 775, -1, -1, sizeof(::palm::fig::v1::AttachmentShowResponse)},
  { 783, -1, -1, sizeof(::palm::fig::v1::AttachmentIndexResponse_Item)},
  { 797, -1, -1, sizeof(::palm::fig::v1::AttachmentIndexResponse)},
  { 805, -1, -1, sizeof(::palm::fig::v1::LeaveWordIndexResponse_Item)},
  { 817, -1, -1, sizeof(::palm::fig::v1::LeaveWordIndexResponse)},
  { 825, -1, -1, sizeof(::palm::fig::v1::SignInByGoogleRequest)},
  { 837, -1, -1, sizeof(::palm::fig::v1::GoogleSignInUrlRequest)},
  { 845, -1, -1, sizeof(::palm::fig::v1::GoogleSignInUrlResponse)},
  { 853, -1, -1, sizeof(::palm::fig::v1::WechatUserBindByIdRequest)},
  { 861, -1, -1, sizeof(::palm::fig::v1::WechatUserBindByAccountRequest)},
  { 869, -1, -1, sizeof(::palm::fig::v1::WechatUserQueryByOpenIdRequest)},
  { 877, -1, -1, sizeof(::palm::fig::v1::WechatUserQueryByUnionIdRequest)},
  { 884, 897, -1, sizeof(::palm::fig::v1::WechatAllMiniProgramUserResponse_Item)},
  { 904, -1, -1, sizeof(::palm::fig::v1::WechatAllMiniProgramUserResponse)},
  { 911, 930, -1, sizeof(::palm::fig::v1::WechatAllOauth2UserResponse_Item)},
  { 943, -1, -1, sizeof(::palm::fig::v1::WechatAllOauth2UserResponse)},
  { 950, -1, -1, sizeof(::palm::fig::v1::SignInByWechatOauth2Request)},
  { 961, -1, -1, sizeof(::palm::fig::v1::WechatOauth2SignInStateResponse)},
  { 968, -1, -1, sizeof(::palm::fig::v1::WechatOauth2SignInUrlRequest)},
  { 977, 988, -1, sizeof(::palm::fig::v1::WechatMiniProgramUser)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::fig::v1::_IdRequest_default_instance_._instance,
  &::palm::fig::v1::_Pager_default_instance_._instance,
  &::palm::fig::v1::_Pagination_default_instance_._instance,
  &::palm::fig::v1::_MediaContent_default_instance_._instance,
  &::palm::fig::v1::_UserDetail_default_instance_._instance,
  &::palm::fig::v1::_Oauth2State_default_instance_._instance,
  &::palm::fig::v1::_UserProfile_PayloadEntry_DoNotUse_default_instance_._instance,
  &::palm::fig::v1::_UserProfile_default_instance_._instance,
  &::palm::fig::v1::_UserIndexResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_UserIndexResponse_default_instance_._instance,
  &::palm::fig::v1::_UserSetPasswordRequest_default_instance_._instance,
  &::palm::fig::v1::_UserChangePasswordRequest_default_instance_._instance,
  &::palm::fig::v1::_UserLogsRequest_default_instance_._instance,
  &::palm::fig::v1::_UserLogsResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_UserLogsResponse_default_instance_._instance,
  &::palm::fig::v1::_UserResetPasswordRequest_default_instance_._instance,
  &::palm::fig::v1::_UserTokenRequest_default_instance_._instance,
  &::palm::fig::v1::_UserQueryRequest_default_instance_._instance,
  &::palm::fig::v1::_UserSignUpByEmailRequest_default_instance_._instance,
  &::palm::fig::v1::_UserSignInByPasswordRequest_default_instance_._instance,
  &::palm::fig::v1::_UserSignInResponse_default_instance_._instance,
  &::palm::fig::v1::_SettingSetRequest_default_instance_._instance,
  &::palm::fig::v1::_SettingGetRequest_default_instance_._instance,
  &::palm::fig::v1::_SettingByUserRequest_default_instance_._instance,
  &::palm::fig::v1::_SettingsResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_SettingsResponse_default_instance_._instance,
  &::palm::fig::v1::_LocaleByLangRequest_default_instance_._instance,
  &::palm::fig::v1::_LocaleGetRequest_default_instance_._instance,
  &::palm::fig::v1::_LocalesResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_LocalesResponse_default_instance_._instance,
  &::palm::fig::v1::_LocaleSetRequest_default_instance_._instance,
  &::palm::fig::v1::_IndexNowProfile_default_instance_._instance,
  &::palm::fig::v1::_IndexNowPingRequest_default_instance_._instance,
  &::palm::fig::v1::_SitemapPingRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteMaintenanceModeRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteInstallRequest_default_instance_._instance,
  &::palm::fig::v1::_TwilioProfile_default_instance_._instance,
  &::palm::fig::v1::_SmtpProfile_default_instance_._instance,
  &::palm::fig::v1::_EmailTask_Address_default_instance_._instance,
  &::palm::fig::v1::_EmailTask_Body_default_instance_._instance,
  &::palm::fig::v1::_EmailTask_Attachment_default_instance_._instance,
  &::palm::fig::v1::_EmailTask_default_instance_._instance,
  &::palm::fig::v1::_SiteTwilioPingRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteSmtpPingRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteSetLogoRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteSetCopyrightRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteSetKeywordsRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteSetInfoRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteLayoutResponse_Author_default_instance_._instance,
  &::palm::fig::v1::_SiteLayoutResponse_default_instance_._instance,
  &::palm::fig::v1::_GoogleProfile_ReCaptcha_default_instance_._instance,
  &::palm::fig::v1::_GoogleProfile_default_instance_._instance,
  &::palm::fig::v1::_BaiduProfile_SiteVerify_default_instance_._instance,
  &::palm::fig::v1::_BaiduProfile_default_instance_._instance,
  &::palm::fig::v1::_SmsTask_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_Database_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_PostgreSql_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_MySql_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_Redis_Item_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_Redis_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_RabbitMq_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_OpenSearch_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_Health_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_System_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_default_instance_._instance,
  &::palm::fig::v1::_ShorterLinkIndexResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_ShorterLinkIndexResponse_default_instance_._instance,
  &::palm::fig::v1::_ShorterLinkCreateRequest_default_instance_._instance,
  &::palm::fig::v1::_ShorterLinkUpdateRequest_default_instance_._instance,
  &::palm::fig::v1::_TagIndexResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_TagIndexResponse_default_instance_._instance,
  &::palm::fig::v1::_TagCreateRequest_default_instance_._instance,
  &::palm::fig::v1::_TagUpdateRequest_default_instance_._instance,
  &::palm::fig::v1::_CategoryIndexResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_CategoryIndexResponse_default_instance_._instance,
  &::palm::fig::v1::_CategoryCreateRequest_default_instance_._instance,
  &::palm::fig::v1::_CategoryUpdateRequest_default_instance_._instance,
  &::palm::fig::v1::_NotificationIndexResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_NotificationIndexResponse_default_instance_._instance,
  &::palm::fig::v1::_NotificationCreateRequest_default_instance_._instance,
  &::palm::fig::v1::_NotificationUpdateRequest_default_instance_._instance,
  &::palm::fig::v1::_AttachmentShowRequest_default_instance_._instance,
  &::palm::fig::v1::_AttachmentShowResponse_default_instance_._instance,
  &::palm::fig::v1::_AttachmentIndexResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_AttachmentIndexResponse_default_instance_._instance,
  &::palm::fig::v1::_LeaveWordIndexResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_LeaveWordIndexResponse_default_instance_._instance,
  &::palm::fig::v1::_SignInByGoogleRequest_default_instance_._instance,
  &::palm::fig::v1::_GoogleSignInUrlRequest_default_instance_._instance,
  &::palm::fig::v1::_GoogleSignInUrlResponse_default_instance_._instance,
  &::palm::fig::v1::_WechatUserBindByIdRequest_default_instance_._instance,
  &::palm::fig::v1::_WechatUserBindByAccountRequest_default_instance_._instance,
  &::palm::fig::v1::_WechatUserQueryByOpenIdRequest_default_instance_._instance,
  &::palm::fig::v1::_WechatUserQueryByUnionIdRequest_default_instance_._instance,
  &::palm::fig::v1::_WechatAllMiniProgramUserResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_WechatAllMiniProgramUserResponse_default_instance_._instance,
  &::palm::fig::v1::_WechatAllOauth2UserResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_WechatAllOauth2UserResponse_default_instance_._instance,
  &::palm::fig::v1::_SignInByWechatOauth2Request_default_instance_._instance,
  &::palm::fig::v1::_WechatOauth2SignInStateResponse_default_instance_._instance,
  &::palm::fig::v1::_WechatOauth2SignInUrlRequest_default_instance_._instance,
  &::palm::fig::v1::_WechatMiniProgramUser_default_instance_._instance,
};

const char descriptor_table_protodef_fig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tfig.proto\022\013palm.fig.v1\032\033google/protobu"
  "f/empty.proto\032\037google/protobuf/timestamp"
  ".proto\032\036google/protobuf/duration.proto\032\014"
  "orchid.proto\032\021metasequoia.proto\"\027\n\tIdReq"
  "uest\022\n\n\002id\030\001 \001(\005\"#\n\005Pager\022\014\n\004page\030\001 \001(\003\022"
  "\014\n\004size\030\002 \001(\003\"_\n\nPagination\022\014\n\004page\030\001 \001("
  "\003\022\014\n\004size\030\002 \001(\003\022\r\n\005total\030\003 \001(\003\022\020\n\010has_ne"
  "xt\030\013 \001(\010\022\024\n\014has_previous\030\014 \001(\010\"\300\002\n\014Media"
  "Content\0220\n\006editor\030\001 \001(\0162 .palm.fig.v1.Me"
  "diaContent.Editor\022\014\n\004body\030\002 \001(\t\0220\n\006statu"
  "s\030\003 \001(\0162 .palm.fig.v1.MediaContent.Statu"
  "s\0225\n\014published_at\030\013 \001(\0132\032.google.protobu"
  "f.TimestampH\000\210\001\001\"!\n\006Editor\022\014\n\010TEXTAREA\020\000"
  "\022\t\n\005QUILL\020\001\"S\n\006Status\022\r\n\tPublished\020\000\022\t\n\005"
  "Draft\020\001\022\013\n\007Pending\020\002\022\013\n\007Private\020\003\022\n\n\006Fut"
  "ure\020\004\022\t\n\005Trash\020cB\017\n\r_published_at\"1\n\nUse"
  "rDetail\022\020\n\010nickname\030\001 \001(\t\022\021\n\treal_name\030\002"
  " \001(\t\"Q\n\013Oauth2State\022\014\n\004goto\030\001 \001(\t\022\014\n\004hos"
  "t\030\002 \001(\t\022\021\n\004user\030\003 \001(\tH\000\210\001\001\022\n\n\002id\030\t \001(\tB\007"
  "\n\005_user\"u\n\013UserProfile\0226\n\007payload\030\001 \003(\0132"
  "%.palm.fig.v1.UserProfile.PayloadEntry\032."
  "\n\014PayloadEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\t:\0028\001\"\244\003\n\021UserIndexResponse\0222\n\005items\030\001 "
  "\003(\0132#.palm.fig.v1.UserIndexResponse.Item"
  "\032\332\002\n\004Item\022\020\n\010nickname\030\001 \001(\t\022\021\n\treal_name"
  "\030\002 \001(\t\022\r\n\005email\030\003 \001(\t\022\016\n\006locale\030\022 \001(\t\022\020\n"
  "\010timezone\030\023 \001(\t\0225\n\014confirmed_at\030[ \001(\0132\032."
  "google.protobuf.TimestampH\000\210\001\001\0222\n\tlocked"
  "_at\030\\ \001(\0132\032.google.protobuf.TimestampH\001\210"
  "\001\001\0223\n\ndeleted_at\030] \001(\0132\032.google.protobuf"
  ".TimestampH\002\210\001\001\022.\n\002by\030c \001(\0162\".palm.fig.v"
  "1.UserSignInResponse.ByB\017\n\r_confirmed_at"
  "B\014\n\n_locked_atB\r\n\013_deleted_at\"*\n\026UserSet"
  "PasswordRequest\022\020\n\010password\030\001 \001(\t\"j\n\031Use"
  "rChangePasswordRequest\022\030\n\020current_passwo"
  "rd\030\001 \001(\t\022\024\n\014new_password\030\002 \001(\t\022\035\n\025passwo"
  "rd_confirmation\030\003 \001(\t\"\203\001\n\017UserLogsReques"
  "t\022\023\n\006plugin\030\001 \001(\tH\000\210\001\001\022(\n\004from\030\002 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\022&\n\002to\030\003 \001(\0132\032.g"
  "oogle.protobuf.TimestampB\t\n\007_plugin\"\246\002\n\020"
  "UserLogsResponse\0221\n\005items\030\001 \003(\0132\".palm.f"
  "ig.v1.UserLogsResponse.Item\032\336\001\n\004Item\022\n\n\002"
  "id\030\001 \001(\005\0227\n\005level\030\002 \001(\0162(.palm.fig.v1.Us"
  "erLogsResponse.Item.Level\022\016\n\006plugin\030\003 \001("
  "\t\022\n\n\002ip\030\004 \001(\t\022\017\n\007message\030\005 \001(\t\022.\n\ncreate"
  "d_at\030\t \001(\0132\032.google.protobuf.Timestamp\"4"
  "\n\005Level\022\t\n\005DEBUG\020\000\022\010\n\004INFO\020\001\022\013\n\007WARNING\020"
  "\002\022\t\n\005ERROR\020\003\";\n\030UserResetPasswordRequest"
  "\022\r\n\005token\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"!\n\020Use"
  "rTokenRequest\022\r\n\005token\030\001 \001(\t\"]\n\020UserQuer"
  "yRequest\022\017\n\005email\030\001 \001(\tH\000\022\022\n\010nickname\030\002 "
  "\001(\tH\000\022\017\n\005phone\030\003 \001(\tH\000\022\r\n\003uid\030\004 \001(\tH\000B\004\n"
  "\002by\"\220\001\n\030UserSignUpByEmailRequest\022\020\n\010nick"
  "name\030\001 \001(\t\022\021\n\treal_name\030\002 \001(\t\022\r\n\005email\030\003"
  " \001(\t\022\020\n\010password\030\004 \001(\t\022\016\n\006locale\030\013 \001(\t\022\020"
  "\n\010timezone\030\014 \001(\t\022\014\n\004home\030c \001(\t\"\225\001\n\033UserS"
  "ignInByPasswordRequest\022\017\n\005email\030\001 \001(\tH\000\022"
  "\022\n\010nickname\030\002 \001(\tH\000\022\017\n\005phone\030\003 \001(\tH\000\022\020\n\010"
  "password\030\013 \001(\t\022&\n\003ttl\030\023 \001(\0132\031.google.pro"
  "tobuf.DurationB\006\n\004user\"\263\002\n\022UserSignInRes"
  "ponse\022\021\n\treal_name\030\001 \001(\t\022.\n\002by\030\t \001(\0162\".p"
  "alm.fig.v1.UserSignInResponse.By\022\r\n\005toke"
  "n\030\013 \001(\t\022(\n\005roles\030\014 \003(\0132\031.palm.metasequoi"
  "a.v1.Role\0224\n\013permissions\030\r \003(\0132\037.palm.me"
  "tasequoia.v1.Permission\"k\n\002By\022\014\n\010Nicknam"
  "e\020\000\022\t\n\005Email\020\001\022\t\n\005Phone\020\002\022\020\n\014WechatOauth"
  "2\020\013\022\025\n\021WechatMiniProgram\020\014\022\014\n\010Facebook\020\025"
  "\022\n\n\006Google\020\026\"\?\n\021SettingSetRequest\022\016\n\006glo"
  "bal\030\001 \001(\010\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \001(\014\"0\n"
  "\021SettingGetRequest\022\016\n\006global\030\001 \001(\010\022\013\n\003ke"
  "y\030\002 \001(\t\"$\n\024SettingByUserRequest\022\014\n\004user\030"
  "\001 \001(\005\"\370\001\n\020SettingsResponse\0221\n\005items\030\001 \003("
  "\0132\".palm.fig.v1.SettingsResponse.Item\032\260\001"
  "\n\004Item\022\n\n\002id\030\001 \001(\005\022\024\n\007user_id\030\002 \001(\005H\000\210\001\001"
  "\022\013\n\003key\030\003 \001(\t\022\r\n\005value\030\004 \001(\014\022.\n\ncreated_"
  "at\030\013 \001(\0132\032.google.protobuf.Timestamp\022.\n\n"
  "updated_at\030\014 \001(\0132\032.google.protobuf.Times"
  "tampB\n\n\010_user_id\"#\n\023LocaleByLangRequest\022"
  "\014\n\004lang\030\001 \001(\t\".\n\020LocaleGetRequest\022\014\n\004lan"
  "g\030\001 \001(\t\022\014\n\004code\030\002 \001(\t\"\345\001\n\017LocalesRespons"
  "e\0220\n\005items\030\001 \003(\0132!.palm.fig.v1.LocalesRe"
  "sponse.Item\032\237\001\n\004Item\022\n\n\002id\030\001 \001(\005\022\014\n\004lang"
  "\030\002 \001(\t\022\014\n\004code\030\003 \001(\t\022\017\n\007message\030\004 \001(\t\022.\n"
  "\ncreated_at\030\013 \001(\0132\032.google.protobuf.Time"
  "stamp\022.\n\nupdated_at\030\014 \001(\0132\032.google.proto"
  "buf.Timestamp\"\?\n\020LocaleSetRequest\022\014\n\004lan"
  "g\030\001 \001(\t\022\014\n\004code\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\"\036"
  "\n\017IndexNowProfile\022\013\n\003key\030\001 \001(\t\"0\n\023IndexN"
  "owPingRequest\022\013\n\003key\030\001 \001(\t\022\014\n\004home\030\t \001(\t"
  "\"\"\n\022SitemapPingRequest\022\014\n\004home\030\001 \001(\t\"T\n\032"
  "SiteMaintenanceModeRequest\022&\n\003ttl\030\001 \001(\0132"
  "\031.google.protobuf.Duration\022\016\n\006reason\030\002 \001"
  "(\t\"I\n\022SiteInstallRequest\0223\n\004user\030\001 \001(\0132%"
  ".palm.fig.v1.UserSignUpByEmailRequest\"\200\001"
  "\n\rTwilioProfile\022\014\n\004from\030\001 \001(\t\022\023\n\013account"
  "_sid\030\002 \001(\t\022\022\n\nauth_token\030\003 \001(\t\022 \n\023sms_st"
  "atus_callback\030\t \001(\tH\000\210\001\001B\026\n\024_sms_status_"
  "callback\"\255\002\n\013SmtpProfile\022\014\n\004host\030\001 \001(\t\022\014"
  "\n\004port\030\002 \001(\r\0228\n\013auth_method\030\003 \001(\0162#.palm"
  ".fig.v1.SmtpProfile.AuthMethod\022*\n\002cc\030\010 \003"
  "(\0132\036.palm.fig.v1.EmailTask.Address\022+\n\003bc"
  "c\030\t \003(\0132\036.palm.fig.v1.EmailTask.Address\022"
  ",\n\004from\030\013 \001(\0132\036.palm.fig.v1.EmailTask.Ad"
  "dress\022\020\n\010password\030\014 \001(\t\"/\n\nAuthMethod\022\010\n"
  "\004None\020\000\022\t\n\005Login\020\001\022\014\n\010StartTls\020\002\"\375\002\n\tEma"
  "ilTask\022*\n\002to\030\001 \001(\0132\036.palm.fig.v1.EmailTa"
  "sk.Address\022*\n\002cc\030\002 \003(\0132\036.palm.fig.v1.Ema"
  "ilTask.Address\022+\n\003bcc\030\003 \003(\0132\036.palm.fig.v"
  "1.EmailTask.Address\022\017\n\007subject\030\013 \001(\t\022)\n\004"
  "body\030\014 \001(\0132\033.palm.fig.v1.EmailTask.Body\022"
  "6\n\013attachments\030\r \003(\0132!.palm.fig.v1.Email"
  "Task.Attachment\032&\n\007Address\022\014\n\004name\030\001 \001(\t"
  "\022\r\n\005email\030\002 \001(\t\032\"\n\004Body\022\014\n\004text\030\001 \001(\t\022\014\n"
  "\004html\030\002 \001(\010\032+\n\nAttachment\022\014\n\004name\030\001 \001(\t\022"
  "\017\n\007payload\030\002 \001(\014\"a\n\025SiteTwilioPingReques"
  "t\022\n\n\002to\030\001 \001(\t\022\017\n\007message\030\002 \001(\t\022+\n\007profil"
  "e\030\t \001(\0132\032.palm.fig.v1.TwilioProfile\"\216\001\n\023"
  "SiteSmtpPingRequest\022*\n\002to\030\001 \001(\0132\036.palm.f"
  "ig.v1.EmailTask.Address\022\017\n\007subject\030\002 \001(\t"
  "\022\017\n\007content\030\003 \001(\t\022)\n\007profile\030\t \001(\0132\030.pal"
  "m.fig.v1.SmtpProfile\"!\n\022SiteSetLogoReque"
  "st\022\013\n\003url\030\001 \001(\t\"*\n\027SiteSetCopyrightReque"
  "st\022\017\n\007payload\030\001 \001(\t\"\'\n\026SiteSetKeywordsRe"
  "quest\022\r\n\005items\030\001 \003(\t\"W\n\022SiteSetInfoReque"
  "st\022\014\n\004lang\030\001 \001(\t\022\r\n\005title\030\013 \001(\t\022\017\n\007subhe"
  "ad\030\014 \001(\t\022\023\n\013description\030\r \001(\t\"\356\001\n\022SiteLa"
  "youtResponse\022\r\n\005title\030\001 \001(\t\022\017\n\007subhead\030\002"
  " \001(\t\022\020\n\010keywords\030\003 \003(\t\022\023\n\013description\030\004 "
  "\001(\t\0226\n\006author\030\005 \001(\0132&.palm.fig.v1.SiteLa"
  "youtResponse.Author\022\021\n\tcopyright\030\006 \001(\t\022\014"
  "\n\004logo\030\007 \001(\t\022\021\n\tlanguages\030\t \003(\t\032%\n\006Autho"
  "r\022\014\n\004name\030\001 \001(\t\022\r\n\005email\030\002 \001(\t\"\274\001\n\rGoogl"
  "eProfile\022\033\n\016site_verify_id\030\001 \001(\tH\000\210\001\001\022=\n"
  "\nre_captcha\030\002 \001(\0132$.palm.fig.v1.GooglePr"
  "ofile.ReCaptchaH\001\210\001\001\032-\n\tReCaptcha\022\020\n\010sit"
  "e_key\030\001 \001(\t\022\016\n\006secret\030\002 \001(\tB\021\n\017_site_ver"
  "ify_idB\r\n\013_re_captcha\"\211\001\n\014BaiduProfile\022>"
  "\n\013site_verify\030\001 \001(\0132$.palm.fig.v1.BaiduP"
  "rofile.SiteVerifyH\000\210\001\001\032)\n\nSiteVerify\022\n\n\002"
  "id\030\001 \001(\t\022\017\n\007content\030\002 \001(\tB\016\n\014_site_verif"
  "y\"1\n\007SmsTask\022\014\n\004from\030\001 \001(\t\022\n\n\002to\030\002 \003(\t\022\014"
  "\n\004body\030\003 \001(\t\"\247\010\n\022SiteStatusResponse\022>\n\np"
  "ostgresql\030\001 \001(\0132*.palm.fig.v1.SiteStatus"
  "Response.PostgreSql\0224\n\005mysql\030\002 \001(\0132%.pal"
  "m.fig.v1.SiteStatusResponse.MySql\0224\n\005red"
  "is\030\003 \001(\0132%.palm.fig.v1.SiteStatusRespons"
  "e.Redis\022:\n\010rabbitmq\030\004 \001(\0132(.palm.fig.v1."
  "SiteStatusResponse.RabbitMq\022>\n\nopensearc"
  "h\030\005 \001(\0132*.palm.fig.v1.SiteStatusResponse"
  ".OpenSearch\0226\n\006system\030\013 \001(\0132&.palm.fig.v"
  "1.SiteStatusResponse.System\0228\n\010healthes\030"
  "\025 \003(\0132&.palm.fig.v1.SiteStatusResponse.H"
  "ealth\032&\n\010Database\022\014\n\004name\030\001 \001(\t\022\014\n\004size\030"
  "\002 \001(\t\032\203\001\n\nPostgreSql\022\017\n\007version\030\001 \001(\t\022\'\n"
  "\003now\030\002 \001(\0132\032.google.protobuf.Timestamp\022;"
  "\n\tdatabases\030\t \003(\0132(.palm.fig.v1.SiteStat"
  "usResponse.Database\032&\n\005MySql\022\014\n\004size\030\001 \001"
  "(\004\022\017\n\007version\030\002 \001(\t\032\200\001\n\005Redis\022\014\n\004info\030\001 "
  "\001(\t\0229\n\005items\030\002 \003(\0132*.palm.fig.v1.SiteSta"
  "tusResponse.Redis.Item\032.\n\004Item\022\014\n\004node\030\001"
  " \001(\t\022\013\n\003key\030\002 \001(\t\022\013\n\003ttl\030\003 \001(\003\032/\n\010Rabbit"
  "Mq\022\020\n\010protocol\030\001 \001(\t\022\021\n\theartbeat\030\002 \001(\r\032"
  "\'\n\nOpenSearch\022\013\n\003url\030\001 \001(\t\022\014\n\004info\030\002 \001(\t"
  "\032&\n\006Health\022\014\n\004name\030\001 \001(\t\022\016\n\006status\030\002 \001(\t"
  "\032\233\001\n\006System\022\017\n\007version\030\001 \001(\t\022\013\n\003cpu\030\002 \001("
  "\t\022\016\n\006memory\030\003 \001(\t\022\014\n\004boot\030\004 \001(\t\022\014\n\004disk\030"
  "\005 \001(\t\022\014\n\004load\030\006 \001(\t\022\n\n\002fs\030\007 \001(\t\022\014\n\004swap\030"
  "\010 \001(\t\022\016\n\006uptime\030\t \001(\t\022\017\n\007network\030\n \001(\t\"\362"
  "\001\n\030ShorterLinkIndexResponse\022+\n\npaginatio"
  "n\030\001 \001(\0132\027.palm.fig.v1.Pagination\0229\n\005item"
  "s\030\013 \003(\0132*.palm.fig.v1.ShorterLinkIndexRe"
  "sponse.Item\032n\n\004Item\022\n\n\002id\030\001 \001(\005\022\013\n\003url\030\002"
  " \001(\t\022\017\n\007details\030\003 \001(\t\022\014\n\004code\030\t \001(\t\022.\n\nu"
  "pdated_at\030\013 \001(\0132\032.google.protobuf.Timest"
  "amp\"8\n\030ShorterLinkCreateRequest\022\013\n\003url\030\001"
  " \001(\t\022\017\n\007details\030\002 \001(\t\"D\n\030ShorterLinkUpda"
  "teRequest\022\n\n\002id\030\001 \001(\005\022\013\n\003url\030\002 \001(\t\022\017\n\007de"
  "tails\030\003 \001(\t\"\251\001\n\020TagIndexResponse\0221\n\005item"
  "s\030\001 \003(\0132\".palm.fig.v1.TagIndexResponse.I"
  "tem\032b\n\004Item\022\n\n\002id\030\001 \001(\005\022\014\n\004code\030\002 \001(\t\022\020\n"
  "\010priority\030\003 \001(\005\022.\n\nupdated_at\030\013 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\"2\n\020TagCreateRequ"
  "est\022\014\n\004code\030\001 \001(\t\022\020\n\010priority\030\013 \001(\005\">\n\020T"
  "agUpdateRequest\022\n\n\002id\030\001 \001(\005\022\014\n\004code\030\002 \001("
  "\t\022\020\n\010priority\030\013 \001(\005\"\276\001\n\025CategoryIndexRes"
  "ponse\0226\n\005items\030\001 \003(\0132\'.palm.fig.v1.Categ"
  "oryIndexResponse.Item\032m\n\004Item\022\n\n\002id\030\001 \001("
  "\005\022\014\n\004code\030\002 \001(\t\022\014\n\004left\030\003 \001(\005\022\r\n\005right\030\004"
  " \001(\005\022.\n\nupdated_at\030\013 \001(\0132\032.google.protob"
  "uf.Timestamp\"M\n\025CategoryCreateRequest\022\014\n"
  "\004code\030\001 \001(\t\022\016\n\004left\030\002 \001(\005H\000\022\020\n\006parent\030\003 "
  "\001(\005H\000B\004\n\002by\"1\n\025CategoryUpdateRequest\022\n\n\002"
  "id\030\001 \001(\005\022\014\n\004code\030\002 \001(\t\"\322\002\n\031NotificationI"
  "ndexResponse\022:\n\005items\030\001 \003(\0132+.palm.fig.v"
  "1.NotificationIndexResponse.Item\022+\n\npagi"
  "nation\030\t \001(\0132\027.palm.fig.v1.Pagination\032\313\001"
  "\n\004Item\022\n\n\002id\030\001 \001(\005\022@\n\005level\030\002 \001(\01621.palm"
  ".fig.v1.NotificationIndexResponse.Item.L"
  "evel\022\r\n\005title\030\003 \001(\t\022\013\n\003url\030\004 \001(\t\022\014\n\004lang"
  "\030\010 \001(\t\022.\n\nupdated_at\030\t \001(\0132\032.google.prot"
  "obuf.Timestamp\"\033\n\005Level\022\010\n\004NOTE\020\000\022\010\n\004INF"
  "O\020\001\"\207\001\n\031NotificationCreateRequest\022@\n\005lev"
  "el\030\001 \001(\01621.palm.fig.v1.NotificationIndex"
  "Response.Item.Level\022\r\n\005title\030\002 \001(\t\022\013\n\003ur"
  "l\030\003 \001(\t\022\014\n\004lang\030\t \001(\t\"\205\001\n\031NotificationUp"
  "dateRequest\022\n\n\002id\030\001 \001(\005\022@\n\005level\030\002 \001(\01621"
  ".palm.fig.v1.NotificationIndexResponse.I"
  "tem.Level\022\r\n\005title\030\003 \001(\t\022\013\n\003url\030\004 \001(\t\"K\n"
  "\025AttachmentShowRequest\022\n\n\002id\030\001 \001(\005\022&\n\003tt"
  "l\030\002 \001(\0132\031.google.protobuf.Duration\"^\n\026At"
  "tachmentShowResponse\0227\n\004item\030\001 \001(\0132).pal"
  "m.fig.v1.AttachmentIndexResponse.Item\022\013\n"
  "\003url\030\002 \001(\t\"\310\002\n\027AttachmentIndexResponse\022+"
  "\n\npagination\030\001 \001(\0132\027.palm.fig.v1.Paginat"
  "ion\0228\n\005items\030\013 \003(\0132).palm.fig.v1.Attachm"
  "entIndexResponse.Item\032\305\001\n\004Item\022\n\n\002id\030\001 \001"
  "(\005\022\016\n\006bucket\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\r\n\005titl"
  "e\030\004 \001(\t\022\014\n\004size\030\005 \001(\003\022\024\n\014content_type\030\006 "
  "\001(\t\0220\n\006status\030\007 \001(\0162 .palm.fig.v1.MediaC"
  "ontent.Status\022.\n\nupdated_at\030\013 \001(\0132\032.goog"
  "le.protobuf.Timestamp\"\271\002\n\026LeaveWordIndex"
  "Response\0227\n\005items\030\001 \003(\0132(.palm.fig.v1.Le"
  "aveWordIndexResponse.Item\022+\n\npagination\030"
  "\t \001(\0132\027.palm.fig.v1.Pagination\032\270\001\n\004Item\022"
  "\n\n\002id\030\001 \001(\005\022\014\n\004lang\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022*\n"
  "\007content\030\010 \001(\0132\031.palm.fig.v1.MediaConten"
  "t\022.\n\nupdated_at\030\013 \001(\0132\032.google.protobuf."
  "Timestamp\022.\n\ncreated_at\030\014 \001(\0132\032.google.p"
  "rotobuf.Timestamp\"\221\001\n\025SignInByGoogleRequ"
  "est\022\016\n\006scopes\030\001 \003(\t\022\014\n\004code\030\002 \001(\t\022\r\n\005sta"
  "te\030\003 \001(\t\022\024\n\014redirect_uri\030\004 \001(\t\022\r\n\005nonce\030"
  "\t \001(\t\022&\n\003ttl\030\013 \001(\0132\031.google.protobuf.Dur"
  "ation\"W\n\026GoogleSignInUrlRequest\022\024\n\014redir"
  "ect_uri\030\001 \001(\t\022\'\n\005state\030\002 \001(\0132\030.palm.fig."
  "v1.Oauth2State\"5\n\027GoogleSignInUrlRespons"
  "e\022\013\n\003url\030\001 \001(\t\022\r\n\005nonce\030\002 \001(\t\"D\n\031WechatU"
  "serBindByIdRequest\022\017\n\007user_id\030\001 \001(\005\022\026\n\016w"
  "echat_user_id\030\002 \001(\005\"D\n\036WechatUserBindByA"
  "ccountRequest\022\020\n\010nickname\030\001 \001(\t\022\020\n\010passw"
  "ord\030\002 \001(\t\"A\n\036WechatUserQueryByOpenIdRequ"
  "est\022\016\n\006app_id\030\001 \001(\t\022\017\n\007open_id\030\002 \001(\t\"3\n\037"
  "WechatUserQueryByUnionIdRequest\022\020\n\010union"
  "_id\030\001 \001(\t\"\212\002\n WechatAllMiniProgramUserRe"
  "sponse\022A\n\005items\030\001 \003(\01322.palm.fig.v1.Wech"
  "atAllMiniProgramUserResponse.Item\032\242\001\n\004It"
  "em\022\n\n\002id\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\005\022\020\n\010union"
  "_id\030\003 \001(\t\022\016\n\006app_id\030\004 \001(\t\022\017\n\007open_id\030\005 \001"
  "(\t\022\025\n\010nickname\030\013 \001(\tH\000\210\001\001\022\027\n\navatar_url\030"
  "\014 \001(\tH\001\210\001\001B\013\n\t_nicknameB\r\n\013_avatar_url\"\321"
  "\002\n\033WechatAllOauth2UserResponse\022<\n\005items\030"
  "\001 \003(\0132-.palm.fig.v1.WechatAllOauth2UserR"
  "esponse.Item\032\363\001\n\004Item\022\n\n\002id\030\001 \001(\005\022\017\n\007use"
  "r_id\030\002 \001(\005\022\020\n\010union_id\030\003 \001(\t\022\016\n\006app_id\030\004"
  " \001(\t\022\017\n\007open_id\030\005 \001(\t\022\020\n\010nickname\030\013 \001(\t\022"
  "\013\n\003sex\030\014 \001(\005\022\014\n\004city\030\r \001(\t\022\020\n\010province\030\016"
  " \001(\t\022\017\n\007country\030\017 \001(\t\022\031\n\014head_img_url\030\020 "
  "\001(\tH\000\210\001\001\022\021\n\tprivilege\030\021 \003(\t\022\014\n\004lang\030\022 \001("
  "\tB\017\n\r_head_img_url\"\273\001\n\033SignInByWechatOau"
  "th2Request\022\r\n\005state\030\001 \001(\t\022\014\n\004code\030\002 \001(\t\022"
  "\016\n\006app_id\030\003 \001(\t\022G\n\010language\030\010 \001(\01625.palm"
  ".orchid.v1.WechatOauth2QrConnectRequest."
  "Language\022&\n\003ttl\030\013 \001(\0132\031.google.protobuf."
  "Duration\"0\n\037WechatOauth2SignInStateRespo"
  "nse\022\r\n\005state\030\001 \001(\t\"\215\001\n\034WechatOauth2SignI"
  "nUrlRequest\022\016\n\006app_id\030\001 \001(\t\022\024\n\014redirect_"
  "uri\030\002 \001(\t\022G\n\010language\030\003 \001(\01625.palm.orchi"
  "d.v1.WechatOauth2QrConnectRequest.Langua"
  "ge\"\226\001\n\025WechatMiniProgramUser\022\016\n\006app_id\030\013"
  " \001(\t\022\017\n\007open_id\030\014 \001(\t\022\020\n\010union_id\030\r \001(\t\022"
  "\025\n\010nickname\030\025 \001(\tH\000\210\001\001\022\027\n\navatar_url\030\026 \001"
  "(\tH\001\210\001\001B\013\n\t_nicknameB\r\n\013_avatar_url2\226\r\n\004"
  "User\022_\n\020SignInByPassword\022(.palm.fig.v1.U"
  "serSignInByPasswordRequest\032\037.palm.fig.v1"
  ".UserSignInResponse\"\000\022P\n\rSignUpByEmail\022%"
  ".palm.fig.v1.UserSignUpByEmailRequest\032\026."
  "google.protobuf.Empty\"\000\022I\n\016ConfirmByEmai"
  "l\022\035.palm.fig.v1.UserQueryRequest\032\026.googl"
  "e.protobuf.Empty\"\000\022I\n\016ConfirmByToken\022\035.p"
  "alm.fig.v1.UserTokenRequest\032\026.google.pro"
  "tobuf.Empty\"\000\022H\n\rUnlockByEmail\022\035.palm.fi"
  "g.v1.UserQueryRequest\032\026.google.protobuf."
  "Empty\"\000\022H\n\rUnlockByToken\022\035.palm.fig.v1.U"
  "serTokenRequest\032\026.google.protobuf.Empty\""
  "\000\022I\n\016ForgotPassword\022\035.palm.fig.v1.UserQu"
  "eryRequest\032\026.google.protobuf.Empty\"\000\022P\n\r"
  "ResetPassword\022%.palm.fig.v1.UserResetPas"
  "swordRequest\032\026.google.protobuf.Empty\"\000\022G"
  "\n\007Refresh\022\031.google.protobuf.Duration\032\037.p"
  "alm.fig.v1.UserSignInResponse\"\000\022E\n\004Logs\022"
  "\034.palm.fig.v1.UserLogsRequest\032\035.palm.fig"
  ".v1.UserLogsResponse\"\000\022@\n\nSetProfile\022\030.p"
  "alm.fig.v1.UserProfile\032\026.google.protobuf"
  ".Empty\"\000\022@\n\nGetProfile\022\026.google.protobuf"
  ".Empty\032\030.palm.fig.v1.UserProfile\"\000\022R\n\016Ch"
  "angePassword\022&.palm.fig.v1.UserChangePas"
  "swordRequest\032\026.google.protobuf.Empty\"\000\022;"
  "\n\007SignOut\022\026.google.protobuf.Empty\032\026.goog"
  "le.protobuf.Empty\"\000\022A\n\005Index\022\026.google.pr"
  "otobuf.Empty\032\036.palm.fig.v1.UserIndexResp"
  "onse\"\000\022L\n\004Show\022\035.palm.fig.v1.UserQueryRe"
  "quest\032#.palm.fig.v1.UserIndexResponse.It"
  "em\"\000\022B\n\007Disable\022\035.palm.fig.v1.UserQueryR"
  "equest\032\026.google.protobuf.Empty\"\000\022A\n\006Enab"
  "le\022\035.palm.fig.v1.UserQueryRequest\032\026.goog"
  "le.protobuf.Empty\"\000\022\?\n\004Lock\022\035.palm.fig.v"
  "1.UserQueryRequest\032\026.google.protobuf.Emp"
  "ty\"\000\022A\n\006Unlock\022\035.palm.fig.v1.UserQueryRe"
  "quest\032\026.google.protobuf.Empty\"\000\022B\n\007Confi"
  "rm\022\035.palm.fig.v1.UserQueryRequest\032\026.goog"
  "le.protobuf.Empty\"\000\022A\n\006Delete\022\035.palm.fig"
  ".v1.UserQueryRequest\032\026.google.protobuf.E"
  "mpty\"\000\022L\n\013SetPassword\022#.palm.fig.v1.User"
  "SetPasswordRequest\032\026.google.protobuf.Emp"
  "ty\"\0002\347\002\n\007Setting\022\?\n\003Set\022\036.palm.fig.v1.Se"
  "ttingSetRequest\032\026.google.protobuf.Empty\""
  "\000\022K\n\003Get\022\036.palm.fig.v1.SettingGetRequest"
  "\032\".palm.fig.v1.SettingsResponse.Item\"\000\022L"
  "\n\006ByUser\022!.palm.fig.v1.SettingByUserRequ"
  "est\032\035.palm.fig.v1.SettingsResponse\"\000\022=\n\002"
  "My\022\026.google.protobuf.Empty\032\035.palm.fig.v1"
  ".SettingsResponse\"\000\022A\n\006Global\022\026.google.p"
  "rotobuf.Empty\032\035.palm.fig.v1.SettingsResp"
  "onse\"\0002\337\001\n\006Locale\022>\n\003Set\022\035.palm.fig.v1.L"
  "ocaleSetRequest\032\026.google.protobuf.Empty\""
  "\000\022I\n\003Get\022\035.palm.fig.v1.LocaleGetRequest\032"
  "!.palm.fig.v1.LocalesResponse.Item\"\000\022J\n\006"
  "ByLang\022 .palm.fig.v1.LocaleByLangRequest"
  "\032\034.palm.fig.v1.LocalesResponse\"\0002\363\r\n\004Sit"
  "e\022W\n\022SetMaintenanceMode\022\'.palm.fig.v1.Si"
  "teMaintenanceModeRequest\032\026.google.protob"
  "uf.Empty\"\000\022D\n\007Install\022\037.palm.fig.v1.Site"
  "InstallRequest\032\026.google.protobuf.Empty\"\000"
  "\022>\n\nClearCache\022\026.google.protobuf.Empty\032\026"
  ".google.protobuf.Empty\"\000\022C\n\006Layout\022\026.goo"
  "gle.protobuf.Empty\032\037.palm.fig.v1.SiteLay"
  "outResponse\"\000\022M\n\tSetAuthor\022&.palm.fig.v1"
  ".SiteLayoutResponse.Author\032\026.google.prot"
  "obuf.Empty\"\000\022N\n\014SetCopyright\022$.palm.fig."
  "v1.SiteSetCopyrightRequest\032\026.google.prot"
  "obuf.Empty\"\000\022L\n\013SetKeywords\022#.palm.fig.v"
  "1.SiteSetKeywordsRequest\032\026.google.protob"
  "uf.Empty\"\000\022D\n\007SetInfo\022\037.palm.fig.v1.Site"
  "SetInfoRequest\032\026.google.protobuf.Empty\"\000"
  "\022D\n\007SetLogo\022\037.palm.fig.v1.SiteSetLogoReq"
  "uest\032\026.google.protobuf.Empty\"\000\022A\n\tSetTwi"
  "lio\022\032.palm.fig.v1.TwilioProfile\032\026.google"
  ".protobuf.Empty\"\000\022A\n\tGetTwilio\022\026.google."
  "protobuf.Empty\032\032.palm.fig.v1.TwilioProfi"
  "le\"\000\022J\n\nPingTwilio\022\".palm.fig.v1.SiteTwi"
  "lioPingRequest\032\026.google.protobuf.Empty\"\000"
  "\022=\n\007SetSmtp\022\030.palm.fig.v1.SmtpProfile\032\026."
  "google.protobuf.Empty\"\000\022=\n\007GetSmtp\022\026.goo"
  "gle.protobuf.Empty\032\030.palm.fig.v1.SmtpPro"
  "file\"\000\022F\n\010PingSmtp\022 .palm.fig.v1.SiteSmt"
  "pPingRequest\032\026.google.protobuf.Empty\"\000\022E"
  "\n\013SetIndexNow\022\034.palm.fig.v1.IndexNowProf"
  "ile\032\026.google.protobuf.Empty\"\000\022E\n\013GetInde"
  "xNow\022\026.google.protobuf.Empty\032\034.palm.fig."
  "v1.IndexNowProfile\"\000\022J\n\014PingIndexNow\022 .p"
  "alm.fig.v1.IndexNowPingRequest\032\026.google."
  "protobuf.Empty\"\000\022A\n\tSetGoogle\022\032.palm.fig"
  ".v1.GoogleProfile\032\026.google.protobuf.Empt"
  "y\"\000\022A\n\tGetGoogle\022\026.google.protobuf.Empty"
  "\032\032.palm.fig.v1.GoogleProfile\"\000\022G\n\nPingGo"
  "ogle\022\037.palm.fig.v1.SitemapPingRequest\032\026."
  "google.protobuf.Empty\"\000\022\?\n\010SetBaidu\022\031.pa"
  "lm.fig.v1.BaiduProfile\032\026.google.protobuf"
  ".Empty\"\000\022\?\n\010GetBaidu\022\026.google.protobuf.E"
  "mpty\032\031.palm.fig.v1.BaiduProfile\"\000\022F\n\tPin"
  "gBaidu\022\037.palm.fig.v1.SitemapPingRequest\032"
  "\026.google.protobuf.Empty\"\000\022C\n\006Status\022\026.go"
  "ogle.protobuf.Empty\032\037.palm.fig.v1.SiteSt"
  "atusResponse\"\0002\246\002\n\013ShorterLink\022I\n\006Create"
  "\022%.palm.fig.v1.ShorterLinkCreateRequest\032"
  "\026.google.protobuf.Empty\"\000\022I\n\006Update\022%.pa"
  "lm.fig.v1.ShorterLinkUpdateRequest\032\026.goo"
  "gle.protobuf.Empty\"\000\022;\n\007Destroy\022\026.palm.f"
  "ig.v1.IdRequest\032\026.google.protobuf.Empty\""
  "\000\022D\n\005Index\022\022.palm.fig.v1.Pager\032%.palm.fi"
  "g.v1.ShorterLinkIndexResponse\"\0002\212\002\n\003Tag\022"
  "A\n\006Create\022\035.palm.fig.v1.TagCreateRequest"
  "\032\026.google.protobuf.Empty\"\000\022A\n\006Update\022\035.p"
  "alm.fig.v1.TagUpdateRequest\032\026.google.pro"
  "tobuf.Empty\"\000\022;\n\007Destroy\022\026.palm.fig.v1.I"
  "dRequest\032\026.google.protobuf.Empty\"\000\022@\n\005In"
  "dex\022\026.google.protobuf.Empty\032\035.palm.fig.v"
  "1.TagIndexResponse\"\0002\236\002\n\010Category\022F\n\006Cre"
  "ate\022\".palm.fig.v1.CategoryCreateRequest\032"
  "\026.google.protobuf.Empty\"\000\022F\n\006Update\022\".pa"
  "lm.fig.v1.CategoryUpdateRequest\032\026.google"
  ".protobuf.Empty\"\000\022;\n\007Destroy\022\026.palm.fig."
  "v1.IdRequest\032\026.google.protobuf.Empty\"\000\022E"
  "\n\005Index\022\026.google.protobuf.Empty\032\".palm.f"
  "ig.v1.CategoryIndexResponse\"\0002\371\002\n\014Notifi"
  "cation\022J\n\006Create\022&.palm.fig.v1.Notificat"
  "ionCreateRequest\032\026.google.protobuf.Empty"
  "\"\000\022J\n\006Update\022&.palm.fig.v1.NotificationU"
  "pdateRequest\032\026.google.protobuf.Empty\"\000\022E"
  "\n\005Index\022\022.palm.fig.v1.Pager\032&.palm.fig.v"
  "1.NotificationIndexResponse\"\000\022M\n\004Show\022\026."
  "palm.fig.v1.IdRequest\032+.palm.fig.v1.Noti"
  "ficationIndexResponse.Item\"\000\022;\n\007Destory\022"
  "\026.palm.fig.v1.IdRequest\032\026.google.protobu"
  "f.Empty\"\0002\341\001\n\nAttachment\022C\n\005Index\022\022.palm"
  ".fig.v1.Pager\032$.palm.fig.v1.AttachmentIn"
  "dexResponse\"\000\022;\n\007Destroy\022\026.palm.fig.v1.I"
  "dRequest\032\026.google.protobuf.Empty\"\000\022Q\n\004Sh"
  "ow\022\".palm.fig.v1.AttachmentShowRequest\032#"
  ".palm.fig.v1.AttachmentShowResponse\"\0002\227\002"
  "\n\tLeaveWord\022=\n\006Create\022\031.palm.fig.v1.Medi"
  "aContent\032\026.google.protobuf.Empty\"\000\022B\n\005In"
  "dex\022\022.palm.fig.v1.Pager\032#.palm.fig.v1.Le"
  "aveWordIndexResponse\"\000\022J\n\004Show\022\026.palm.fi"
  "g.v1.IdRequest\032(.palm.fig.v1.LeaveWordIn"
  "dexResponse.Item\"\000\022;\n\007Destroy\022\026.palm.fig"
  ".v1.IdRequest\032\026.google.protobuf.Empty\"\0002"
  "\263\001\n\006Google\022X\n\tSignInUrl\022#.palm.fig.v1.Go"
  "ogleSignInUrlRequest\032$.palm.fig.v1.Googl"
  "eSignInUrlResponse\"\000\022O\n\006SignIn\022\".palm.fi"
  "g.v1.SignInByGoogleRequest\032\037.palm.fig.v1"
  ".UserSignInResponse\"\0002\301\014\n\006Wechat\022[\n\021Oaut"
  "h2SignInState\022\026.google.protobuf.Empty\032,."
  "palm.fig.v1.WechatOauth2SignInStateRespo"
  "nse\"\000\022m\n\017Oauth2SignInUrl\022).palm.fig.v1.W"
  "echatOauth2SignInUrlRequest\032-.palm.orchi"
  "d.v1.WechatOauth2QrConnectResponse\"\000\022]\n\016"
  "SignInByOauth2\022(.palm.fig.v1.SignInByWec"
  "hatOauth2Request\032\037.palm.fig.v1.UserSignI"
  "nResponse\"\000\022S\n\rAllOauth2User\022\026.google.pr"
  "otobuf.Empty\032(.palm.fig.v1.WechatAllOaut"
  "h2UserResponse\"\000\022E\n\021DestroyOauth2User\022\026."
  "palm.fig.v1.IdRequest\032\026.google.protobuf."
  "Empty\"\000\022V\n\022BindOauth2UserById\022&.palm.fig"
  ".v1.WechatUserBindByIdRequest\032\026.google.p"
  "rotobuf.Empty\"\000\022`\n\027BindOauth2UserByAccou"
  "nt\022+.palm.fig.v1.WechatUserBindByAccount"
  "Request\032\026.google.protobuf.Empty\"\000\022\\\n\021Get"
  "Oauth2UserById\022\026.palm.fig.v1.IdRequest\032-"
  ".palm.fig.v1.WechatAllOauth2UserResponse"
  ".Item\"\000\022u\n\025GetOauth2UserByOpenId\022+.palm."
  "fig.v1.WechatUserQueryByOpenIdRequest\032-."
  "palm.fig.v1.WechatAllOauth2UserResponse."
  "Item\"\000\022r\n\026GetOauth2UserByUnionId\022,.palm."
  "fig.v1.WechatUserQueryByUnionIdRequest\032("
  ".palm.fig.v1.WechatAllOauth2UserResponse"
  "\"\000\022]\n\022AllMiniProgramUser\022\026.google.protob"
  "uf.Empty\032-.palm.fig.v1.WechatAllMiniProg"
  "ramUserResponse\"\000\022J\n\026DestroyMiniProgramU"
  "ser\022\026.palm.fig.v1.IdRequest\032\026.google.pro"
  "tobuf.Empty\"\000\022[\n\027BindMiniProgramUserById"
  "\022&.palm.fig.v1.WechatUserBindByIdRequest"
  "\032\026.google.protobuf.Empty\"\000\022f\n\026GetMiniPro"
  "gramUserById\022\026.palm.fig.v1.IdRequest\0322.p"
  "alm.fig.v1.WechatAllMiniProgramUserRespo"
  "nse.Item\"\000\022\177\n\032GetMiniProgramUserByOpenId"
  "\022+.palm.fig.v1.WechatUserQueryByOpenIdRe"
  "quest\0322.palm.fig.v1.WechatAllMiniProgram"
  "UserResponse.Item\"\000\022|\n\033GetMiniProgramUse"
  "rByUnionId\022,.palm.fig.v1.WechatUserQuery"
  "ByUnionIdRequest\032-.palm.fig.v1.WechatAll"
  "MiniProgramUserResponse\"\000BP\n)com.github."
  "saturn_xiv.palm.plugins.fig.v1P\001Z!github"
  ".com/saturn_xiv/palm/fig/v2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_fig_2eproto_deps[5] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_metasequoia_2eproto,
  &::descriptor_table_orchid_2eproto,
};
static ::_pbi::once_flag descriptor_table_fig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_fig_2eproto = {
    false, false, 18515, descriptor_table_protodef_fig_2eproto,
    "fig.proto",
    &descriptor_table_fig_2eproto_once, descriptor_table_fig_2eproto_deps, 5, 102,
    schemas, file_default_instances, TableStruct_fig_2eproto::offsets,
    file_level_metadata_fig_2eproto, file_level_enum_descriptors_fig_2eproto,
    file_level_service_descriptors_fig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_fig_2eproto_getter() {
  return &descriptor_table_fig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_fig_2eproto(&descriptor_table_fig_2eproto);
namespace palm {
namespace fig {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaContent_Editor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fig_2eproto);
  return file_level_enum_descriptors_fig_2eproto[0];
}
bool MediaContent_Editor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MediaContent_Editor MediaContent::TEXTAREA;
constexpr MediaContent_Editor MediaContent::QUILL;
constexpr MediaContent_Editor MediaContent::Editor_MIN;
constexpr MediaContent_Editor MediaContent::Editor_MAX;
constexpr int MediaContent::Editor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaContent_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fig_2eproto);
  return file_level_enum_descriptors_fig_2eproto[1];
}
bool MediaContent_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MediaContent_Status MediaContent::Published;
constexpr MediaContent_Status MediaContent::Draft;
constexpr MediaContent_Status MediaContent::Pending;
constexpr MediaContent_Status MediaContent::Private;
constexpr MediaContent_Status MediaContent::Future;
constexpr MediaContent_Status MediaContent::Trash;
constexpr MediaContent_Status MediaContent::Status_MIN;
constexpr MediaContent_Status MediaContent::Status_MAX;
constexpr int MediaContent::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserLogsResponse_Item_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fig_2eproto);
  return file_level_enum_descriptors_fig_2eproto[2];
}
bool UserLogsResponse_Item_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::DEBUG;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::INFO;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::WARNING;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::ERROR;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::Level_MIN;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::Level_MAX;
constexpr int UserLogsResponse_Item::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserSignInResponse_By_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fig_2eproto);
  return file_level_enum_descriptors_fig_2eproto[3];
}
bool UserSignInResponse_By_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 11:
    case 12:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr UserSignInResponse_By UserSignInResponse::Nickname;
constexpr UserSignInResponse_By UserSignInResponse::Email;
constexpr UserSignInResponse_By UserSignInResponse::Phone;
constexpr UserSignInResponse_By UserSignInResponse::WechatOauth2;
constexpr UserSignInResponse_By UserSignInResponse::WechatMiniProgram;
constexpr UserSignInResponse_By UserSignInResponse::Facebook;
constexpr UserSignInResponse_By UserSignInResponse::Google;
constexpr UserSignInResponse_By UserSignInResponse::By_MIN;
constexpr UserSignInResponse_By UserSignInResponse::By_MAX;
constexpr int UserSignInResponse::By_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SmtpProfile_AuthMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fig_2eproto);
  return file_level_enum_descriptors_fig_2eproto[4];
}
bool SmtpProfile_AuthMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SmtpProfile_AuthMethod SmtpProfile::None;
constexpr SmtpProfile_AuthMethod SmtpProfile::Login;
constexpr SmtpProfile_AuthMethod SmtpProfile::StartTls;
constexpr SmtpProfile_AuthMethod SmtpProfile::AuthMethod_MIN;
constexpr SmtpProfile_AuthMethod SmtpProfile::AuthMethod_MAX;
constexpr int SmtpProfile::AuthMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotificationIndexResponse_Item_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fig_2eproto);
  return file_level_enum_descriptors_fig_2eproto[5];
}
bool NotificationIndexResponse_Item_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NotificationIndexResponse_Item_Level NotificationIndexResponse_Item::NOTE;
constexpr NotificationIndexResponse_Item_Level NotificationIndexResponse_Item::INFO;
constexpr NotificationIndexResponse_Item_Level NotificationIndexResponse_Item::Level_MIN;
constexpr NotificationIndexResponse_Item_Level NotificationIndexResponse_Item::Level_MAX;
constexpr int NotificationIndexResponse_Item::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class IdRequest::_Internal {
 public:
};

IdRequest::IdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.IdRequest)
}
IdRequest::IdRequest(const IdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.IdRequest)
}

inline void IdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IdRequest::~IdRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.IdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.IdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.IdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.IdRequest)
  return target;
}

size_t IdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.IdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdRequest::GetClassData() const { return &_class_data_; }


void IdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdRequest*>(&to_msg);
  auto& from = static_cast<const IdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.IdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdRequest::CopyFrom(const IdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.IdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdRequest::IsInitialized() const {
  return true;
}

void IdRequest::InternalSwap(IdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[0]);
}

// ===================================================================

class Pager::_Internal {
 public:
};

Pager::Pager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.Pager)
}
Pager::Pager(const Pager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pager* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.Pager)
}

inline void Pager::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){int64_t{0}}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pager::~Pager() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.Pager)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pager::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pager::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pager::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.Pager)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pager::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pager::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.Pager)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_page(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.Pager)
  return target;
}

size_t Pager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.Pager)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_page());
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pager::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pager::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pager::GetClassData() const { return &_class_data_; }


void Pager::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pager*>(&to_msg);
  auto& from = static_cast<const Pager&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.Pager)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pager::CopyFrom(const Pager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.Pager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pager::IsInitialized() const {
  return true;
}

void Pager::InternalSwap(Pager* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pager, _impl_.size_)
      + sizeof(Pager::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(Pager, _impl_.page_)>(
          reinterpret_cast<char*>(&_impl_.page_),
          reinterpret_cast<char*>(&other->_impl_.page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pager::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[1]);
}

// ===================================================================

class Pagination::_Internal {
 public:
};

Pagination::Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.Pagination)
}
Pagination::Pagination(const Pagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pagination* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.total_){}
    , decltype(_impl_.has_next_){}
    , decltype(_impl_.has_previous_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_previous_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.has_previous_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.Pagination)
}

inline void Pagination::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){int64_t{0}}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.total_){int64_t{0}}
    , decltype(_impl_.has_next_){false}
    , decltype(_impl_.has_previous_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.Pagination)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pagination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pagination::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.Pagination)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_previous_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.has_previous_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pagination::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_next = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.has_next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_previous = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.has_previous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pagination::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.Pagination)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_page(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // int64 total = 3;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_total(), target);
  }

  // bool has_next = 11;
  if (this->_internal_has_next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_has_next(), target);
  }

  // bool has_previous = 12;
  if (this->_internal_has_previous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_has_previous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.Pagination)
  return target;
}

size_t Pagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.Pagination)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_page());
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 total = 3;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total());
  }

  // bool has_next = 11;
  if (this->_internal_has_next() != 0) {
    total_size += 1 + 1;
  }

  // bool has_previous = 12;
  if (this->_internal_has_previous() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pagination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pagination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pagination::GetClassData() const { return &_class_data_; }


void Pagination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pagination*>(&to_msg);
  auto& from = static_cast<const Pagination&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.Pagination)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  if (from._internal_has_next() != 0) {
    _this->_internal_set_has_next(from._internal_has_next());
  }
  if (from._internal_has_previous() != 0) {
    _this->_internal_set_has_previous(from._internal_has_previous());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  return true;
}

void Pagination::InternalSwap(Pagination* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pagination, _impl_.has_previous_)
      + sizeof(Pagination::_impl_.has_previous_)
      - PROTOBUF_FIELD_OFFSET(Pagination, _impl_.page_)>(
          reinterpret_cast<char*>(&_impl_.page_),
          reinterpret_cast<char*>(&other->_impl_.page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pagination::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[2]);
}

// ===================================================================

class MediaContent::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaContent>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& published_at(const MediaContent* msg);
  static void set_has_published_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MediaContent::_Internal::published_at(const MediaContent* msg) {
  return *msg->_impl_.published_at_;
}
void MediaContent::clear_published_at() {
  if (_impl_.published_at_ != nullptr) _impl_.published_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MediaContent::MediaContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.MediaContent)
}
MediaContent::MediaContent(const MediaContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaContent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_){}
    , decltype(_impl_.published_at_){nullptr}
    , decltype(_impl_.editor_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_published_at()) {
    _this->_impl_.published_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.published_at_);
  }
  ::memcpy(&_impl_.editor_, &from._impl_.editor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.editor_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.MediaContent)
}

inline void MediaContent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_){}
    , decltype(_impl_.published_at_){nullptr}
    , decltype(_impl_.editor_){0}
    , decltype(_impl_.status_){0}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MediaContent::~MediaContent() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.MediaContent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_.Destroy();
  if (this != internal_default_instance()) delete _impl_.published_at_;
}

void MediaContent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaContent::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.MediaContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.published_at_ != nullptr);
    _impl_.published_at_->Clear();
  }
  ::memset(&_impl_.editor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.editor_)) + sizeof(_impl_.status_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaContent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.fig.v1.MediaContent.Editor editor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_editor(static_cast<::palm::fig::v1::MediaContent_Editor>(val));
        } else
          goto handle_unusual;
        continue;
      // string body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.MediaContent.body"));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.MediaContent.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::palm::fig::v1::MediaContent_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp published_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_published_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.MediaContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.fig.v1.MediaContent.Editor editor = 1;
  if (this->_internal_editor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_editor(), target);
  }

  // string body = 2;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.MediaContent.body");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body(), target);
  }

  // .palm.fig.v1.MediaContent.Status status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // optional .google.protobuf.Timestamp published_at = 11;
  if (_internal_has_published_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::published_at(this),
        _Internal::published_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.MediaContent)
  return target;
}

size_t MediaContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.MediaContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string body = 2;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // optional .google.protobuf.Timestamp published_at = 11;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.published_at_);
  }

  // .palm.fig.v1.MediaContent.Editor editor = 1;
  if (this->_internal_editor() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_editor());
  }

  // .palm.fig.v1.MediaContent.Status status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaContent::GetClassData() const { return &_class_data_; }


void MediaContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaContent*>(&to_msg);
  auto& from = static_cast<const MediaContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.MediaContent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (from._internal_has_published_at()) {
    _this->_internal_mutable_published_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_published_at());
  }
  if (from._internal_editor() != 0) {
    _this->_internal_set_editor(from._internal_editor());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaContent::CopyFrom(const MediaContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.MediaContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaContent::IsInitialized() const {
  return true;
}

void MediaContent::InternalSwap(MediaContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaContent, _impl_.status_)
      + sizeof(MediaContent::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(MediaContent, _impl_.published_at_)>(
          reinterpret_cast<char*>(&_impl_.published_at_),
          reinterpret_cast<char*>(&other->_impl_.published_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[3]);
}

// ===================================================================

class UserDetail::_Internal {
 public:
};

UserDetail::UserDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserDetail)
}
UserDetail::UserDetail(const UserDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.real_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_real_name().empty()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserDetail)
}

inline void UserDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.real_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserDetail::~UserDetail() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
  _impl_.real_name_.Destroy();
}

void UserDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _impl_.real_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserDetail.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string real_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserDetail.real_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserDetail.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  // string real_name = 2;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserDetail.real_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_real_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserDetail)
  return target;
}

size_t UserDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string real_name = 2;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserDetail::GetClassData() const { return &_class_data_; }


void UserDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserDetail*>(&to_msg);
  auto& from = static_cast<const UserDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_real_name().empty()) {
    _this->_internal_set_real_name(from._internal_real_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserDetail::CopyFrom(const UserDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDetail::IsInitialized() const {
  return true;
}

void UserDetail::InternalSwap(UserDetail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[4]);
}

// ===================================================================

class Oauth2State::_Internal {
 public:
  using HasBits = decltype(std::declval<Oauth2State>()._impl_._has_bits_);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Oauth2State::Oauth2State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.Oauth2State)
}
Oauth2State::Oauth2State(const Oauth2State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Oauth2State* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.goto__){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.goto__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.goto__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_goto_().empty()) {
    _this->_impl_.goto__.Set(from._internal_goto_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.Oauth2State)
}

inline void Oauth2State::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.goto__){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.id_){}
  };
  _impl_.goto__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.goto__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Oauth2State::~Oauth2State() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.Oauth2State)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Oauth2State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.goto__.Destroy();
  _impl_.host_.Destroy();
  _impl_.user_.Destroy();
  _impl_.id_.Destroy();
}

void Oauth2State::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Oauth2State::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.Oauth2State)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.goto__.ClearToEmpty();
  _impl_.host_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.user_.ClearNonDefaultToEmpty();
  }
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Oauth2State::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string goto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_goto_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.Oauth2State.goto"));
        } else
          goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.Oauth2State.host"));
        } else
          goto handle_unusual;
        continue;
      // optional string user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.Oauth2State.user"));
        } else
          goto handle_unusual;
        continue;
      // string id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.Oauth2State.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Oauth2State::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.Oauth2State)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string goto = 1;
  if (!this->_internal_goto_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goto_().data(), static_cast<int>(this->_internal_goto_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.Oauth2State.goto");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_goto_(), target);
  }

  // string host = 2;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.Oauth2State.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // optional string user = 3;
  if (_internal_has_user()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.Oauth2State.user");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user(), target);
  }

  // string id = 9;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.Oauth2State.id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.Oauth2State)
  return target;
}

size_t Oauth2State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.Oauth2State)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string goto = 1;
  if (!this->_internal_goto_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goto_());
  }

  // string host = 2;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // optional string user = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string id = 9;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Oauth2State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Oauth2State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Oauth2State::GetClassData() const { return &_class_data_; }


void Oauth2State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Oauth2State*>(&to_msg);
  auto& from = static_cast<const Oauth2State&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.Oauth2State)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_goto_().empty()) {
    _this->_internal_set_goto_(from._internal_goto_());
  }
  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_has_user()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Oauth2State::CopyFrom(const Oauth2State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.Oauth2State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Oauth2State::IsInitialized() const {
  return true;
}

void Oauth2State::InternalSwap(Oauth2State* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.goto__, lhs_arena,
      &other->_impl_.goto__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Oauth2State::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[5]);
}

// ===================================================================

UserProfile_PayloadEntry_DoNotUse::UserProfile_PayloadEntry_DoNotUse() {}
UserProfile_PayloadEntry_DoNotUse::UserProfile_PayloadEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UserProfile_PayloadEntry_DoNotUse::MergeFrom(const UserProfile_PayloadEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UserProfile_PayloadEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[6]);
}

// ===================================================================

class UserProfile::_Internal {
 public:
};

UserProfile::UserProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &UserProfile::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserProfile)
}
UserProfile::UserProfile(const UserProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.payload_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.payload_.MergeFrom(from._impl_.payload_);
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserProfile)
}

inline void UserProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.payload_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserProfile::~UserProfile() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void UserProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destruct();
  _impl_.payload_.~MapField();
}

void UserProfile::ArenaDtor(void* object) {
  UserProfile* _this = reinterpret_cast< UserProfile* >(object);
  _this->_impl_.payload_.Destruct();
}
void UserProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.payload_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> payload = 1;
  if (!this->_internal_payload().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = UserProfile_PayloadEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_payload();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "palm.fig.v1.UserProfile.PayloadEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "palm.fig.v1.UserProfile.PayloadEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserProfile)
  return target;
}

size_t UserProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> payload = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_payload_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_payload().begin();
      it != this->_internal_payload().end(); ++it) {
    total_size += UserProfile_PayloadEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserProfile::GetClassData() const { return &_class_data_; }


void UserProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserProfile*>(&to_msg);
  auto& from = static_cast<const UserProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.payload_.MergeFrom(from._impl_.payload_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserProfile::CopyFrom(const UserProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserProfile::IsInitialized() const {
  return true;
}

void UserProfile::InternalSwap(UserProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.payload_.InternalSwap(&other->_impl_.payload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[7]);
}

// ===================================================================

class UserIndexResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<UserIndexResponse_Item>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& confirmed_at(const UserIndexResponse_Item* msg);
  static void set_has_confirmed_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& locked_at(const UserIndexResponse_Item* msg);
  static void set_has_locked_at(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const UserIndexResponse_Item* msg);
  static void set_has_deleted_at(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::confirmed_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.confirmed_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::locked_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.locked_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::deleted_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.deleted_at_;
}
void UserIndexResponse_Item::clear_confirmed_at() {
  if (_impl_.confirmed_at_ != nullptr) _impl_.confirmed_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void UserIndexResponse_Item::clear_locked_at() {
  if (_impl_.locked_at_ != nullptr) _impl_.locked_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void UserIndexResponse_Item::clear_deleted_at() {
  if (_impl_.deleted_at_ != nullptr) _impl_.deleted_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
UserIndexResponse_Item::UserIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserIndexResponse.Item)
}
UserIndexResponse_Item::UserIndexResponse_Item(const UserIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.locale_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.confirmed_at_){nullptr}
    , decltype(_impl_.locked_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.by_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_real_name().empty()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_locale().empty()) {
    _this->_impl_.locale_.Set(from._internal_locale(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timezone().empty()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_confirmed_at()) {
    _this->_impl_.confirmed_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.confirmed_at_);
  }
  if (from._internal_has_locked_at()) {
    _this->_impl_.locked_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.locked_at_);
  }
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_at_);
  }
  _this->_impl_.by_ = from._impl_.by_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserIndexResponse.Item)
}

inline void UserIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.locale_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.confirmed_at_){nullptr}
    , decltype(_impl_.locked_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.by_){0}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserIndexResponse_Item::~UserIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
  _impl_.real_name_.Destroy();
  _impl_.email_.Destroy();
  _impl_.locale_.Destroy();
  _impl_.timezone_.Destroy();
  if (this != internal_default_instance()) delete _impl_.confirmed_at_;
  if (this != internal_default_instance()) delete _impl_.locked_at_;
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
}

void UserIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _impl_.real_name_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.locale_.ClearToEmpty();
  _impl_.timezone_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.confirmed_at_ != nullptr);
      _impl_.confirmed_at_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.locked_at_ != nullptr);
      _impl_.locked_at_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.deleted_at_ != nullptr);
      _impl_.deleted_at_->Clear();
    }
  }
  _impl_.by_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserIndexResponse.Item.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string real_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserIndexResponse.Item.real_name"));
        } else
          goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserIndexResponse.Item.email"));
        } else
          goto handle_unusual;
        continue;
      // string locale = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserIndexResponse.Item.locale"));
        } else
          goto handle_unusual;
        continue;
      // string timezone = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserIndexResponse.Item.timezone"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp confirmed_at = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirmed_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp locked_at = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_locked_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp deleted_at = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.UserSignInResponse.By by = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_by(static_cast<::palm::fig::v1::UserSignInResponse_By>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserIndexResponse.Item.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  // string real_name = 2;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserIndexResponse.Item.real_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_real_name(), target);
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserIndexResponse.Item.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // string locale = 18;
  if (!this->_internal_locale().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserIndexResponse.Item.locale");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_locale(), target);
  }

  // string timezone = 19;
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserIndexResponse.Item.timezone");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_timezone(), target);
  }

  // optional .google.protobuf.Timestamp confirmed_at = 91;
  if (_internal_has_confirmed_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(91, _Internal::confirmed_at(this),
        _Internal::confirmed_at(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp locked_at = 92;
  if (_internal_has_locked_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(92, _Internal::locked_at(this),
        _Internal::locked_at(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp deleted_at = 93;
  if (_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(93, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.UserSignInResponse.By by = 99;
  if (this->_internal_by() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      99, this->_internal_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserIndexResponse.Item)
  return target;
}

size_t UserIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string real_name = 2;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string locale = 18;
  if (!this->_internal_locale().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // string timezone = 19;
  if (!this->_internal_timezone().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .google.protobuf.Timestamp confirmed_at = 91;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.confirmed_at_);
    }

    // optional .google.protobuf.Timestamp locked_at = 92;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.locked_at_);
    }

    // optional .google.protobuf.Timestamp deleted_at = 93;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deleted_at_);
    }

  }
  // .palm.fig.v1.UserSignInResponse.By by = 99;
  if (this->_internal_by() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserIndexResponse_Item::GetClassData() const { return &_class_data_; }


void UserIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const UserIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_real_name().empty()) {
    _this->_internal_set_real_name(from._internal_real_name());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_locale().empty()) {
    _this->_internal_set_locale(from._internal_locale());
  }
  if (!from._internal_timezone().empty()) {
    _this->_internal_set_timezone(from._internal_timezone());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_confirmed_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_confirmed_at());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_locked_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_locked_at());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_deleted_at());
    }
  }
  if (from._internal_by() != 0) {
    _this->_internal_set_by(from._internal_by());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserIndexResponse_Item::CopyFrom(const UserIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIndexResponse_Item::IsInitialized() const {
  return true;
}

void UserIndexResponse_Item::InternalSwap(UserIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.locale_, lhs_arena,
      &other->_impl_.locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserIndexResponse_Item, _impl_.by_)
      + sizeof(UserIndexResponse_Item::_impl_.by_)
      - PROTOBUF_FIELD_OFFSET(UserIndexResponse_Item, _impl_.confirmed_at_)>(
          reinterpret_cast<char*>(&_impl_.confirmed_at_),
          reinterpret_cast<char*>(&other->_impl_.confirmed_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[8]);
}

// ===================================================================

class UserIndexResponse::_Internal {
 public:
};

UserIndexResponse::UserIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserIndexResponse)
}
UserIndexResponse::UserIndexResponse(const UserIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserIndexResponse)
}

inline void UserIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserIndexResponse::~UserIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void UserIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.UserIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.UserIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserIndexResponse)
  return target;
}

size_t UserIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.UserIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserIndexResponse::GetClassData() const { return &_class_data_; }


void UserIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserIndexResponse*>(&to_msg);
  auto& from = static_cast<const UserIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserIndexResponse::CopyFrom(const UserIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIndexResponse::IsInitialized() const {
  return true;
}

void UserIndexResponse::InternalSwap(UserIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[9]);
}

// ===================================================================

class UserSetPasswordRequest::_Internal {
 public:
};

UserSetPasswordRequest::UserSetPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserSetPasswordRequest)
}
UserSetPasswordRequest::UserSetPasswordRequest(const UserSetPasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSetPasswordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserSetPasswordRequest)
}

inline void UserSetPasswordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserSetPasswordRequest::~UserSetPasswordRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserSetPasswordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSetPasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
}

void UserSetPasswordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSetPasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserSetPasswordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSetPasswordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSetPasswordRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSetPasswordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserSetPasswordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string password = 1;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSetPasswordRequest.password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserSetPasswordRequest)
  return target;
}

size_t UserSetPasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserSetPasswordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 1;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSetPasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSetPasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSetPasswordRequest::GetClassData() const { return &_class_data_; }


void UserSetPasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSetPasswordRequest*>(&to_msg);
  auto& from = static_cast<const UserSetPasswordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserSetPasswordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSetPasswordRequest::CopyFrom(const UserSetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserSetPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSetPasswordRequest::IsInitialized() const {
  return true;
}

void UserSetPasswordRequest::InternalSwap(UserSetPasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSetPasswordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[10]);
}

// ===================================================================

class UserChangePasswordRequest::_Internal {
 public:
};

UserChangePasswordRequest::UserChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserChangePasswordRequest)
}
UserChangePasswordRequest::UserChangePasswordRequest(const UserChangePasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserChangePasswordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.current_password_){}
    , decltype(_impl_.new_password_){}
    , decltype(_impl_.password_confirmation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.current_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_password().empty()) {
    _this->_impl_.current_password_.Set(from._internal_current_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_password().empty()) {
    _this->_impl_.new_password_.Set(from._internal_new_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_confirmation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_confirmation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password_confirmation().empty()) {
    _this->_impl_.password_confirmation_.Set(from._internal_password_confirmation(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserChangePasswordRequest)
}

inline void UserChangePasswordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.current_password_){}
    , decltype(_impl_.new_password_){}
    , decltype(_impl_.password_confirmation_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.current_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_confirmation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_confirmation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserChangePasswordRequest::~UserChangePasswordRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserChangePasswordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserChangePasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.current_password_.Destroy();
  _impl_.new_password_.Destroy();
  _impl_.password_confirmation_.Destroy();
}

void UserChangePasswordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserChangePasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserChangePasswordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.current_password_.ClearToEmpty();
  _impl_.new_password_.ClearToEmpty();
  _impl_.password_confirmation_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserChangePasswordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string current_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_current_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserChangePasswordRequest.current_password"));
        } else
          goto handle_unusual;
        continue;
      // string new_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserChangePasswordRequest.new_password"));
        } else
          goto handle_unusual;
        continue;
      // string password_confirmation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password_confirmation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserChangePasswordRequest.password_confirmation"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserChangePasswordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserChangePasswordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string current_password = 1;
  if (!this->_internal_current_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_password().data(), static_cast<int>(this->_internal_current_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserChangePasswordRequest.current_password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_current_password(), target);
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_password().data(), static_cast<int>(this->_internal_new_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserChangePasswordRequest.new_password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_password(), target);
  }

  // string password_confirmation = 3;
  if (!this->_internal_password_confirmation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password_confirmation().data(), static_cast<int>(this->_internal_password_confirmation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserChangePasswordRequest.password_confirmation");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password_confirmation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserChangePasswordRequest)
  return target;
}

size_t UserChangePasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserChangePasswordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string current_password = 1;
  if (!this->_internal_current_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_password());
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_password());
  }

  // string password_confirmation = 3;
  if (!this->_internal_password_confirmation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_confirmation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserChangePasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserChangePasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserChangePasswordRequest::GetClassData() const { return &_class_data_; }


void UserChangePasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserChangePasswordRequest*>(&to_msg);
  auto& from = static_cast<const UserChangePasswordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserChangePasswordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_current_password().empty()) {
    _this->_internal_set_current_password(from._internal_current_password());
  }
  if (!from._internal_new_password().empty()) {
    _this->_internal_set_new_password(from._internal_new_password());
  }
  if (!from._internal_password_confirmation().empty()) {
    _this->_internal_set_password_confirmation(from._internal_password_confirmation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserChangePasswordRequest::CopyFrom(const UserChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserChangePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChangePasswordRequest::IsInitialized() const {
  return true;
}

void UserChangePasswordRequest::InternalSwap(UserChangePasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_password_, lhs_arena,
      &other->_impl_.current_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_password_, lhs_arena,
      &other->_impl_.new_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_confirmation_, lhs_arena,
      &other->_impl_.password_confirmation_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserChangePasswordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[11]);
}

// ===================================================================

class UserLogsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UserLogsRequest>()._impl_._has_bits_);
  static void set_has_plugin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const UserLogsRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const UserLogsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserLogsRequest::_Internal::from(const UserLogsRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserLogsRequest::_Internal::to(const UserLogsRequest* msg) {
  return *msg->_impl_.to_;
}
void UserLogsRequest::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
void UserLogsRequest::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
UserLogsRequest::UserLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserLogsRequest)
}
UserLogsRequest::UserLogsRequest(const UserLogsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLogsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.plugin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plugin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_plugin()) {
    _this->_impl_.plugin_.Set(from._internal_plugin(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserLogsRequest)
}

inline void UserLogsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
  };
  _impl_.plugin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plugin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserLogsRequest::~UserLogsRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserLogsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLogsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.plugin_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void UserLogsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLogsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserLogsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.plugin_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLogsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string plugin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_plugin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserLogsRequest.plugin"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLogsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserLogsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string plugin = 1;
  if (_internal_has_plugin()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plugin().data(), static_cast<int>(this->_internal_plugin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserLogsRequest.plugin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_plugin(), target);
  }

  // .google.protobuf.Timestamp from = 2;
  if (this->_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp to = 3;
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserLogsRequest)
  return target;
}

size_t UserLogsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserLogsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string plugin = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plugin());
  }

  // .google.protobuf.Timestamp from = 2;
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_);
  }

  // .google.protobuf.Timestamp to = 3;
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLogsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLogsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLogsRequest::GetClassData() const { return &_class_data_; }


void UserLogsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLogsRequest*>(&to_msg);
  auto& from = static_cast<const UserLogsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserLogsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin()) {
    _this->_internal_set_plugin(from._internal_plugin());
  }
  if (from._internal_has_from()) {
    _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_from());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_to());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLogsRequest::CopyFrom(const UserLogsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserLogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogsRequest::IsInitialized() const {
  return true;
}

void UserLogsRequest::InternalSwap(UserLogsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plugin_, lhs_arena,
      &other->_impl_.plugin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserLogsRequest, _impl_.to_)
      + sizeof(UserLogsRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(UserLogsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLogsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[12]);
}

// ===================================================================

class UserLogsResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const UserLogsResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserLogsResponse_Item::_Internal::created_at(const UserLogsResponse_Item* msg) {
  return *msg->_impl_.created_at_;
}
void UserLogsResponse_Item::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
UserLogsResponse_Item::UserLogsResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserLogsResponse.Item)
}
UserLogsResponse_Item::UserLogsResponse_Item(const UserLogsResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLogsResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plugin_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.plugin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plugin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plugin().empty()) {
    _this->_impl_.plugin_.Set(from._internal_plugin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserLogsResponse.Item)
}

inline void UserLogsResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plugin_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.plugin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plugin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserLogsResponse_Item::~UserLogsResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserLogsResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLogsResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.plugin_.Destroy();
  _impl_.ip_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void UserLogsResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLogsResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserLogsResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.plugin_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLogsResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.UserLogsResponse.Item.Level level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::palm::fig::v1::UserLogsResponse_Item_Level>(val));
        } else
          goto handle_unusual;
        continue;
      // string plugin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_plugin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserLogsResponse.Item.plugin"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserLogsResponse.Item.ip"));
        } else
          goto handle_unusual;
        continue;
      // string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserLogsResponse.Item.message"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLogsResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserLogsResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .palm.fig.v1.UserLogsResponse.Item.Level level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_level(), target);
  }

  // string plugin = 3;
  if (!this->_internal_plugin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plugin().data(), static_cast<int>(this->_internal_plugin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserLogsResponse.Item.plugin");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_plugin(), target);
  }

  // string ip = 4;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserLogsResponse.Item.ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip(), target);
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserLogsResponse.Item.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserLogsResponse.Item)
  return target;
}

size_t UserLogsResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserLogsResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plugin = 3;
  if (!this->_internal_plugin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plugin());
  }

  // string ip = 4;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .palm.fig.v1.UserLogsResponse.Item.Level level = 2;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLogsResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLogsResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLogsResponse_Item::GetClassData() const { return &_class_data_; }


void UserLogsResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLogsResponse_Item*>(&to_msg);
  auto& from = static_cast<const UserLogsResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserLogsResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plugin().empty()) {
    _this->_internal_set_plugin(from._internal_plugin());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLogsResponse_Item::CopyFrom(const UserLogsResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserLogsResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogsResponse_Item::IsInitialized() const {
  return true;
}

void UserLogsResponse_Item::InternalSwap(UserLogsResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plugin_, lhs_arena,
      &other->_impl_.plugin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserLogsResponse_Item, _impl_.level_)
      + sizeof(UserLogsResponse_Item::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(UserLogsResponse_Item, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLogsResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[13]);
}

// ===================================================================

class UserLogsResponse::_Internal {
 public:
};

UserLogsResponse::UserLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserLogsResponse)
}
UserLogsResponse::UserLogsResponse(const UserLogsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLogsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserLogsResponse)
}

inline void UserLogsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserLogsResponse::~UserLogsResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserLogsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLogsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void UserLogsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLogsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserLogsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLogsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.UserLogsResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLogsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserLogsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.UserLogsResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserLogsResponse)
  return target;
}

size_t UserLogsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserLogsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.UserLogsResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLogsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLogsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLogsResponse::GetClassData() const { return &_class_data_; }


void UserLogsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLogsResponse*>(&to_msg);
  auto& from = static_cast<const UserLogsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserLogsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLogsResponse::CopyFrom(const UserLogsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserLogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogsResponse::IsInitialized() const {
  return true;
}

void UserLogsResponse::InternalSwap(UserLogsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLogsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[14]);
}

// ===================================================================

class UserResetPasswordRequest::_Internal {
 public:
};

UserResetPasswordRequest::UserResetPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserResetPasswordRequest)
}
UserResetPasswordRequest::UserResetPasswordRequest(const UserResetPasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserResetPasswordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserResetPasswordRequest)
}

inline void UserResetPasswordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserResetPasswordRequest::~UserResetPasswordRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserResetPasswordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserResetPasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.password_.Destroy();
}

void UserResetPasswordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserResetPasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserResetPasswordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserResetPasswordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserResetPasswordRequest.token"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserResetPasswordRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserResetPasswordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserResetPasswordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserResetPasswordRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserResetPasswordRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserResetPasswordRequest)
  return target;
}

size_t UserResetPasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserResetPasswordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserResetPasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserResetPasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserResetPasswordRequest::GetClassData() const { return &_class_data_; }


void UserResetPasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserResetPasswordRequest*>(&to_msg);
  auto& from = static_cast<const UserResetPasswordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserResetPasswordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserResetPasswordRequest::CopyFrom(const UserResetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserResetPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserResetPasswordRequest::IsInitialized() const {
  return true;
}

void UserResetPasswordRequest::InternalSwap(UserResetPasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserResetPasswordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[15]);
}

// ===================================================================

class UserTokenRequest::_Internal {
 public:
};

UserTokenRequest::UserTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserTokenRequest)
}
UserTokenRequest::UserTokenRequest(const UserTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserTokenRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserTokenRequest)
}

inline void UserTokenRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserTokenRequest::~UserTokenRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserTokenRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void UserTokenRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserTokenRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserTokenRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserTokenRequest.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserTokenRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserTokenRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserTokenRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserTokenRequest)
  return target;
}

size_t UserTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserTokenRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserTokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserTokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserTokenRequest::GetClassData() const { return &_class_data_; }


void UserTokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserTokenRequest*>(&to_msg);
  auto& from = static_cast<const UserTokenRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserTokenRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserTokenRequest::CopyFrom(const UserTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTokenRequest::IsInitialized() const {
  return true;
}

void UserTokenRequest::InternalSwap(UserTokenRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserTokenRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[16]);
}

// ===================================================================

class UserQueryRequest::_Internal {
 public:
};

UserQueryRequest::UserQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserQueryRequest)
}
UserQueryRequest::UserQueryRequest(const UserQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserQueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_by();
  switch (from.by_case()) {
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case kPhone: {
      _this->_internal_set_phone(from._internal_phone());
      break;
    }
    case kUid: {
      _this->_internal_set_uid(from._internal_uid());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserQueryRequest)
}

inline void UserQueryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_by();
}

UserQueryRequest::~UserQueryRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserQueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_by()) {
    clear_by();
  }
}

void UserQueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserQueryRequest::clear_by() {
// @@protoc_insertion_point(one_of_clear_start:palm.fig.v1.UserQueryRequest)
  switch (by_case()) {
    case kEmail: {
      _impl_.by_.email_.Destroy();
      break;
    }
    case kNickname: {
      _impl_.by_.nickname_.Destroy();
      break;
    }
    case kPhone: {
      _impl_.by_.phone_.Destroy();
      break;
    }
    case kUid: {
      _impl_.by_.uid_.Destroy();
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = BY_NOT_SET;
}


void UserQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserQueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_by();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserQueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserQueryRequest.email"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserQueryRequest.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string phone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_phone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserQueryRequest.phone"));
        } else
          goto handle_unusual;
        continue;
      // string uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserQueryRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserQueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserQueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (_internal_has_email()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserQueryRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string nickname = 2;
  if (_internal_has_nickname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserQueryRequest.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string phone = 3;
  if (_internal_has_phone()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserQueryRequest.phone");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_phone(), target);
  }

  // string uid = 4;
  if (_internal_has_uid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserQueryRequest.uid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserQueryRequest)
  return target;
}

size_t UserQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserQueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (by_case()) {
    // string email = 1;
    case kEmail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
      break;
    }
    // string nickname = 2;
    case kNickname: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
      break;
    }
    // string phone = 3;
    case kPhone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phone());
      break;
    }
    // string uid = 4;
    case kUid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uid());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserQueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserQueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserQueryRequest::GetClassData() const { return &_class_data_; }


void UserQueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserQueryRequest*>(&to_msg);
  auto& from = static_cast<const UserQueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserQueryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.by_case()) {
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case kPhone: {
      _this->_internal_set_phone(from._internal_phone());
      break;
    }
    case kUid: {
      _this->_internal_set_uid(from._internal_uid());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserQueryRequest::CopyFrom(const UserQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserQueryRequest::IsInitialized() const {
  return true;
}

void UserQueryRequest::InternalSwap(UserQueryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.by_, other->_impl_.by_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserQueryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[17]);
}

// ===================================================================

class UserSignUpByEmailRequest::_Internal {
 public:
};

UserSignUpByEmailRequest::UserSignUpByEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserSignUpByEmailRequest)
}
UserSignUpByEmailRequest::UserSignUpByEmailRequest(const UserSignUpByEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSignUpByEmailRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.locale_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.home_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_real_name().empty()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_locale().empty()) {
    _this->_impl_.locale_.Set(from._internal_locale(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timezone().empty()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_home().empty()) {
    _this->_impl_.home_.Set(from._internal_home(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserSignUpByEmailRequest)
}

inline void UserSignUpByEmailRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.locale_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.home_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserSignUpByEmailRequest::~UserSignUpByEmailRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserSignUpByEmailRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSignUpByEmailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
  _impl_.real_name_.Destroy();
  _impl_.email_.Destroy();
  _impl_.password_.Destroy();
  _impl_.locale_.Destroy();
  _impl_.timezone_.Destroy();
  _impl_.home_.Destroy();
}

void UserSignUpByEmailRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSignUpByEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserSignUpByEmailRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _impl_.real_name_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.locale_.ClearToEmpty();
  _impl_.timezone_.ClearToEmpty();
  _impl_.home_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignUpByEmailRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSignUpByEmailRequest.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string real_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSignUpByEmailRequest.real_name"));
        } else
          goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSignUpByEmailRequest.email"));
        } else
          goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSignUpByEmailRequest.password"));
        } else
          goto handle_unusual;
        continue;
      // string locale = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSignUpByEmailRequest.locale"));
        } else
          goto handle_unusual;
        continue;
      // string timezone = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSignUpByEmailRequest.timezone"));
        } else
          goto handle_unusual;
        continue;
      // string home = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_home();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSignUpByEmailRequest.home"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSignUpByEmailRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserSignUpByEmailRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSignUpByEmailRequest.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  // string real_name = 2;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSignUpByEmailRequest.real_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_real_name(), target);
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSignUpByEmailRequest.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSignUpByEmailRequest.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // string locale = 11;
  if (!this->_internal_locale().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSignUpByEmailRequest.locale");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_locale(), target);
  }

  // string timezone = 12;
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSignUpByEmailRequest.timezone");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_timezone(), target);
  }

  // string home = 99;
  if (!this->_internal_home().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home().data(), static_cast<int>(this->_internal_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSignUpByEmailRequest.home");
    target = stream->WriteStringMaybeAliased(
        99, this->_internal_home(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserSignUpByEmailRequest)
  return target;
}

size_t UserSignUpByEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserSignUpByEmailRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string real_name = 2;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string locale = 11;
  if (!this->_internal_locale().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // string timezone = 12;
  if (!this->_internal_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // string home = 99;
  if (!this->_internal_home().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_home());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignUpByEmailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSignUpByEmailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignUpByEmailRequest::GetClassData() const { return &_class_data_; }


void UserSignUpByEmailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSignUpByEmailRequest*>(&to_msg);
  auto& from = static_cast<const UserSignUpByEmailRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserSignUpByEmailRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_real_name().empty()) {
    _this->_internal_set_real_name(from._internal_real_name());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_locale().empty()) {
    _this->_internal_set_locale(from._internal_locale());
  }
  if (!from._internal_timezone().empty()) {
    _this->_internal_set_timezone(from._internal_timezone());
  }
  if (!from._internal_home().empty()) {
    _this->_internal_set_home(from._internal_home());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignUpByEmailRequest::CopyFrom(const UserSignUpByEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserSignUpByEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignUpByEmailRequest::IsInitialized() const {
  return true;
}

void UserSignUpByEmailRequest::InternalSwap(UserSignUpByEmailRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.locale_, lhs_arena,
      &other->_impl_.locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.home_, lhs_arena,
      &other->_impl_.home_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignUpByEmailRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[18]);
}

// ===================================================================

class UserSignInByPasswordRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const UserSignInByPasswordRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
UserSignInByPasswordRequest::_Internal::ttl(const UserSignInByPasswordRequest* msg) {
  return *msg->_impl_.ttl_;
}
void UserSignInByPasswordRequest::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
UserSignInByPasswordRequest::UserSignInByPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserSignInByPasswordRequest)
}
UserSignInByPasswordRequest::UserSignInByPasswordRequest(const UserSignInByPasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSignInByPasswordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  clear_has_user();
  switch (from.user_case()) {
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case kPhone: {
      _this->_internal_set_phone(from._internal_phone());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserSignInByPasswordRequest)
}

inline void UserSignInByPasswordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_user();
}

UserSignInByPasswordRequest::~UserSignInByPasswordRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserSignInByPasswordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSignInByPasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ttl_;
  if (has_user()) {
    clear_user();
  }
}

void UserSignInByPasswordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSignInByPasswordRequest::clear_user() {
// @@protoc_insertion_point(one_of_clear_start:palm.fig.v1.UserSignInByPasswordRequest)
  switch (user_case()) {
    case kEmail: {
      _impl_.user_.email_.Destroy();
      break;
    }
    case kNickname: {
      _impl_.user_.nickname_.Destroy();
      break;
    }
    case kPhone: {
      _impl_.user_.phone_.Destroy();
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = USER_NOT_SET;
}


void UserSignInByPasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserSignInByPasswordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  clear_user();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignInByPasswordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSignInByPasswordRequest.email"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSignInByPasswordRequest.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string phone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_phone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSignInByPasswordRequest.phone"));
        } else
          goto handle_unusual;
        continue;
      // string password = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSignInByPasswordRequest.password"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSignInByPasswordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserSignInByPasswordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (_internal_has_email()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSignInByPasswordRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string nickname = 2;
  if (_internal_has_nickname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSignInByPasswordRequest.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string phone = 3;
  if (_internal_has_phone()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSignInByPasswordRequest.phone");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_phone(), target);
  }

  // string password = 11;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSignInByPasswordRequest.password");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_password(), target);
  }

  // .google.protobuf.Duration ttl = 19;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserSignInByPasswordRequest)
  return target;
}

size_t UserSignInByPasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserSignInByPasswordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 11;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .google.protobuf.Duration ttl = 19;
  if (this->_internal_has_ttl()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  switch (user_case()) {
    // string email = 1;
    case kEmail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
      break;
    }
    // string nickname = 2;
    case kNickname: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
      break;
    }
    // string phone = 3;
    case kPhone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phone());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignInByPasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSignInByPasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignInByPasswordRequest::GetClassData() const { return &_class_data_; }


void UserSignInByPasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSignInByPasswordRequest*>(&to_msg);
  auto& from = static_cast<const UserSignInByPasswordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserSignInByPasswordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  switch (from.user_case()) {
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case kPhone: {
      _this->_internal_set_phone(from._internal_phone());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignInByPasswordRequest::CopyFrom(const UserSignInByPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserSignInByPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignInByPasswordRequest::IsInitialized() const {
  return true;
}

void UserSignInByPasswordRequest::InternalSwap(UserSignInByPasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
  swap(_impl_.user_, other->_impl_.user_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignInByPasswordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[19]);
}

// ===================================================================

class UserSignInResponse::_Internal {
 public:
};

void UserSignInResponse::clear_roles() {
  _impl_.roles_.Clear();
}
void UserSignInResponse::clear_permissions() {
  _impl_.permissions_.Clear();
}
UserSignInResponse::UserSignInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.UserSignInResponse)
}
UserSignInResponse::UserSignInResponse(const UserSignInResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSignInResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){from._impl_.roles_}
    , decltype(_impl_.permissions_){from._impl_.permissions_}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.by_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_real_name().empty()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.by_ = from._impl_.by_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.UserSignInResponse)
}

inline void UserSignInResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){arena}
    , decltype(_impl_.permissions_){arena}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.by_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserSignInResponse::~UserSignInResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.UserSignInResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSignInResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roles_.~RepeatedPtrField();
  _impl_.permissions_.~RepeatedPtrField();
  _impl_.real_name_.Destroy();
  _impl_.token_.Destroy();
}

void UserSignInResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSignInResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.UserSignInResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roles_.Clear();
  _impl_.permissions_.Clear();
  _impl_.real_name_.ClearToEmpty();
  _impl_.token_.ClearToEmpty();
  _impl_.by_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignInResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string real_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSignInResponse.real_name"));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.UserSignInResponse.By by = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_by(static_cast<::palm::fig::v1::UserSignInResponse_By>(val));
        } else
          goto handle_unusual;
        continue;
      // string token = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.UserSignInResponse.token"));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.metasequoia.v1.Role roles = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.metasequoia.v1.Permission permissions = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSignInResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.UserSignInResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSignInResponse.real_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_real_name(), target);
  }

  // .palm.fig.v1.UserSignInResponse.By by = 9;
  if (this->_internal_by() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_by(), target);
  }

  // string token = 11;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.UserSignInResponse.token");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_token(), target);
  }

  // repeated .palm.metasequoia.v1.Role roles = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roles_size()); i < n; i++) {
    const auto& repfield = this->_internal_roles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .palm.metasequoia.v1.Permission permissions = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_permissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_permissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.UserSignInResponse)
  return target;
}

size_t UserSignInResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.UserSignInResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.metasequoia.v1.Role roles = 12;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->_impl_.roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.metasequoia.v1.Permission permissions = 13;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->_impl_.permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  // string token = 11;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .palm.fig.v1.UserSignInResponse.By by = 9;
  if (this->_internal_by() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignInResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSignInResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignInResponse::GetClassData() const { return &_class_data_; }


void UserSignInResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSignInResponse*>(&to_msg);
  auto& from = static_cast<const UserSignInResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.UserSignInResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.roles_.MergeFrom(from._impl_.roles_);
  _this->_impl_.permissions_.MergeFrom(from._impl_.permissions_);
  if (!from._internal_real_name().empty()) {
    _this->_internal_set_real_name(from._internal_real_name());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_by() != 0) {
    _this->_internal_set_by(from._internal_by());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignInResponse::CopyFrom(const UserSignInResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.UserSignInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignInResponse::IsInitialized() const {
  return true;
}

void UserSignInResponse::InternalSwap(UserSignInResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.roles_.InternalSwap(&other->_impl_.roles_);
  _impl_.permissions_.InternalSwap(&other->_impl_.permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  swap(_impl_.by_, other->_impl_.by_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignInResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[20]);
}

// ===================================================================

class SettingSetRequest::_Internal {
 public:
};

SettingSetRequest::SettingSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SettingSetRequest)
}
SettingSetRequest::SettingSetRequest(const SettingSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SettingSetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.global_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.global_ = from._impl_.global_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SettingSetRequest)
}

inline void SettingSetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.global_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SettingSetRequest::~SettingSetRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SettingSetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SettingSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void SettingSetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SettingSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SettingSetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.global_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettingSetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool global = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.global_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SettingSetRequest.key"));
        } else
          goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SettingSetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SettingSetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool global = 1;
  if (this->_internal_global() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_global(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SettingSetRequest.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SettingSetRequest)
  return target;
}

size_t SettingSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SettingSetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bool global = 1;
  if (this->_internal_global() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SettingSetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SettingSetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SettingSetRequest::GetClassData() const { return &_class_data_; }


void SettingSetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SettingSetRequest*>(&to_msg);
  auto& from = static_cast<const SettingSetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SettingSetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_global() != 0) {
    _this->_internal_set_global(from._internal_global());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SettingSetRequest::CopyFrom(const SettingSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SettingSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingSetRequest::IsInitialized() const {
  return true;
}

void SettingSetRequest::InternalSwap(SettingSetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.global_, other->_impl_.global_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingSetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[21]);
}

// ===================================================================

class SettingGetRequest::_Internal {
 public:
};

SettingGetRequest::SettingGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SettingGetRequest)
}
SettingGetRequest::SettingGetRequest(const SettingGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SettingGetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.global_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.global_ = from._impl_.global_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SettingGetRequest)
}

inline void SettingGetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.global_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SettingGetRequest::~SettingGetRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SettingGetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SettingGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void SettingGetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SettingGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SettingGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.global_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettingGetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool global = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.global_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SettingGetRequest.key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SettingGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SettingGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool global = 1;
  if (this->_internal_global() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_global(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SettingGetRequest.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SettingGetRequest)
  return target;
}

size_t SettingGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SettingGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bool global = 1;
  if (this->_internal_global() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SettingGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SettingGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SettingGetRequest::GetClassData() const { return &_class_data_; }


void SettingGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SettingGetRequest*>(&to_msg);
  auto& from = static_cast<const SettingGetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SettingGetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_global() != 0) {
    _this->_internal_set_global(from._internal_global());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SettingGetRequest::CopyFrom(const SettingGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SettingGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingGetRequest::IsInitialized() const {
  return true;
}

void SettingGetRequest::InternalSwap(SettingGetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.global_, other->_impl_.global_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingGetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[22]);
}

// ===================================================================

class SettingByUserRequest::_Internal {
 public:
};

SettingByUserRequest::SettingByUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SettingByUserRequest)
}
SettingByUserRequest::SettingByUserRequest(const SettingByUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SettingByUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SettingByUserRequest)
}

inline void SettingByUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SettingByUserRequest::~SettingByUserRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SettingByUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SettingByUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SettingByUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SettingByUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SettingByUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettingByUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SettingByUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SettingByUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SettingByUserRequest)
  return target;
}

size_t SettingByUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SettingByUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SettingByUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SettingByUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SettingByUserRequest::GetClassData() const { return &_class_data_; }


void SettingByUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SettingByUserRequest*>(&to_msg);
  auto& from = static_cast<const SettingByUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SettingByUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SettingByUserRequest::CopyFrom(const SettingByUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SettingByUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingByUserRequest::IsInitialized() const {
  return true;
}

void SettingByUserRequest::InternalSwap(SettingByUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingByUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[23]);
}

// ===================================================================

class SettingsResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<SettingsResponse_Item>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const SettingsResponse_Item* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const SettingsResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SettingsResponse_Item::_Internal::created_at(const SettingsResponse_Item* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SettingsResponse_Item::_Internal::updated_at(const SettingsResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void SettingsResponse_Item::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void SettingsResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
SettingsResponse_Item::SettingsResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SettingsResponse.Item)
}
SettingsResponse_Item::SettingsResponse_Item(const SettingsResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SettingsResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SettingsResponse.Item)
}

inline void SettingsResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.user_id_){0}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SettingsResponse_Item::~SettingsResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SettingsResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SettingsResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void SettingsResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SettingsResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SettingsResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  _impl_.id_ = 0;
  _impl_.user_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettingsResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SettingsResponse.Item.key"));
        } else
          goto handle_unusual;
        continue;
      // bytes value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SettingsResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SettingsResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional int32 user_id = 2;
  if (_internal_has_user_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // string key = 3;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SettingsResponse.Item.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // bytes value = 4;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_value(), target);
  }

  // .google.protobuf.Timestamp created_at = 11;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 12;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SettingsResponse.Item)
  return target;
}

size_t SettingsResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SettingsResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bytes value = 4;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .google.protobuf.Timestamp created_at = 11;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 12;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // optional int32 user_id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SettingsResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SettingsResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SettingsResponse_Item::GetClassData() const { return &_class_data_; }


void SettingsResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SettingsResponse_Item*>(&to_msg);
  auto& from = static_cast<const SettingsResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SettingsResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_id()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SettingsResponse_Item::CopyFrom(const SettingsResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SettingsResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsResponse_Item::IsInitialized() const {
  return true;
}

void SettingsResponse_Item::InternalSwap(SettingsResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SettingsResponse_Item, _impl_.user_id_)
      + sizeof(SettingsResponse_Item::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(SettingsResponse_Item, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingsResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[24]);
}

// ===================================================================

class SettingsResponse::_Internal {
 public:
};

SettingsResponse::SettingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SettingsResponse)
}
SettingsResponse::SettingsResponse(const SettingsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SettingsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SettingsResponse)
}

inline void SettingsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SettingsResponse::~SettingsResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SettingsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SettingsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void SettingsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SettingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SettingsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettingsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.SettingsResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SettingsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SettingsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.SettingsResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SettingsResponse)
  return target;
}

size_t SettingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SettingsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.SettingsResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SettingsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SettingsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SettingsResponse::GetClassData() const { return &_class_data_; }


void SettingsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SettingsResponse*>(&to_msg);
  auto& from = static_cast<const SettingsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SettingsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SettingsResponse::CopyFrom(const SettingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SettingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsResponse::IsInitialized() const {
  return true;
}

void SettingsResponse::InternalSwap(SettingsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[25]);
}

// ===================================================================

class LocaleByLangRequest::_Internal {
 public:
};

LocaleByLangRequest::LocaleByLangRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.LocaleByLangRequest)
}
LocaleByLangRequest::LocaleByLangRequest(const LocaleByLangRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleByLangRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.LocaleByLangRequest)
}

inline void LocaleByLangRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleByLangRequest::~LocaleByLangRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.LocaleByLangRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleByLangRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
}

void LocaleByLangRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleByLangRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.LocaleByLangRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleByLangRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.LocaleByLangRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleByLangRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.LocaleByLangRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.LocaleByLangRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.LocaleByLangRequest)
  return target;
}

size_t LocaleByLangRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.LocaleByLangRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleByLangRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleByLangRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleByLangRequest::GetClassData() const { return &_class_data_; }


void LocaleByLangRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleByLangRequest*>(&to_msg);
  auto& from = static_cast<const LocaleByLangRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.LocaleByLangRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleByLangRequest::CopyFrom(const LocaleByLangRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.LocaleByLangRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleByLangRequest::IsInitialized() const {
  return true;
}

void LocaleByLangRequest::InternalSwap(LocaleByLangRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleByLangRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[26]);
}

// ===================================================================

class LocaleGetRequest::_Internal {
 public:
};

LocaleGetRequest::LocaleGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.LocaleGetRequest)
}
LocaleGetRequest::LocaleGetRequest(const LocaleGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleGetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.LocaleGetRequest)
}

inline void LocaleGetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleGetRequest::~LocaleGetRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.LocaleGetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.code_.Destroy();
}

void LocaleGetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.LocaleGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleGetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.LocaleGetRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.LocaleGetRequest.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.LocaleGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.LocaleGetRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.LocaleGetRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.LocaleGetRequest)
  return target;
}

size_t LocaleGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.LocaleGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleGetRequest::GetClassData() const { return &_class_data_; }


void LocaleGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleGetRequest*>(&to_msg);
  auto& from = static_cast<const LocaleGetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.LocaleGetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleGetRequest::CopyFrom(const LocaleGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.LocaleGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleGetRequest::IsInitialized() const {
  return true;
}

void LocaleGetRequest::InternalSwap(LocaleGetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleGetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[27]);
}

// ===================================================================

class LocalesResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const LocalesResponse_Item* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const LocalesResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LocalesResponse_Item::_Internal::created_at(const LocalesResponse_Item* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LocalesResponse_Item::_Internal::updated_at(const LocalesResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void LocalesResponse_Item::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void LocalesResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
LocalesResponse_Item::LocalesResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.LocalesResponse.Item)
}
LocalesResponse_Item::LocalesResponse_Item(const LocalesResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalesResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.LocalesResponse.Item)
}

inline void LocalesResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocalesResponse_Item::~LocalesResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.LocalesResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalesResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.code_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void LocalesResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalesResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.LocalesResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalesResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.LocalesResponse.Item.lang"));
        } else
          goto handle_unusual;
        continue;
      // string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.LocalesResponse.Item.code"));
        } else
          goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.LocalesResponse.Item.message"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalesResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.LocalesResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.LocalesResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang(), target);
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.LocalesResponse.Item.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.LocalesResponse.Item.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp created_at = 11;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 12;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.LocalesResponse.Item)
  return target;
}

size_t LocalesResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.LocalesResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp created_at = 11;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 12;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalesResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalesResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalesResponse_Item::GetClassData() const { return &_class_data_; }


void LocalesResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalesResponse_Item*>(&to_msg);
  auto& from = static_cast<const LocalesResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.LocalesResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalesResponse_Item::CopyFrom(const LocalesResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.LocalesResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalesResponse_Item::IsInitialized() const {
  return true;
}

void LocalesResponse_Item::InternalSwap(LocalesResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalesResponse_Item, _impl_.id_)
      + sizeof(LocalesResponse_Item::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(LocalesResponse_Item, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalesResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[28]);
}

// ===================================================================

class LocalesResponse::_Internal {
 public:
};

LocalesResponse::LocalesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.LocalesResponse)
}
LocalesResponse::LocalesResponse(const LocalesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.LocalesResponse)
}

inline void LocalesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LocalesResponse::~LocalesResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.LocalesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void LocalesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.LocalesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.LocalesResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.LocalesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.LocalesResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.LocalesResponse)
  return target;
}

size_t LocalesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.LocalesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.LocalesResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalesResponse::GetClassData() const { return &_class_data_; }


void LocalesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalesResponse*>(&to_msg);
  auto& from = static_cast<const LocalesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.LocalesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalesResponse::CopyFrom(const LocalesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.LocalesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalesResponse::IsInitialized() const {
  return true;
}

void LocalesResponse::InternalSwap(LocalesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[29]);
}

// ===================================================================

class LocaleSetRequest::_Internal {
 public:
};

LocaleSetRequest::LocaleSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.LocaleSetRequest)
}
LocaleSetRequest::LocaleSetRequest(const LocaleSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleSetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.LocaleSetRequest)
}

inline void LocaleSetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleSetRequest::~LocaleSetRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.LocaleSetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.code_.Destroy();
  _impl_.message_.Destroy();
}

void LocaleSetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.LocaleSetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleSetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.LocaleSetRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.LocaleSetRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.LocaleSetRequest.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleSetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.LocaleSetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.LocaleSetRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.LocaleSetRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.LocaleSetRequest.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.LocaleSetRequest)
  return target;
}

size_t LocaleSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.LocaleSetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleSetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleSetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleSetRequest::GetClassData() const { return &_class_data_; }


void LocaleSetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleSetRequest*>(&to_msg);
  auto& from = static_cast<const LocaleSetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.LocaleSetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleSetRequest::CopyFrom(const LocaleSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.LocaleSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleSetRequest::IsInitialized() const {
  return true;
}

void LocaleSetRequest::InternalSwap(LocaleSetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleSetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[30]);
}

// ===================================================================

class IndexNowProfile::_Internal {
 public:
};

IndexNowProfile::IndexNowProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.IndexNowProfile)
}
IndexNowProfile::IndexNowProfile(const IndexNowProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexNowProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.IndexNowProfile)
}

inline void IndexNowProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexNowProfile::~IndexNowProfile() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.IndexNowProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexNowProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void IndexNowProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexNowProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.IndexNowProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexNowProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.IndexNowProfile.key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexNowProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.IndexNowProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.IndexNowProfile.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.IndexNowProfile)
  return target;
}

size_t IndexNowProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.IndexNowProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexNowProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexNowProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexNowProfile::GetClassData() const { return &_class_data_; }


void IndexNowProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexNowProfile*>(&to_msg);
  auto& from = static_cast<const IndexNowProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.IndexNowProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexNowProfile::CopyFrom(const IndexNowProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.IndexNowProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexNowProfile::IsInitialized() const {
  return true;
}

void IndexNowProfile::InternalSwap(IndexNowProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexNowProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[31]);
}

// ===================================================================

class IndexNowPingRequest::_Internal {
 public:
};

IndexNowPingRequest::IndexNowPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.IndexNowPingRequest)
}
IndexNowPingRequest::IndexNowPingRequest(const IndexNowPingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexNowPingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.home_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_home().empty()) {
    _this->_impl_.home_.Set(from._internal_home(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.IndexNowPingRequest)
}

inline void IndexNowPingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.home_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexNowPingRequest::~IndexNowPingRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.IndexNowPingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexNowPingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.home_.Destroy();
}

void IndexNowPingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexNowPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.IndexNowPingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.home_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexNowPingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.IndexNowPingRequest.key"));
        } else
          goto handle_unusual;
        continue;
      // string home = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_home();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.IndexNowPingRequest.home"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexNowPingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.IndexNowPingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.IndexNowPingRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string home = 9;
  if (!this->_internal_home().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home().data(), static_cast<int>(this->_internal_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.IndexNowPingRequest.home");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_home(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.IndexNowPingRequest)
  return target;
}

size_t IndexNowPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.IndexNowPingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string home = 9;
  if (!this->_internal_home().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_home());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexNowPingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexNowPingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexNowPingRequest::GetClassData() const { return &_class_data_; }


void IndexNowPingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexNowPingRequest*>(&to_msg);
  auto& from = static_cast<const IndexNowPingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.IndexNowPingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_home().empty()) {
    _this->_internal_set_home(from._internal_home());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexNowPingRequest::CopyFrom(const IndexNowPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.IndexNowPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexNowPingRequest::IsInitialized() const {
  return true;
}

void IndexNowPingRequest::InternalSwap(IndexNowPingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.home_, lhs_arena,
      &other->_impl_.home_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexNowPingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[32]);
}

// ===================================================================

class SitemapPingRequest::_Internal {
 public:
};

SitemapPingRequest::SitemapPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SitemapPingRequest)
}
SitemapPingRequest::SitemapPingRequest(const SitemapPingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SitemapPingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.home_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_home().empty()) {
    _this->_impl_.home_.Set(from._internal_home(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SitemapPingRequest)
}

inline void SitemapPingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.home_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SitemapPingRequest::~SitemapPingRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SitemapPingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SitemapPingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.home_.Destroy();
}

void SitemapPingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SitemapPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SitemapPingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.home_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SitemapPingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string home = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_home();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SitemapPingRequest.home"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SitemapPingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SitemapPingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string home = 1;
  if (!this->_internal_home().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home().data(), static_cast<int>(this->_internal_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SitemapPingRequest.home");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_home(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SitemapPingRequest)
  return target;
}

size_t SitemapPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SitemapPingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string home = 1;
  if (!this->_internal_home().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_home());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SitemapPingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SitemapPingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SitemapPingRequest::GetClassData() const { return &_class_data_; }


void SitemapPingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SitemapPingRequest*>(&to_msg);
  auto& from = static_cast<const SitemapPingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SitemapPingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_home().empty()) {
    _this->_internal_set_home(from._internal_home());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SitemapPingRequest::CopyFrom(const SitemapPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SitemapPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SitemapPingRequest::IsInitialized() const {
  return true;
}

void SitemapPingRequest::InternalSwap(SitemapPingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.home_, lhs_arena,
      &other->_impl_.home_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SitemapPingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[33]);
}

// ===================================================================

class SiteMaintenanceModeRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const SiteMaintenanceModeRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SiteMaintenanceModeRequest::_Internal::ttl(const SiteMaintenanceModeRequest* msg) {
  return *msg->_impl_.ttl_;
}
void SiteMaintenanceModeRequest::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
SiteMaintenanceModeRequest::SiteMaintenanceModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteMaintenanceModeRequest)
}
SiteMaintenanceModeRequest::SiteMaintenanceModeRequest(const SiteMaintenanceModeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteMaintenanceModeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.ttl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteMaintenanceModeRequest)
}

inline void SiteMaintenanceModeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.ttl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteMaintenanceModeRequest::~SiteMaintenanceModeRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteMaintenanceModeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteMaintenanceModeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ttl_;
}

void SiteMaintenanceModeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteMaintenanceModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteMaintenanceModeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteMaintenanceModeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration ttl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteMaintenanceModeRequest.reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteMaintenanceModeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteMaintenanceModeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration ttl = 1;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteMaintenanceModeRequest.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteMaintenanceModeRequest)
  return target;
}

size_t SiteMaintenanceModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteMaintenanceModeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .google.protobuf.Duration ttl = 1;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteMaintenanceModeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteMaintenanceModeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteMaintenanceModeRequest::GetClassData() const { return &_class_data_; }


void SiteMaintenanceModeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteMaintenanceModeRequest*>(&to_msg);
  auto& from = static_cast<const SiteMaintenanceModeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteMaintenanceModeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteMaintenanceModeRequest::CopyFrom(const SiteMaintenanceModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteMaintenanceModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteMaintenanceModeRequest::IsInitialized() const {
  return true;
}

void SiteMaintenanceModeRequest::InternalSwap(SiteMaintenanceModeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteMaintenanceModeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[34]);
}

// ===================================================================

class SiteInstallRequest::_Internal {
 public:
  static const ::palm::fig::v1::UserSignUpByEmailRequest& user(const SiteInstallRequest* msg);
};

const ::palm::fig::v1::UserSignUpByEmailRequest&
SiteInstallRequest::_Internal::user(const SiteInstallRequest* msg) {
  return *msg->_impl_.user_;
}
SiteInstallRequest::SiteInstallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteInstallRequest)
}
SiteInstallRequest::SiteInstallRequest(const SiteInstallRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteInstallRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::palm::fig::v1::UserSignUpByEmailRequest(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteInstallRequest)
}

inline void SiteInstallRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteInstallRequest::~SiteInstallRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteInstallRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteInstallRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void SiteInstallRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteInstallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteInstallRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteInstallRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.fig.v1.UserSignUpByEmailRequest user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteInstallRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteInstallRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.fig.v1.UserSignUpByEmailRequest user = 1;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteInstallRequest)
  return target;
}

size_t SiteInstallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteInstallRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .palm.fig.v1.UserSignUpByEmailRequest user = 1;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteInstallRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteInstallRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteInstallRequest::GetClassData() const { return &_class_data_; }


void SiteInstallRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteInstallRequest*>(&to_msg);
  auto& from = static_cast<const SiteInstallRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteInstallRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::palm::fig::v1::UserSignUpByEmailRequest::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteInstallRequest::CopyFrom(const SiteInstallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteInstallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteInstallRequest::IsInitialized() const {
  return true;
}

void SiteInstallRequest::InternalSwap(SiteInstallRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteInstallRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[35]);
}

// ===================================================================

class TwilioProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<TwilioProfile>()._impl_._has_bits_);
  static void set_has_sms_status_callback(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TwilioProfile::TwilioProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.TwilioProfile)
}
TwilioProfile::TwilioProfile(const TwilioProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TwilioProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_){}
    , decltype(_impl_.account_sid_){}
    , decltype(_impl_.auth_token_){}
    , decltype(_impl_.sms_status_callback_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.account_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_sid().empty()) {
    _this->_impl_.account_sid_.Set(from._internal_account_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auth_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_token().empty()) {
    _this->_impl_.auth_token_.Set(from._internal_auth_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sms_status_callback_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sms_status_callback_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sms_status_callback()) {
    _this->_impl_.sms_status_callback_.Set(from._internal_sms_status_callback(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.TwilioProfile)
}

inline void TwilioProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_){}
    , decltype(_impl_.account_sid_){}
    , decltype(_impl_.auth_token_){}
    , decltype(_impl_.sms_status_callback_){}
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sms_status_callback_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sms_status_callback_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TwilioProfile::~TwilioProfile() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.TwilioProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TwilioProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_.Destroy();
  _impl_.account_sid_.Destroy();
  _impl_.auth_token_.Destroy();
  _impl_.sms_status_callback_.Destroy();
}

void TwilioProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TwilioProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.TwilioProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.from_.ClearToEmpty();
  _impl_.account_sid_.ClearToEmpty();
  _impl_.auth_token_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.sms_status_callback_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TwilioProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TwilioProfile.from"));
        } else
          goto handle_unusual;
        continue;
      // string account_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TwilioProfile.account_sid"));
        } else
          goto handle_unusual;
        continue;
      // string auth_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TwilioProfile.auth_token"));
        } else
          goto handle_unusual;
        continue;
      // optional string sms_status_callback = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sms_status_callback();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TwilioProfile.sms_status_callback"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TwilioProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.TwilioProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TwilioProfile.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string account_sid = 2;
  if (!this->_internal_account_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_sid().data(), static_cast<int>(this->_internal_account_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TwilioProfile.account_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_sid(), target);
  }

  // string auth_token = 3;
  if (!this->_internal_auth_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TwilioProfile.auth_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_auth_token(), target);
  }

  // optional string sms_status_callback = 9;
  if (_internal_has_sms_status_callback()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sms_status_callback().data(), static_cast<int>(this->_internal_sms_status_callback().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TwilioProfile.sms_status_callback");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sms_status_callback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.TwilioProfile)
  return target;
}

size_t TwilioProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.TwilioProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string account_sid = 2;
  if (!this->_internal_account_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_sid());
  }

  // string auth_token = 3;
  if (!this->_internal_auth_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // optional string sms_status_callback = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sms_status_callback());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TwilioProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TwilioProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TwilioProfile::GetClassData() const { return &_class_data_; }


void TwilioProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TwilioProfile*>(&to_msg);
  auto& from = static_cast<const TwilioProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.TwilioProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _this->_internal_set_from(from._internal_from());
  }
  if (!from._internal_account_sid().empty()) {
    _this->_internal_set_account_sid(from._internal_account_sid());
  }
  if (!from._internal_auth_token().empty()) {
    _this->_internal_set_auth_token(from._internal_auth_token());
  }
  if (from._internal_has_sms_status_callback()) {
    _this->_internal_set_sms_status_callback(from._internal_sms_status_callback());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TwilioProfile::CopyFrom(const TwilioProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.TwilioProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwilioProfile::IsInitialized() const {
  return true;
}

void TwilioProfile::InternalSwap(TwilioProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_sid_, lhs_arena,
      &other->_impl_.account_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_token_, lhs_arena,
      &other->_impl_.auth_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sms_status_callback_, lhs_arena,
      &other->_impl_.sms_status_callback_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TwilioProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[36]);
}

// ===================================================================

class SmtpProfile::_Internal {
 public:
  static const ::palm::fig::v1::EmailTask_Address& from(const SmtpProfile* msg);
};

const ::palm::fig::v1::EmailTask_Address&
SmtpProfile::_Internal::from(const SmtpProfile* msg) {
  return *msg->_impl_.from_;
}
SmtpProfile::SmtpProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SmtpProfile)
}
SmtpProfile::SmtpProfile(const SmtpProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SmtpProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_){from._impl_.cc_}
    , decltype(_impl_.bcc_){from._impl_.bcc_}
    , decltype(_impl_.host_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.port_){}
    , decltype(_impl_.auth_method_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::palm::fig::v1::EmailTask_Address(*from._impl_.from_);
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auth_method_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.auth_method_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SmtpProfile)
}

inline void SmtpProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_){arena}
    , decltype(_impl_.bcc_){arena}
    , decltype(_impl_.host_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.auth_method_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SmtpProfile::~SmtpProfile() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SmtpProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmtpProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cc_.~RepeatedPtrField();
  _impl_.bcc_.~RepeatedPtrField();
  _impl_.host_.Destroy();
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
}

void SmtpProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmtpProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SmtpProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cc_.Clear();
  _impl_.bcc_.Clear();
  _impl_.host_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.auth_method_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.auth_method_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmtpProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SmtpProfile.host"));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SmtpProfile.AuthMethod auth_method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auth_method(static_cast<::palm::fig::v1::SmtpProfile_AuthMethod>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.EmailTask.Address cc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.EmailTask.Address bcc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bcc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.EmailTask.Address from = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SmtpProfile.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SmtpProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SmtpProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SmtpProfile.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // .palm.fig.v1.SmtpProfile.AuthMethod auth_method = 3;
  if (this->_internal_auth_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_auth_method(), target);
  }

  // repeated .palm.fig.v1.EmailTask.Address cc = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cc_size()); i < n; i++) {
    const auto& repfield = this->_internal_cc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.EmailTask.Address bcc = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bcc_size()); i < n; i++) {
    const auto& repfield = this->_internal_bcc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.EmailTask.Address from = 11;
  if (this->_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // string password = 12;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SmtpProfile.password");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SmtpProfile)
  return target;
}

size_t SmtpProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SmtpProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.EmailTask.Address cc = 8;
  total_size += 1UL * this->_internal_cc_size();
  for (const auto& msg : this->_impl_.cc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.fig.v1.EmailTask.Address bcc = 9;
  total_size += 1UL * this->_internal_bcc_size();
  for (const auto& msg : this->_impl_.bcc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string password = 12;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .palm.fig.v1.EmailTask.Address from = 11;
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // .palm.fig.v1.SmtpProfile.AuthMethod auth_method = 3;
  if (this->_internal_auth_method() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_auth_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmtpProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmtpProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmtpProfile::GetClassData() const { return &_class_data_; }


void SmtpProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmtpProfile*>(&to_msg);
  auto& from = static_cast<const SmtpProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SmtpProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cc_.MergeFrom(from._impl_.cc_);
  _this->_impl_.bcc_.MergeFrom(from._impl_.bcc_);
  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_from()) {
    _this->_internal_mutable_from()->::palm::fig::v1::EmailTask_Address::MergeFrom(
        from._internal_from());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_auth_method() != 0) {
    _this->_internal_set_auth_method(from._internal_auth_method());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmtpProfile::CopyFrom(const SmtpProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SmtpProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmtpProfile::IsInitialized() const {
  return true;
}

void SmtpProfile::InternalSwap(SmtpProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cc_.InternalSwap(&other->_impl_.cc_);
  _impl_.bcc_.InternalSwap(&other->_impl_.bcc_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmtpProfile, _impl_.auth_method_)
      + sizeof(SmtpProfile::_impl_.auth_method_)
      - PROTOBUF_FIELD_OFFSET(SmtpProfile, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmtpProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[37]);
}

// ===================================================================

class EmailTask_Address::_Internal {
 public:
};

EmailTask_Address::EmailTask_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.EmailTask.Address)
}
EmailTask_Address::EmailTask_Address(const EmailTask_Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailTask_Address* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.EmailTask.Address)
}

inline void EmailTask_Address::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailTask_Address::~EmailTask_Address() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.EmailTask.Address)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailTask_Address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.email_.Destroy();
}

void EmailTask_Address::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailTask_Address::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.EmailTask.Address)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailTask_Address::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.EmailTask.Address.name"));
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.EmailTask.Address.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailTask_Address::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.EmailTask.Address)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.EmailTask.Address.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.EmailTask.Address.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.EmailTask.Address)
  return target;
}

size_t EmailTask_Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.EmailTask.Address)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailTask_Address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailTask_Address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailTask_Address::GetClassData() const { return &_class_data_; }


void EmailTask_Address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailTask_Address*>(&to_msg);
  auto& from = static_cast<const EmailTask_Address&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.EmailTask.Address)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailTask_Address::CopyFrom(const EmailTask_Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.EmailTask.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailTask_Address::IsInitialized() const {
  return true;
}

void EmailTask_Address::InternalSwap(EmailTask_Address* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailTask_Address::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[38]);
}

// ===================================================================

class EmailTask_Body::_Internal {
 public:
};

EmailTask_Body::EmailTask_Body(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.EmailTask.Body)
}
EmailTask_Body::EmailTask_Body(const EmailTask_Body& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailTask_Body* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.html_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.html_ = from._impl_.html_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.EmailTask.Body)
}

inline void EmailTask_Body::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.html_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailTask_Body::~EmailTask_Body() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.EmailTask.Body)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailTask_Body::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void EmailTask_Body::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailTask_Body::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.EmailTask.Body)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.html_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailTask_Body::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.EmailTask.Body.text"));
        } else
          goto handle_unusual;
        continue;
      // bool html = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.html_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailTask_Body::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.EmailTask.Body)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.EmailTask.Body.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // bool html = 2;
  if (this->_internal_html() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_html(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.EmailTask.Body)
  return target;
}

size_t EmailTask_Body::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.EmailTask.Body)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // bool html = 2;
  if (this->_internal_html() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailTask_Body::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailTask_Body::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailTask_Body::GetClassData() const { return &_class_data_; }


void EmailTask_Body::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailTask_Body*>(&to_msg);
  auto& from = static_cast<const EmailTask_Body&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.EmailTask.Body)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_html() != 0) {
    _this->_internal_set_html(from._internal_html());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailTask_Body::CopyFrom(const EmailTask_Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.EmailTask.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailTask_Body::IsInitialized() const {
  return true;
}

void EmailTask_Body::InternalSwap(EmailTask_Body* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.html_, other->_impl_.html_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailTask_Body::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[39]);
}

// ===================================================================

class EmailTask_Attachment::_Internal {
 public:
};

EmailTask_Attachment::EmailTask_Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.EmailTask.Attachment)
}
EmailTask_Attachment::EmailTask_Attachment(const EmailTask_Attachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailTask_Attachment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.EmailTask.Attachment)
}

inline void EmailTask_Attachment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailTask_Attachment::~EmailTask_Attachment() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.EmailTask.Attachment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailTask_Attachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.payload_.Destroy();
}

void EmailTask_Attachment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailTask_Attachment::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.EmailTask.Attachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailTask_Attachment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.EmailTask.Attachment.name"));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailTask_Attachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.EmailTask.Attachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.EmailTask.Attachment.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.EmailTask.Attachment)
  return target;
}

size_t EmailTask_Attachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.EmailTask.Attachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailTask_Attachment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailTask_Attachment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailTask_Attachment::GetClassData() const { return &_class_data_; }


void EmailTask_Attachment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailTask_Attachment*>(&to_msg);
  auto& from = static_cast<const EmailTask_Attachment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.EmailTask.Attachment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailTask_Attachment::CopyFrom(const EmailTask_Attachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.EmailTask.Attachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailTask_Attachment::IsInitialized() const {
  return true;
}

void EmailTask_Attachment::InternalSwap(EmailTask_Attachment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailTask_Attachment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[40]);
}

// ===================================================================

class EmailTask::_Internal {
 public:
  static const ::palm::fig::v1::EmailTask_Address& to(const EmailTask* msg);
  static const ::palm::fig::v1::EmailTask_Body& body(const EmailTask* msg);
};

const ::palm::fig::v1::EmailTask_Address&
EmailTask::_Internal::to(const EmailTask* msg) {
  return *msg->_impl_.to_;
}
const ::palm::fig::v1::EmailTask_Body&
EmailTask::_Internal::body(const EmailTask* msg) {
  return *msg->_impl_.body_;
}
EmailTask::EmailTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.EmailTask)
}
EmailTask::EmailTask(const EmailTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_){from._impl_.cc_}
    , decltype(_impl_.bcc_){from._impl_.bcc_}
    , decltype(_impl_.attachments_){from._impl_.attachments_}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.body_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::palm::fig::v1::EmailTask_Address(*from._impl_.to_);
  }
  if (from._internal_has_body()) {
    _this->_impl_.body_ = new ::palm::fig::v1::EmailTask_Body(*from._impl_.body_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.EmailTask)
}

inline void EmailTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_){arena}
    , decltype(_impl_.bcc_){arena}
    , decltype(_impl_.attachments_){arena}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.body_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailTask::~EmailTask() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.EmailTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cc_.~RepeatedPtrField();
  _impl_.bcc_.~RepeatedPtrField();
  _impl_.attachments_.~RepeatedPtrField();
  _impl_.subject_.Destroy();
  if (this != internal_default_instance()) delete _impl_.to_;
  if (this != internal_default_instance()) delete _impl_.body_;
}

void EmailTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailTask::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.EmailTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cc_.Clear();
  _impl_.bcc_.Clear();
  _impl_.attachments_.Clear();
  _impl_.subject_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.fig.v1.EmailTask.Address to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.EmailTask.Address cc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.EmailTask.Address bcc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bcc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string subject = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.EmailTask.subject"));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.EmailTask.Body body = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.EmailTask.Attachment attachments = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.EmailTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.fig.v1.EmailTask.Address to = 1;
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.EmailTask.Address cc = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cc_size()); i < n; i++) {
    const auto& repfield = this->_internal_cc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.EmailTask.Address bcc = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bcc_size()); i < n; i++) {
    const auto& repfield = this->_internal_bcc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string subject = 11;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.EmailTask.subject");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_subject(), target);
  }

  // .palm.fig.v1.EmailTask.Body body = 12;
  if (this->_internal_has_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::body(this),
        _Internal::body(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.EmailTask.Attachment attachments = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attachments_size()); i < n; i++) {
    const auto& repfield = this->_internal_attachments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.EmailTask)
  return target;
}

size_t EmailTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.EmailTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.EmailTask.Address cc = 2;
  total_size += 1UL * this->_internal_cc_size();
  for (const auto& msg : this->_impl_.cc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.fig.v1.EmailTask.Address bcc = 3;
  total_size += 1UL * this->_internal_bcc_size();
  for (const auto& msg : this->_impl_.bcc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.fig.v1.EmailTask.Attachment attachments = 13;
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->_impl_.attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string subject = 11;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // .palm.fig.v1.EmailTask.Address to = 1;
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  // .palm.fig.v1.EmailTask.Body body = 12;
  if (this->_internal_has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailTask::GetClassData() const { return &_class_data_; }


void EmailTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailTask*>(&to_msg);
  auto& from = static_cast<const EmailTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.EmailTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cc_.MergeFrom(from._impl_.cc_);
  _this->_impl_.bcc_.MergeFrom(from._impl_.bcc_);
  _this->_impl_.attachments_.MergeFrom(from._impl_.attachments_);
  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::palm::fig::v1::EmailTask_Address::MergeFrom(
        from._internal_to());
  }
  if (from._internal_has_body()) {
    _this->_internal_mutable_body()->::palm::fig::v1::EmailTask_Body::MergeFrom(
        from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailTask::CopyFrom(const EmailTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.EmailTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailTask::IsInitialized() const {
  return true;
}

void EmailTask::InternalSwap(EmailTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cc_.InternalSwap(&other->_impl_.cc_);
  _impl_.bcc_.InternalSwap(&other->_impl_.bcc_);
  _impl_.attachments_.InternalSwap(&other->_impl_.attachments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmailTask, _impl_.body_)
      + sizeof(EmailTask::_impl_.body_)
      - PROTOBUF_FIELD_OFFSET(EmailTask, _impl_.to_)>(
          reinterpret_cast<char*>(&_impl_.to_),
          reinterpret_cast<char*>(&other->_impl_.to_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[41]);
}

// ===================================================================

class SiteTwilioPingRequest::_Internal {
 public:
  static const ::palm::fig::v1::TwilioProfile& profile(const SiteTwilioPingRequest* msg);
};

const ::palm::fig::v1::TwilioProfile&
SiteTwilioPingRequest::_Internal::profile(const SiteTwilioPingRequest* msg) {
  return *msg->_impl_.profile_;
}
SiteTwilioPingRequest::SiteTwilioPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteTwilioPingRequest)
}
SiteTwilioPingRequest::SiteTwilioPingRequest(const SiteTwilioPingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteTwilioPingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.profile_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    _this->_impl_.to_.Set(from._internal_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_profile()) {
    _this->_impl_.profile_ = new ::palm::fig::v1::TwilioProfile(*from._impl_.profile_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteTwilioPingRequest)
}

inline void SiteTwilioPingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.profile_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteTwilioPingRequest::~SiteTwilioPingRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteTwilioPingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteTwilioPingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.to_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.profile_;
}

void SiteTwilioPingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteTwilioPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteTwilioPingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.to_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.profile_ != nullptr) {
    delete _impl_.profile_;
  }
  _impl_.profile_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteTwilioPingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteTwilioPingRequest.to"));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteTwilioPingRequest.message"));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.TwilioProfile profile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteTwilioPingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteTwilioPingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteTwilioPingRequest.to");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteTwilioPingRequest.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .palm.fig.v1.TwilioProfile profile = 9;
  if (this->_internal_has_profile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::profile(this),
        _Internal::profile(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteTwilioPingRequest)
  return target;
}

size_t SiteTwilioPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteTwilioPingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .palm.fig.v1.TwilioProfile profile = 9;
  if (this->_internal_has_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.profile_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteTwilioPingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteTwilioPingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteTwilioPingRequest::GetClassData() const { return &_class_data_; }


void SiteTwilioPingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteTwilioPingRequest*>(&to_msg);
  auto& from = static_cast<const SiteTwilioPingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteTwilioPingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _this->_internal_set_to(from._internal_to());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_profile()) {
    _this->_internal_mutable_profile()->::palm::fig::v1::TwilioProfile::MergeFrom(
        from._internal_profile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteTwilioPingRequest::CopyFrom(const SiteTwilioPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteTwilioPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteTwilioPingRequest::IsInitialized() const {
  return true;
}

void SiteTwilioPingRequest::InternalSwap(SiteTwilioPingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_, lhs_arena,
      &other->_impl_.to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.profile_, other->_impl_.profile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteTwilioPingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[42]);
}

// ===================================================================

class SiteSmtpPingRequest::_Internal {
 public:
  static const ::palm::fig::v1::EmailTask_Address& to(const SiteSmtpPingRequest* msg);
  static const ::palm::fig::v1::SmtpProfile& profile(const SiteSmtpPingRequest* msg);
};

const ::palm::fig::v1::EmailTask_Address&
SiteSmtpPingRequest::_Internal::to(const SiteSmtpPingRequest* msg) {
  return *msg->_impl_.to_;
}
const ::palm::fig::v1::SmtpProfile&
SiteSmtpPingRequest::_Internal::profile(const SiteSmtpPingRequest* msg) {
  return *msg->_impl_.profile_;
}
SiteSmtpPingRequest::SiteSmtpPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteSmtpPingRequest)
}
SiteSmtpPingRequest::SiteSmtpPingRequest(const SiteSmtpPingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSmtpPingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.profile_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::palm::fig::v1::EmailTask_Address(*from._impl_.to_);
  }
  if (from._internal_has_profile()) {
    _this->_impl_.profile_ = new ::palm::fig::v1::SmtpProfile(*from._impl_.profile_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteSmtpPingRequest)
}

inline void SiteSmtpPingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.profile_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteSmtpPingRequest::~SiteSmtpPingRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteSmtpPingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSmtpPingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subject_.Destroy();
  _impl_.content_.Destroy();
  if (this != internal_default_instance()) delete _impl_.to_;
  if (this != internal_default_instance()) delete _impl_.profile_;
}

void SiteSmtpPingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSmtpPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteSmtpPingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subject_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.profile_ != nullptr) {
    delete _impl_.profile_;
  }
  _impl_.profile_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSmtpPingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.fig.v1.EmailTask.Address to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSmtpPingRequest.subject"));
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSmtpPingRequest.content"));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SmtpProfile profile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSmtpPingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteSmtpPingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.fig.v1.EmailTask.Address to = 1;
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // string subject = 2;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSmtpPingRequest.subject");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subject(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSmtpPingRequest.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // .palm.fig.v1.SmtpProfile profile = 9;
  if (this->_internal_has_profile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::profile(this),
        _Internal::profile(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteSmtpPingRequest)
  return target;
}

size_t SiteSmtpPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteSmtpPingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 2;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .palm.fig.v1.EmailTask.Address to = 1;
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  // .palm.fig.v1.SmtpProfile profile = 9;
  if (this->_internal_has_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.profile_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSmtpPingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSmtpPingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSmtpPingRequest::GetClassData() const { return &_class_data_; }


void SiteSmtpPingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSmtpPingRequest*>(&to_msg);
  auto& from = static_cast<const SiteSmtpPingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteSmtpPingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::palm::fig::v1::EmailTask_Address::MergeFrom(
        from._internal_to());
  }
  if (from._internal_has_profile()) {
    _this->_internal_mutable_profile()->::palm::fig::v1::SmtpProfile::MergeFrom(
        from._internal_profile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSmtpPingRequest::CopyFrom(const SiteSmtpPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteSmtpPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSmtpPingRequest::IsInitialized() const {
  return true;
}

void SiteSmtpPingRequest::InternalSwap(SiteSmtpPingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteSmtpPingRequest, _impl_.profile_)
      + sizeof(SiteSmtpPingRequest::_impl_.profile_)
      - PROTOBUF_FIELD_OFFSET(SiteSmtpPingRequest, _impl_.to_)>(
          reinterpret_cast<char*>(&_impl_.to_),
          reinterpret_cast<char*>(&other->_impl_.to_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSmtpPingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[43]);
}

// ===================================================================

class SiteSetLogoRequest::_Internal {
 public:
};

SiteSetLogoRequest::SiteSetLogoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteSetLogoRequest)
}
SiteSetLogoRequest::SiteSetLogoRequest(const SiteSetLogoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSetLogoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteSetLogoRequest)
}

inline void SiteSetLogoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteSetLogoRequest::~SiteSetLogoRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteSetLogoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSetLogoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
}

void SiteSetLogoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSetLogoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteSetLogoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetLogoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetLogoRequest.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSetLogoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteSetLogoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetLogoRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteSetLogoRequest)
  return target;
}

size_t SiteSetLogoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteSetLogoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetLogoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSetLogoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetLogoRequest::GetClassData() const { return &_class_data_; }


void SiteSetLogoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSetLogoRequest*>(&to_msg);
  auto& from = static_cast<const SiteSetLogoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteSetLogoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetLogoRequest::CopyFrom(const SiteSetLogoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteSetLogoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetLogoRequest::IsInitialized() const {
  return true;
}

void SiteSetLogoRequest::InternalSwap(SiteSetLogoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetLogoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[44]);
}

// ===================================================================

class SiteSetCopyrightRequest::_Internal {
 public:
};

SiteSetCopyrightRequest::SiteSetCopyrightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteSetCopyrightRequest)
}
SiteSetCopyrightRequest::SiteSetCopyrightRequest(const SiteSetCopyrightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSetCopyrightRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteSetCopyrightRequest)
}

inline void SiteSetCopyrightRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteSetCopyrightRequest::~SiteSetCopyrightRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteSetCopyrightRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSetCopyrightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void SiteSetCopyrightRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSetCopyrightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteSetCopyrightRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetCopyrightRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetCopyrightRequest.payload"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSetCopyrightRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteSetCopyrightRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetCopyrightRequest.payload");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteSetCopyrightRequest)
  return target;
}

size_t SiteSetCopyrightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteSetCopyrightRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetCopyrightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSetCopyrightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetCopyrightRequest::GetClassData() const { return &_class_data_; }


void SiteSetCopyrightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSetCopyrightRequest*>(&to_msg);
  auto& from = static_cast<const SiteSetCopyrightRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteSetCopyrightRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetCopyrightRequest::CopyFrom(const SiteSetCopyrightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteSetCopyrightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetCopyrightRequest::IsInitialized() const {
  return true;
}

void SiteSetCopyrightRequest::InternalSwap(SiteSetCopyrightRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetCopyrightRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[45]);
}

// ===================================================================

class SiteSetKeywordsRequest::_Internal {
 public:
};

SiteSetKeywordsRequest::SiteSetKeywordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteSetKeywordsRequest)
}
SiteSetKeywordsRequest::SiteSetKeywordsRequest(const SiteSetKeywordsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSetKeywordsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteSetKeywordsRequest)
}

inline void SiteSetKeywordsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteSetKeywordsRequest::~SiteSetKeywordsRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteSetKeywordsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSetKeywordsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void SiteSetKeywordsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSetKeywordsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteSetKeywordsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetKeywordsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_items();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetKeywordsRequest.items"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSetKeywordsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteSetKeywordsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string items = 1;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    const auto& s = this->_internal_items(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetKeywordsRequest.items");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteSetKeywordsRequest)
  return target;
}

size_t SiteSetKeywordsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteSetKeywordsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.items_.size());
  for (int i = 0, n = _impl_.items_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.items_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetKeywordsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSetKeywordsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetKeywordsRequest::GetClassData() const { return &_class_data_; }


void SiteSetKeywordsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSetKeywordsRequest*>(&to_msg);
  auto& from = static_cast<const SiteSetKeywordsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteSetKeywordsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetKeywordsRequest::CopyFrom(const SiteSetKeywordsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteSetKeywordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetKeywordsRequest::IsInitialized() const {
  return true;
}

void SiteSetKeywordsRequest::InternalSwap(SiteSetKeywordsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetKeywordsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[46]);
}

// ===================================================================

class SiteSetInfoRequest::_Internal {
 public:
};

SiteSetInfoRequest::SiteSetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteSetInfoRequest)
}
SiteSetInfoRequest::SiteSetInfoRequest(const SiteSetInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSetInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subhead().empty()) {
    _this->_impl_.subhead_.Set(from._internal_subhead(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteSetInfoRequest)
}

inline void SiteSetInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteSetInfoRequest::~SiteSetInfoRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteSetInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSetInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.title_.Destroy();
  _impl_.subhead_.Destroy();
  _impl_.description_.Destroy();
}

void SiteSetInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSetInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteSetInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.subhead_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetInfoRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string title = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetInfoRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // string subhead = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_subhead();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetInfoRequest.subhead"));
        } else
          goto handle_unusual;
        continue;
      // string description = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetInfoRequest.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSetInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteSetInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetInfoRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  // string title = 11;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetInfoRequest.title");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_title(), target);
  }

  // string subhead = 12;
  if (!this->_internal_subhead().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subhead().data(), static_cast<int>(this->_internal_subhead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetInfoRequest.subhead");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_subhead(), target);
  }

  // string description = 13;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetInfoRequest.description");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteSetInfoRequest)
  return target;
}

size_t SiteSetInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteSetInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string title = 11;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string subhead = 12;
  if (!this->_internal_subhead().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subhead());
  }

  // string description = 13;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSetInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetInfoRequest::GetClassData() const { return &_class_data_; }


void SiteSetInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSetInfoRequest*>(&to_msg);
  auto& from = static_cast<const SiteSetInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteSetInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_subhead().empty()) {
    _this->_internal_set_subhead(from._internal_subhead());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetInfoRequest::CopyFrom(const SiteSetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteSetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetInfoRequest::IsInitialized() const {
  return true;
}

void SiteSetInfoRequest::InternalSwap(SiteSetInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subhead_, lhs_arena,
      &other->_impl_.subhead_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[47]);
}

// ===================================================================

class SiteLayoutResponse_Author::_Internal {
 public:
};

SiteLayoutResponse_Author::SiteLayoutResponse_Author(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteLayoutResponse.Author)
}
SiteLayoutResponse_Author::SiteLayoutResponse_Author(const SiteLayoutResponse_Author& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteLayoutResponse_Author* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteLayoutResponse.Author)
}

inline void SiteLayoutResponse_Author::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteLayoutResponse_Author::~SiteLayoutResponse_Author() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteLayoutResponse.Author)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteLayoutResponse_Author::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.email_.Destroy();
}

void SiteLayoutResponse_Author::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteLayoutResponse_Author::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteLayoutResponse.Author)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutResponse_Author::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.Author.name"));
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.Author.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteLayoutResponse_Author::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteLayoutResponse.Author)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.Author.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.Author.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteLayoutResponse.Author)
  return target;
}

size_t SiteLayoutResponse_Author::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteLayoutResponse.Author)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutResponse_Author::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteLayoutResponse_Author::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutResponse_Author::GetClassData() const { return &_class_data_; }


void SiteLayoutResponse_Author::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteLayoutResponse_Author*>(&to_msg);
  auto& from = static_cast<const SiteLayoutResponse_Author&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteLayoutResponse.Author)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutResponse_Author::CopyFrom(const SiteLayoutResponse_Author& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteLayoutResponse.Author)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutResponse_Author::IsInitialized() const {
  return true;
}

void SiteLayoutResponse_Author::InternalSwap(SiteLayoutResponse_Author* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutResponse_Author::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[48]);
}

// ===================================================================

class SiteLayoutResponse::_Internal {
 public:
  static const ::palm::fig::v1::SiteLayoutResponse_Author& author(const SiteLayoutResponse* msg);
};

const ::palm::fig::v1::SiteLayoutResponse_Author&
SiteLayoutResponse::_Internal::author(const SiteLayoutResponse* msg) {
  return *msg->_impl_.author_;
}
SiteLayoutResponse::SiteLayoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteLayoutResponse)
}
SiteLayoutResponse::SiteLayoutResponse(const SiteLayoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteLayoutResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keywords_){from._impl_.keywords_}
    , decltype(_impl_.languages_){from._impl_.languages_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.copyright_){}
    , decltype(_impl_.logo_){}
    , decltype(_impl_.author_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subhead().empty()) {
    _this->_impl_.subhead_.Set(from._internal_subhead(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_copyright().empty()) {
    _this->_impl_.copyright_.Set(from._internal_copyright(), 
      _this->GetArenaForAllocation());
  }
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logo().empty()) {
    _this->_impl_.logo_.Set(from._internal_logo(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_author()) {
    _this->_impl_.author_ = new ::palm::fig::v1::SiteLayoutResponse_Author(*from._impl_.author_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteLayoutResponse)
}

inline void SiteLayoutResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keywords_){arena}
    , decltype(_impl_.languages_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.copyright_){}
    , decltype(_impl_.logo_){}
    , decltype(_impl_.author_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteLayoutResponse::~SiteLayoutResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteLayoutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteLayoutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keywords_.~RepeatedPtrField();
  _impl_.languages_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.subhead_.Destroy();
  _impl_.description_.Destroy();
  _impl_.copyright_.Destroy();
  _impl_.logo_.Destroy();
  if (this != internal_default_instance()) delete _impl_.author_;
}

void SiteLayoutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteLayoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteLayoutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keywords_.Clear();
  _impl_.languages_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.subhead_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.copyright_.ClearToEmpty();
  _impl_.logo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.author_ != nullptr) {
    delete _impl_.author_;
  }
  _impl_.author_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.title"));
        } else
          goto handle_unusual;
        continue;
      // string subhead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subhead();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.subhead"));
        } else
          goto handle_unusual;
        continue;
      // repeated string keywords = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keywords();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.keywords"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.description"));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SiteLayoutResponse.Author author = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string copyright = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_copyright();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.copyright"));
        } else
          goto handle_unusual;
        continue;
      // string logo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_logo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.logo"));
        } else
          goto handle_unusual;
        continue;
      // repeated string languages = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_languages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.languages"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteLayoutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteLayoutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subhead().data(), static_cast<int>(this->_internal_subhead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.subhead");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subhead(), target);
  }

  // repeated string keywords = 3;
  for (int i = 0, n = this->_internal_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.keywords");
    target = stream->WriteString(3, s, target);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // .palm.fig.v1.SiteLayoutResponse.Author author = 5;
  if (this->_internal_has_author()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::author(this),
        _Internal::author(this).GetCachedSize(), target, stream);
  }

  // string copyright = 6;
  if (!this->_internal_copyright().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_copyright().data(), static_cast<int>(this->_internal_copyright().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.copyright");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_copyright(), target);
  }

  // string logo = 7;
  if (!this->_internal_logo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logo().data(), static_cast<int>(this->_internal_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.logo");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_logo(), target);
  }

  // repeated string languages = 9;
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.languages");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteLayoutResponse)
  return target;
}

size_t SiteLayoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteLayoutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keywords = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keywords_.size());
  for (int i = 0, n = _impl_.keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.keywords_.Get(i));
  }

  // repeated string languages = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.languages_.size());
  for (int i = 0, n = _impl_.languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.languages_.Get(i));
  }

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subhead());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string copyright = 6;
  if (!this->_internal_copyright().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_copyright());
  }

  // string logo = 7;
  if (!this->_internal_logo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logo());
  }

  // .palm.fig.v1.SiteLayoutResponse.Author author = 5;
  if (this->_internal_has_author()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.author_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteLayoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutResponse::GetClassData() const { return &_class_data_; }


void SiteLayoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteLayoutResponse*>(&to_msg);
  auto& from = static_cast<const SiteLayoutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteLayoutResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keywords_.MergeFrom(from._impl_.keywords_);
  _this->_impl_.languages_.MergeFrom(from._impl_.languages_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_subhead().empty()) {
    _this->_internal_set_subhead(from._internal_subhead());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_copyright().empty()) {
    _this->_internal_set_copyright(from._internal_copyright());
  }
  if (!from._internal_logo().empty()) {
    _this->_internal_set_logo(from._internal_logo());
  }
  if (from._internal_has_author()) {
    _this->_internal_mutable_author()->::palm::fig::v1::SiteLayoutResponse_Author::MergeFrom(
        from._internal_author());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutResponse::CopyFrom(const SiteLayoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteLayoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutResponse::IsInitialized() const {
  return true;
}

void SiteLayoutResponse::InternalSwap(SiteLayoutResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keywords_.InternalSwap(&other->_impl_.keywords_);
  _impl_.languages_.InternalSwap(&other->_impl_.languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subhead_, lhs_arena,
      &other->_impl_.subhead_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.copyright_, lhs_arena,
      &other->_impl_.copyright_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logo_, lhs_arena,
      &other->_impl_.logo_, rhs_arena
  );
  swap(_impl_.author_, other->_impl_.author_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[49]);
}

// ===================================================================

class GoogleProfile_ReCaptcha::_Internal {
 public:
};

GoogleProfile_ReCaptcha::GoogleProfile_ReCaptcha(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.GoogleProfile.ReCaptcha)
}
GoogleProfile_ReCaptcha::GoogleProfile_ReCaptcha(const GoogleProfile_ReCaptcha& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GoogleProfile_ReCaptcha* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.site_key_){}
    , decltype(_impl_.secret_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.site_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_site_key().empty()) {
    _this->_impl_.site_key_.Set(from._internal_site_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    _this->_impl_.secret_.Set(from._internal_secret(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.GoogleProfile.ReCaptcha)
}

inline void GoogleProfile_ReCaptcha::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.site_key_){}
    , decltype(_impl_.secret_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.site_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GoogleProfile_ReCaptcha::~GoogleProfile_ReCaptcha() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.GoogleProfile.ReCaptcha)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleProfile_ReCaptcha::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.site_key_.Destroy();
  _impl_.secret_.Destroy();
}

void GoogleProfile_ReCaptcha::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GoogleProfile_ReCaptcha::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.GoogleProfile.ReCaptcha)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.site_key_.ClearToEmpty();
  _impl_.secret_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleProfile_ReCaptcha::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string site_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_site_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.GoogleProfile.ReCaptcha.site_key"));
        } else
          goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.GoogleProfile.ReCaptcha.secret"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleProfile_ReCaptcha::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.GoogleProfile.ReCaptcha)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string site_key = 1;
  if (!this->_internal_site_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_key().data(), static_cast<int>(this->_internal_site_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.GoogleProfile.ReCaptcha.site_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_site_key(), target);
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.GoogleProfile.ReCaptcha.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.GoogleProfile.ReCaptcha)
  return target;
}

size_t GoogleProfile_ReCaptcha::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.GoogleProfile.ReCaptcha)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string site_key = 1;
  if (!this->_internal_site_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_key());
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleProfile_ReCaptcha::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GoogleProfile_ReCaptcha::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleProfile_ReCaptcha::GetClassData() const { return &_class_data_; }


void GoogleProfile_ReCaptcha::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GoogleProfile_ReCaptcha*>(&to_msg);
  auto& from = static_cast<const GoogleProfile_ReCaptcha&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.GoogleProfile.ReCaptcha)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_site_key().empty()) {
    _this->_internal_set_site_key(from._internal_site_key());
  }
  if (!from._internal_secret().empty()) {
    _this->_internal_set_secret(from._internal_secret());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleProfile_ReCaptcha::CopyFrom(const GoogleProfile_ReCaptcha& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.GoogleProfile.ReCaptcha)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleProfile_ReCaptcha::IsInitialized() const {
  return true;
}

void GoogleProfile_ReCaptcha::InternalSwap(GoogleProfile_ReCaptcha* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.site_key_, lhs_arena,
      &other->_impl_.site_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_, lhs_arena,
      &other->_impl_.secret_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleProfile_ReCaptcha::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[50]);
}

// ===================================================================

class GoogleProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<GoogleProfile>()._impl_._has_bits_);
  static void set_has_site_verify_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::palm::fig::v1::GoogleProfile_ReCaptcha& re_captcha(const GoogleProfile* msg);
  static void set_has_re_captcha(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::palm::fig::v1::GoogleProfile_ReCaptcha&
GoogleProfile::_Internal::re_captcha(const GoogleProfile* msg) {
  return *msg->_impl_.re_captcha_;
}
GoogleProfile::GoogleProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.GoogleProfile)
}
GoogleProfile::GoogleProfile(const GoogleProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GoogleProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_id_){}
    , decltype(_impl_.re_captcha_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.site_verify_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_verify_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_site_verify_id()) {
    _this->_impl_.site_verify_id_.Set(from._internal_site_verify_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_re_captcha()) {
    _this->_impl_.re_captcha_ = new ::palm::fig::v1::GoogleProfile_ReCaptcha(*from._impl_.re_captcha_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.GoogleProfile)
}

inline void GoogleProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_id_){}
    , decltype(_impl_.re_captcha_){nullptr}
  };
  _impl_.site_verify_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_verify_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GoogleProfile::~GoogleProfile() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.GoogleProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.site_verify_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.re_captcha_;
}

void GoogleProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GoogleProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.GoogleProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.site_verify_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.re_captcha_ != nullptr);
      _impl_.re_captcha_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string site_verify_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_site_verify_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.GoogleProfile.site_verify_id"));
        } else
          goto handle_unusual;
        continue;
      // optional .palm.fig.v1.GoogleProfile.ReCaptcha re_captcha = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_re_captcha(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.GoogleProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string site_verify_id = 1;
  if (_internal_has_site_verify_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_verify_id().data(), static_cast<int>(this->_internal_site_verify_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.GoogleProfile.site_verify_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_site_verify_id(), target);
  }

  // optional .palm.fig.v1.GoogleProfile.ReCaptcha re_captcha = 2;
  if (_internal_has_re_captcha()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::re_captcha(this),
        _Internal::re_captcha(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.GoogleProfile)
  return target;
}

size_t GoogleProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.GoogleProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string site_verify_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_site_verify_id());
    }

    // optional .palm.fig.v1.GoogleProfile.ReCaptcha re_captcha = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.re_captcha_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GoogleProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleProfile::GetClassData() const { return &_class_data_; }


void GoogleProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GoogleProfile*>(&to_msg);
  auto& from = static_cast<const GoogleProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.GoogleProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_site_verify_id(from._internal_site_verify_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_re_captcha()->::palm::fig::v1::GoogleProfile_ReCaptcha::MergeFrom(
          from._internal_re_captcha());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleProfile::CopyFrom(const GoogleProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.GoogleProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleProfile::IsInitialized() const {
  return true;
}

void GoogleProfile::InternalSwap(GoogleProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.site_verify_id_, lhs_arena,
      &other->_impl_.site_verify_id_, rhs_arena
  );
  swap(_impl_.re_captcha_, other->_impl_.re_captcha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[51]);
}

// ===================================================================

class BaiduProfile_SiteVerify::_Internal {
 public:
};

BaiduProfile_SiteVerify::BaiduProfile_SiteVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.BaiduProfile.SiteVerify)
}
BaiduProfile_SiteVerify::BaiduProfile_SiteVerify(const BaiduProfile_SiteVerify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaiduProfile_SiteVerify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.BaiduProfile.SiteVerify)
}

inline void BaiduProfile_SiteVerify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BaiduProfile_SiteVerify::~BaiduProfile_SiteVerify() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.BaiduProfile.SiteVerify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaiduProfile_SiteVerify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.content_.Destroy();
}

void BaiduProfile_SiteVerify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaiduProfile_SiteVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.BaiduProfile.SiteVerify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaiduProfile_SiteVerify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.BaiduProfile.SiteVerify.id"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.BaiduProfile.SiteVerify.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaiduProfile_SiteVerify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.BaiduProfile.SiteVerify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.BaiduProfile.SiteVerify.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.BaiduProfile.SiteVerify.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.BaiduProfile.SiteVerify)
  return target;
}

size_t BaiduProfile_SiteVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.BaiduProfile.SiteVerify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaiduProfile_SiteVerify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaiduProfile_SiteVerify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaiduProfile_SiteVerify::GetClassData() const { return &_class_data_; }


void BaiduProfile_SiteVerify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaiduProfile_SiteVerify*>(&to_msg);
  auto& from = static_cast<const BaiduProfile_SiteVerify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.BaiduProfile.SiteVerify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaiduProfile_SiteVerify::CopyFrom(const BaiduProfile_SiteVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.BaiduProfile.SiteVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaiduProfile_SiteVerify::IsInitialized() const {
  return true;
}

void BaiduProfile_SiteVerify::InternalSwap(BaiduProfile_SiteVerify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BaiduProfile_SiteVerify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[52]);
}

// ===================================================================

class BaiduProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<BaiduProfile>()._impl_._has_bits_);
  static const ::palm::fig::v1::BaiduProfile_SiteVerify& site_verify(const BaiduProfile* msg);
  static void set_has_site_verify(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::palm::fig::v1::BaiduProfile_SiteVerify&
BaiduProfile::_Internal::site_verify(const BaiduProfile* msg) {
  return *msg->_impl_.site_verify_;
}
BaiduProfile::BaiduProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.BaiduProfile)
}
BaiduProfile::BaiduProfile(const BaiduProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaiduProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site_verify()) {
    _this->_impl_.site_verify_ = new ::palm::fig::v1::BaiduProfile_SiteVerify(*from._impl_.site_verify_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.BaiduProfile)
}

inline void BaiduProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_){nullptr}
  };
}

BaiduProfile::~BaiduProfile() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.BaiduProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaiduProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.site_verify_;
}

void BaiduProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaiduProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.BaiduProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.site_verify_ != nullptr);
    _impl_.site_verify_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaiduProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .palm.fig.v1.BaiduProfile.SiteVerify site_verify = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site_verify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaiduProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.BaiduProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .palm.fig.v1.BaiduProfile.SiteVerify site_verify = 1;
  if (_internal_has_site_verify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::site_verify(this),
        _Internal::site_verify(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.BaiduProfile)
  return target;
}

size_t BaiduProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.BaiduProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .palm.fig.v1.BaiduProfile.SiteVerify site_verify = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.site_verify_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaiduProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaiduProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaiduProfile::GetClassData() const { return &_class_data_; }


void BaiduProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaiduProfile*>(&to_msg);
  auto& from = static_cast<const BaiduProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.BaiduProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_site_verify()) {
    _this->_internal_mutable_site_verify()->::palm::fig::v1::BaiduProfile_SiteVerify::MergeFrom(
        from._internal_site_verify());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaiduProfile::CopyFrom(const BaiduProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.BaiduProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaiduProfile::IsInitialized() const {
  return true;
}

void BaiduProfile::InternalSwap(BaiduProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.site_verify_, other->_impl_.site_verify_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaiduProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[53]);
}

// ===================================================================

class SmsTask::_Internal {
 public:
};

SmsTask::SmsTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SmsTask)
}
SmsTask::SmsTask(const SmsTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SmsTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){from._impl_.to_}
    , decltype(_impl_.from_){}
    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SmsTask)
}

inline void SmsTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){arena}
    , decltype(_impl_.from_){}
    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SmsTask::~SmsTask() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SmsTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmsTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.to_.~RepeatedPtrField();
  _impl_.from_.Destroy();
  _impl_.body_.Destroy();
}

void SmsTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmsTask::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SmsTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.to_.Clear();
  _impl_.from_.ClearToEmpty();
  _impl_.body_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmsTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SmsTask.from"));
        } else
          goto handle_unusual;
        continue;
      // repeated string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_to();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SmsTask.to"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SmsTask.body"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SmsTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SmsTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SmsTask.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // repeated string to = 2;
  for (int i = 0, n = this->_internal_to_size(); i < n; i++) {
    const auto& s = this->_internal_to(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SmsTask.to");
    target = stream->WriteString(2, s, target);
  }

  // string body = 3;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SmsTask.body");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SmsTask)
  return target;
}

size_t SmsTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SmsTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string to = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.to_.size());
  for (int i = 0, n = _impl_.to_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.to_.Get(i));
  }

  // string from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string body = 3;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmsTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmsTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmsTask::GetClassData() const { return &_class_data_; }


void SmsTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmsTask*>(&to_msg);
  auto& from = static_cast<const SmsTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SmsTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.to_.MergeFrom(from._impl_.to_);
  if (!from._internal_from().empty()) {
    _this->_internal_set_from(from._internal_from());
  }
  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmsTask::CopyFrom(const SmsTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SmsTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmsTask::IsInitialized() const {
  return true;
}

void SmsTask::InternalSwap(SmsTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.to_.InternalSwap(&other->_impl_.to_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SmsTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[54]);
}

// ===================================================================

class SiteStatusResponse_Database::_Internal {
 public:
};

SiteStatusResponse_Database::SiteStatusResponse_Database(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.Database)
}
SiteStatusResponse_Database::SiteStatusResponse_Database(const SiteStatusResponse_Database& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_Database* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.size_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_size().empty()) {
    _this->_impl_.size_.Set(from._internal_size(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.Database)
}

inline void SiteStatusResponse_Database::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.size_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_Database::~SiteStatusResponse_Database() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.Database)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_Database::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.size_.Destroy();
}

void SiteStatusResponse_Database::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_Database::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.Database)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.size_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Database::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Database.name"));
        } else
          goto handle_unusual;
        continue;
      // string size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Database.size"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_Database::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.Database)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Database.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string size = 2;
  if (!this->_internal_size().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_size().data(), static_cast<int>(this->_internal_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Database.size");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.Database)
  return target;
}

size_t SiteStatusResponse_Database::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.Database)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string size = 2;
  if (!this->_internal_size().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Database::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_Database::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Database::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_Database::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_Database*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_Database&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.Database)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_size().empty()) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Database::CopyFrom(const SiteStatusResponse_Database& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Database::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Database::InternalSwap(SiteStatusResponse_Database* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.size_, lhs_arena,
      &other->_impl_.size_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Database::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[55]);
}

// ===================================================================

class SiteStatusResponse_PostgreSql::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& now(const SiteStatusResponse_PostgreSql* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SiteStatusResponse_PostgreSql::_Internal::now(const SiteStatusResponse_PostgreSql* msg) {
  return *msg->_impl_.now_;
}
void SiteStatusResponse_PostgreSql::clear_now() {
  if (GetArenaForAllocation() == nullptr && _impl_.now_ != nullptr) {
    delete _impl_.now_;
  }
  _impl_.now_ = nullptr;
}
SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.PostgreSql)
}
SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(const SiteStatusResponse_PostgreSql& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_PostgreSql* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.databases_){from._impl_.databases_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.now_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_now()) {
    _this->_impl_.now_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.now_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.PostgreSql)
}

inline void SiteStatusResponse_PostgreSql::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.databases_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.now_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_PostgreSql::~SiteStatusResponse_PostgreSql() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.PostgreSql)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_PostgreSql::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.databases_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.now_;
}

void SiteStatusResponse_PostgreSql::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_PostgreSql::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.PostgreSql)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.databases_.Clear();
  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.now_ != nullptr) {
    delete _impl_.now_;
  }
  _impl_.now_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_PostgreSql::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.PostgreSql.version"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp now = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_now(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.SiteStatusResponse.Database databases = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_databases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_PostgreSql::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.PostgreSql)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.PostgreSql.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // .google.protobuf.Timestamp now = 2;
  if (this->_internal_has_now()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::now(this),
        _Internal::now(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.SiteStatusResponse.Database databases = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_databases_size()); i < n; i++) {
    const auto& repfield = this->_internal_databases(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.PostgreSql)
  return target;
}

size_t SiteStatusResponse_PostgreSql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.PostgreSql)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.SiteStatusResponse.Database databases = 9;
  total_size += 1UL * this->_internal_databases_size();
  for (const auto& msg : this->_impl_.databases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .google.protobuf.Timestamp now = 2;
  if (this->_internal_has_now()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.now_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_PostgreSql::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_PostgreSql::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_PostgreSql::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_PostgreSql::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_PostgreSql*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_PostgreSql&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.PostgreSql)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.databases_.MergeFrom(from._impl_.databases_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_now()) {
    _this->_internal_mutable_now()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_now());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_PostgreSql::CopyFrom(const SiteStatusResponse_PostgreSql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.PostgreSql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_PostgreSql::IsInitialized() const {
  return true;
}

void SiteStatusResponse_PostgreSql::InternalSwap(SiteStatusResponse_PostgreSql* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.databases_.InternalSwap(&other->_impl_.databases_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.now_, other->_impl_.now_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_PostgreSql::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[56]);
}

// ===================================================================

class SiteStatusResponse_MySql::_Internal {
 public:
};

SiteStatusResponse_MySql::SiteStatusResponse_MySql(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.MySql)
}
SiteStatusResponse_MySql::SiteStatusResponse_MySql(const SiteStatusResponse_MySql& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_MySql* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.MySql)
}

inline void SiteStatusResponse_MySql::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.size_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_MySql::~SiteStatusResponse_MySql() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.MySql)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_MySql::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
}

void SiteStatusResponse_MySql::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_MySql::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.MySql)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.size_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_MySql::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.MySql.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_MySql::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.MySql)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_size(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.MySql.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.MySql)
  return target;
}

size_t SiteStatusResponse_MySql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.MySql)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // uint64 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_MySql::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_MySql::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_MySql::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_MySql::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_MySql*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_MySql&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.MySql)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_MySql::CopyFrom(const SiteStatusResponse_MySql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.MySql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_MySql::IsInitialized() const {
  return true;
}

void SiteStatusResponse_MySql::InternalSwap(SiteStatusResponse_MySql* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_MySql::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[57]);
}

// ===================================================================

class SiteStatusResponse_Redis_Item::_Internal {
 public:
};

SiteStatusResponse_Redis_Item::SiteStatusResponse_Redis_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.Redis.Item)
}
SiteStatusResponse_Redis_Item::SiteStatusResponse_Redis_Item(const SiteStatusResponse_Redis_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_Redis_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.ttl_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node().empty()) {
    _this->_impl_.node_.Set(from._internal_node(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ttl_ = from._impl_.ttl_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.Redis.Item)
}

inline void SiteStatusResponse_Redis_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.ttl_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_Redis_Item::~SiteStatusResponse_Redis_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.Redis.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_Redis_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_.Destroy();
  _impl_.key_.Destroy();
}

void SiteStatusResponse_Redis_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_Redis_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.Redis.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.ttl_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Redis_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Redis.Item.node"));
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Redis.Item.key"));
        } else
          goto handle_unusual;
        continue;
      // int64 ttl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_Redis_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.Redis.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string node = 1;
  if (!this->_internal_node().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node().data(), static_cast<int>(this->_internal_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Redis.Item.node");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Redis.Item.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // int64 ttl = 3;
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.Redis.Item)
  return target;
}

size_t SiteStatusResponse_Redis_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.Redis.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node = 1;
  if (!this->_internal_node().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node());
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int64 ttl = 3;
  if (this->_internal_ttl() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ttl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Redis_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_Redis_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Redis_Item::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_Redis_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_Redis_Item*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_Redis_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.Redis.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node().empty()) {
    _this->_internal_set_node(from._internal_node());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_ttl() != 0) {
    _this->_internal_set_ttl(from._internal_ttl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Redis_Item::CopyFrom(const SiteStatusResponse_Redis_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.Redis.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Redis_Item::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Redis_Item::InternalSwap(SiteStatusResponse_Redis_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_, lhs_arena,
      &other->_impl_.node_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Redis_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[58]);
}

// ===================================================================

class SiteStatusResponse_Redis::_Internal {
 public:
};

SiteStatusResponse_Redis::SiteStatusResponse_Redis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.Redis)
}
SiteStatusResponse_Redis::SiteStatusResponse_Redis(const SiteStatusResponse_Redis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_Redis* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.Redis)
}

inline void SiteStatusResponse_Redis::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_Redis::~SiteStatusResponse_Redis() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.Redis)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_Redis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.info_.Destroy();
}

void SiteStatusResponse_Redis::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_Redis::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.Redis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Redis::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Redis.info"));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.SiteStatusResponse.Redis.Item items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_Redis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.Redis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string info = 1;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Redis.info");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_info(), target);
  }

  // repeated .palm.fig.v1.SiteStatusResponse.Redis.Item items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.Redis)
  return target;
}

size_t SiteStatusResponse_Redis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.Redis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.SiteStatusResponse.Redis.Item items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string info = 1;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Redis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_Redis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Redis::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_Redis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_Redis*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_Redis&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.Redis)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Redis::CopyFrom(const SiteStatusResponse_Redis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.Redis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Redis::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Redis::InternalSwap(SiteStatusResponse_Redis* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Redis::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[59]);
}

// ===================================================================

class SiteStatusResponse_RabbitMq::_Internal {
 public:
};

SiteStatusResponse_RabbitMq::SiteStatusResponse_RabbitMq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.RabbitMq)
}
SiteStatusResponse_RabbitMq::SiteStatusResponse_RabbitMq(const SiteStatusResponse_RabbitMq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_RabbitMq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_){}
    , decltype(_impl_.heartbeat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    _this->_impl_.protocol_.Set(from._internal_protocol(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.heartbeat_ = from._impl_.heartbeat_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.RabbitMq)
}

inline void SiteStatusResponse_RabbitMq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_){}
    , decltype(_impl_.heartbeat_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_RabbitMq::~SiteStatusResponse_RabbitMq() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.RabbitMq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_RabbitMq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.protocol_.Destroy();
}

void SiteStatusResponse_RabbitMq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_RabbitMq::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.RabbitMq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.protocol_.ClearToEmpty();
  _impl_.heartbeat_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_RabbitMq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.RabbitMq.protocol"));
        } else
          goto handle_unusual;
        continue;
      // uint32 heartbeat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.heartbeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_RabbitMq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.RabbitMq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol = 1;
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.RabbitMq.protocol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol(), target);
  }

  // uint32 heartbeat = 2;
  if (this->_internal_heartbeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_heartbeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.RabbitMq)
  return target;
}

size_t SiteStatusResponse_RabbitMq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.RabbitMq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol = 1;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // uint32 heartbeat = 2;
  if (this->_internal_heartbeat() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_heartbeat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_RabbitMq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_RabbitMq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_RabbitMq::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_RabbitMq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_RabbitMq*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_RabbitMq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.RabbitMq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_heartbeat() != 0) {
    _this->_internal_set_heartbeat(from._internal_heartbeat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_RabbitMq::CopyFrom(const SiteStatusResponse_RabbitMq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.RabbitMq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_RabbitMq::IsInitialized() const {
  return true;
}

void SiteStatusResponse_RabbitMq::InternalSwap(SiteStatusResponse_RabbitMq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_, lhs_arena,
      &other->_impl_.protocol_, rhs_arena
  );
  swap(_impl_.heartbeat_, other->_impl_.heartbeat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_RabbitMq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[60]);
}

// ===================================================================

class SiteStatusResponse_OpenSearch::_Internal {
 public:
};

SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.OpenSearch)
}
SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(const SiteStatusResponse_OpenSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_OpenSearch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.OpenSearch)
}

inline void SiteStatusResponse_OpenSearch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_OpenSearch::~SiteStatusResponse_OpenSearch() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.OpenSearch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_OpenSearch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.info_.Destroy();
}

void SiteStatusResponse_OpenSearch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_OpenSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.OpenSearch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_OpenSearch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.OpenSearch.url"));
        } else
          goto handle_unusual;
        continue;
      // string info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.OpenSearch.info"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_OpenSearch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.OpenSearch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.OpenSearch.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string info = 2;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.OpenSearch.info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.OpenSearch)
  return target;
}

size_t SiteStatusResponse_OpenSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.OpenSearch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string info = 2;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_OpenSearch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_OpenSearch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_OpenSearch::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_OpenSearch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_OpenSearch*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_OpenSearch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.OpenSearch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_OpenSearch::CopyFrom(const SiteStatusResponse_OpenSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.OpenSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_OpenSearch::IsInitialized() const {
  return true;
}

void SiteStatusResponse_OpenSearch::InternalSwap(SiteStatusResponse_OpenSearch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_OpenSearch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[61]);
}

// ===================================================================

class SiteStatusResponse_Health::_Internal {
 public:
};

SiteStatusResponse_Health::SiteStatusResponse_Health(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.Health)
}
SiteStatusResponse_Health::SiteStatusResponse_Health(const SiteStatusResponse_Health& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_Health* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.Health)
}

inline void SiteStatusResponse_Health::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_Health::~SiteStatusResponse_Health() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.Health)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_Health::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.status_.Destroy();
}

void SiteStatusResponse_Health::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_Health::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.Health)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Health::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Health.name"));
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Health.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_Health::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.Health)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Health.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Health.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.Health)
  return target;
}

size_t SiteStatusResponse_Health::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.Health)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Health::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_Health::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Health::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_Health::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_Health*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_Health&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.Health)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Health::CopyFrom(const SiteStatusResponse_Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Health::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Health::InternalSwap(SiteStatusResponse_Health* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Health::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[62]);
}

// ===================================================================

class SiteStatusResponse_System::_Internal {
 public:
};

SiteStatusResponse_System::SiteStatusResponse_System(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.System)
}
SiteStatusResponse_System::SiteStatusResponse_System(const SiteStatusResponse_System& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_System* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.cpu_){}
    , decltype(_impl_.memory_){}
    , decltype(_impl_.boot_){}
    , decltype(_impl_.disk_){}
    , decltype(_impl_.load_){}
    , decltype(_impl_.fs_){}
    , decltype(_impl_.swap_){}
    , decltype(_impl_.uptime_){}
    , decltype(_impl_.network_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cpu_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpu().empty()) {
    _this->_impl_.cpu_.Set(from._internal_cpu(), 
      _this->GetArenaForAllocation());
  }
  _impl_.memory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memory().empty()) {
    _this->_impl_.memory_.Set(from._internal_memory(), 
      _this->GetArenaForAllocation());
  }
  _impl_.boot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.boot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_boot().empty()) {
    _this->_impl_.boot_.Set(from._internal_boot(), 
      _this->GetArenaForAllocation());
  }
  _impl_.disk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_disk().empty()) {
    _this->_impl_.disk_.Set(from._internal_disk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.load_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_load().empty()) {
    _this->_impl_.load_.Set(from._internal_load(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fs().empty()) {
    _this->_impl_.fs_.Set(from._internal_fs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.swap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.swap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_swap().empty()) {
    _this->_impl_.swap_.Set(from._internal_swap(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uptime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uptime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uptime().empty()) {
    _this->_impl_.uptime_.Set(from._internal_uptime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_network().empty()) {
    _this->_impl_.network_.Set(from._internal_network(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.System)
}

inline void SiteStatusResponse_System::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.cpu_){}
    , decltype(_impl_.memory_){}
    , decltype(_impl_.boot_){}
    , decltype(_impl_.disk_){}
    , decltype(_impl_.load_){}
    , decltype(_impl_.fs_){}
    , decltype(_impl_.swap_){}
    , decltype(_impl_.uptime_){}
    , decltype(_impl_.network_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cpu_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.boot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.boot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.disk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.load_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.swap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.swap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uptime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uptime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_System::~SiteStatusResponse_System() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.System)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_System::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.cpu_.Destroy();
  _impl_.memory_.Destroy();
  _impl_.boot_.Destroy();
  _impl_.disk_.Destroy();
  _impl_.load_.Destroy();
  _impl_.fs_.Destroy();
  _impl_.swap_.Destroy();
  _impl_.uptime_.Destroy();
  _impl_.network_.Destroy();
}

void SiteStatusResponse_System::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_System::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.System)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.cpu_.ClearToEmpty();
  _impl_.memory_.ClearToEmpty();
  _impl_.boot_.ClearToEmpty();
  _impl_.disk_.ClearToEmpty();
  _impl_.load_.ClearToEmpty();
  _impl_.fs_.ClearToEmpty();
  _impl_.swap_.ClearToEmpty();
  _impl_.uptime_.ClearToEmpty();
  _impl_.network_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_System::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.version"));
        } else
          goto handle_unusual;
        continue;
      // string cpu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cpu();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.cpu"));
        } else
          goto handle_unusual;
        continue;
      // string memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_memory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.memory"));
        } else
          goto handle_unusual;
        continue;
      // string boot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_boot();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.boot"));
        } else
          goto handle_unusual;
        continue;
      // string disk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_disk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.disk"));
        } else
          goto handle_unusual;
        continue;
      // string load = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_load();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.load"));
        } else
          goto handle_unusual;
        continue;
      // string fs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_fs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.fs"));
        } else
          goto handle_unusual;
        continue;
      // string swap = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_swap();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.swap"));
        } else
          goto handle_unusual;
        continue;
      // string uptime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_uptime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.uptime"));
        } else
          goto handle_unusual;
        continue;
      // string network = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_network();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.network"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_System::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.System)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string cpu = 2;
  if (!this->_internal_cpu().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu().data(), static_cast<int>(this->_internal_cpu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.cpu");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cpu(), target);
  }

  // string memory = 3;
  if (!this->_internal_memory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memory().data(), static_cast<int>(this->_internal_memory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.memory");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_memory(), target);
  }

  // string boot = 4;
  if (!this->_internal_boot().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boot().data(), static_cast<int>(this->_internal_boot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.boot");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_boot(), target);
  }

  // string disk = 5;
  if (!this->_internal_disk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_disk().data(), static_cast<int>(this->_internal_disk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.disk");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_disk(), target);
  }

  // string load = 6;
  if (!this->_internal_load().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load().data(), static_cast<int>(this->_internal_load().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.load");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_load(), target);
  }

  // string fs = 7;
  if (!this->_internal_fs().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fs().data(), static_cast<int>(this->_internal_fs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.fs");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fs(), target);
  }

  // string swap = 8;
  if (!this->_internal_swap().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_swap().data(), static_cast<int>(this->_internal_swap().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.swap");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_swap(), target);
  }

  // string uptime = 9;
  if (!this->_internal_uptime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uptime().data(), static_cast<int>(this->_internal_uptime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.uptime");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_uptime(), target);
  }

  // string network = 10;
  if (!this->_internal_network().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.network");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_network(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.System)
  return target;
}

size_t SiteStatusResponse_System::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.System)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string cpu = 2;
  if (!this->_internal_cpu().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu());
  }

  // string memory = 3;
  if (!this->_internal_memory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memory());
  }

  // string boot = 4;
  if (!this->_internal_boot().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boot());
  }

  // string disk = 5;
  if (!this->_internal_disk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_disk());
  }

  // string load = 6;
  if (!this->_internal_load().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load());
  }

  // string fs = 7;
  if (!this->_internal_fs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fs());
  }

  // string swap = 8;
  if (!this->_internal_swap().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_swap());
  }

  // string uptime = 9;
  if (!this->_internal_uptime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uptime());
  }

  // string network = 10;
  if (!this->_internal_network().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_System::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_System::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_System::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_System::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_System*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_System&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.System)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_cpu().empty()) {
    _this->_internal_set_cpu(from._internal_cpu());
  }
  if (!from._internal_memory().empty()) {
    _this->_internal_set_memory(from._internal_memory());
  }
  if (!from._internal_boot().empty()) {
    _this->_internal_set_boot(from._internal_boot());
  }
  if (!from._internal_disk().empty()) {
    _this->_internal_set_disk(from._internal_disk());
  }
  if (!from._internal_load().empty()) {
    _this->_internal_set_load(from._internal_load());
  }
  if (!from._internal_fs().empty()) {
    _this->_internal_set_fs(from._internal_fs());
  }
  if (!from._internal_swap().empty()) {
    _this->_internal_set_swap(from._internal_swap());
  }
  if (!from._internal_uptime().empty()) {
    _this->_internal_set_uptime(from._internal_uptime());
  }
  if (!from._internal_network().empty()) {
    _this->_internal_set_network(from._internal_network());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_System::CopyFrom(const SiteStatusResponse_System& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.System)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_System::IsInitialized() const {
  return true;
}

void SiteStatusResponse_System::InternalSwap(SiteStatusResponse_System* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpu_, lhs_arena,
      &other->_impl_.cpu_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memory_, lhs_arena,
      &other->_impl_.memory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.boot_, lhs_arena,
      &other->_impl_.boot_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.disk_, lhs_arena,
      &other->_impl_.disk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.load_, lhs_arena,
      &other->_impl_.load_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fs_, lhs_arena,
      &other->_impl_.fs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.swap_, lhs_arena,
      &other->_impl_.swap_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uptime_, lhs_arena,
      &other->_impl_.uptime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.network_, lhs_arena,
      &other->_impl_.network_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_System::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[63]);
}

// ===================================================================

class SiteStatusResponse::_Internal {
 public:
  static const ::palm::fig::v1::SiteStatusResponse_PostgreSql& postgresql(const SiteStatusResponse* msg);
  static const ::palm::fig::v1::SiteStatusResponse_MySql& mysql(const SiteStatusResponse* msg);
  static const ::palm::fig::v1::SiteStatusResponse_Redis& redis(const SiteStatusResponse* msg);
  static const ::palm::fig::v1::SiteStatusResponse_RabbitMq& rabbitmq(const SiteStatusResponse* msg);
  static const ::palm::fig::v1::SiteStatusResponse_OpenSearch& opensearch(const SiteStatusResponse* msg);
  static const ::palm::fig::v1::SiteStatusResponse_System& system(const SiteStatusResponse* msg);
};

const ::palm::fig::v1::SiteStatusResponse_PostgreSql&
SiteStatusResponse::_Internal::postgresql(const SiteStatusResponse* msg) {
  return *msg->_impl_.postgresql_;
}
const ::palm::fig::v1::SiteStatusResponse_MySql&
SiteStatusResponse::_Internal::mysql(const SiteStatusResponse* msg) {
  return *msg->_impl_.mysql_;
}
const ::palm::fig::v1::SiteStatusResponse_Redis&
SiteStatusResponse::_Internal::redis(const SiteStatusResponse* msg) {
  return *msg->_impl_.redis_;
}
const ::palm::fig::v1::SiteStatusResponse_RabbitMq&
SiteStatusResponse::_Internal::rabbitmq(const SiteStatusResponse* msg) {
  return *msg->_impl_.rabbitmq_;
}
const ::palm::fig::v1::SiteStatusResponse_OpenSearch&
SiteStatusResponse::_Internal::opensearch(const SiteStatusResponse* msg) {
  return *msg->_impl_.opensearch_;
}
const ::palm::fig::v1::SiteStatusResponse_System&
SiteStatusResponse::_Internal::system(const SiteStatusResponse* msg) {
  return *msg->_impl_.system_;
}
SiteStatusResponse::SiteStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse)
}
SiteStatusResponse::SiteStatusResponse(const SiteStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.healthes_){from._impl_.healthes_}
    , decltype(_impl_.postgresql_){nullptr}
    , decltype(_impl_.mysql_){nullptr}
    , decltype(_impl_.redis_){nullptr}
    , decltype(_impl_.rabbitmq_){nullptr}
    , decltype(_impl_.opensearch_){nullptr}
    , decltype(_impl_.system_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_postgresql()) {
    _this->_impl_.postgresql_ = new ::palm::fig::v1::SiteStatusResponse_PostgreSql(*from._impl_.postgresql_);
  }
  if (from._internal_has_mysql()) {
    _this->_impl_.mysql_ = new ::palm::fig::v1::SiteStatusResponse_MySql(*from._impl_.mysql_);
  }
  if (from._internal_has_redis()) {
    _this->_impl_.redis_ = new ::palm::fig::v1::SiteStatusResponse_Redis(*from._impl_.redis_);
  }
  if (from._internal_has_rabbitmq()) {
    _this->_impl_.rabbitmq_ = new ::palm::fig::v1::SiteStatusResponse_RabbitMq(*from._impl_.rabbitmq_);
  }
  if (from._internal_has_opensearch()) {
    _this->_impl_.opensearch_ = new ::palm::fig::v1::SiteStatusResponse_OpenSearch(*from._impl_.opensearch_);
  }
  if (from._internal_has_system()) {
    _this->_impl_.system_ = new ::palm::fig::v1::SiteStatusResponse_System(*from._impl_.system_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse)
}

inline void SiteStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.healthes_){arena}
    , decltype(_impl_.postgresql_){nullptr}
    , decltype(_impl_.mysql_){nullptr}
    , decltype(_impl_.redis_){nullptr}
    , decltype(_impl_.rabbitmq_){nullptr}
    , decltype(_impl_.opensearch_){nullptr}
    , decltype(_impl_.system_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteStatusResponse::~SiteStatusResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.healthes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.postgresql_;
  if (this != internal_default_instance()) delete _impl_.mysql_;
  if (this != internal_default_instance()) delete _impl_.redis_;
  if (this != internal_default_instance()) delete _impl_.rabbitmq_;
  if (this != internal_default_instance()) delete _impl_.opensearch_;
  if (this != internal_default_instance()) delete _impl_.system_;
}

void SiteStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.healthes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.postgresql_ != nullptr) {
    delete _impl_.postgresql_;
  }
  _impl_.postgresql_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mysql_ != nullptr) {
    delete _impl_.mysql_;
  }
  _impl_.mysql_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.redis_ != nullptr) {
    delete _impl_.redis_;
  }
  _impl_.redis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rabbitmq_ != nullptr) {
    delete _impl_.rabbitmq_;
  }
  _impl_.rabbitmq_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.opensearch_ != nullptr) {
    delete _impl_.opensearch_;
  }
  _impl_.opensearch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.system_ != nullptr) {
    delete _impl_.system_;
  }
  _impl_.system_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.fig.v1.SiteStatusResponse.PostgreSql postgresql = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_postgresql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SiteStatusResponse.MySql mysql = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mysql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SiteStatusResponse.Redis redis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_redis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rabbitmq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SiteStatusResponse.OpenSearch opensearch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_opensearch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SiteStatusResponse.System system = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_system(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.SiteStatusResponse.Health healthes = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_healthes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.fig.v1.SiteStatusResponse.PostgreSql postgresql = 1;
  if (this->_internal_has_postgresql()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::postgresql(this),
        _Internal::postgresql(this).GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.SiteStatusResponse.MySql mysql = 2;
  if (this->_internal_has_mysql()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mysql(this),
        _Internal::mysql(this).GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.SiteStatusResponse.Redis redis = 3;
  if (this->_internal_has_redis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::redis(this),
        _Internal::redis(this).GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
  if (this->_internal_has_rabbitmq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rabbitmq(this),
        _Internal::rabbitmq(this).GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.SiteStatusResponse.OpenSearch opensearch = 5;
  if (this->_internal_has_opensearch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::opensearch(this),
        _Internal::opensearch(this).GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.SiteStatusResponse.System system = 11;
  if (this->_internal_has_system()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::system(this),
        _Internal::system(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.SiteStatusResponse.Health healthes = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_healthes_size()); i < n; i++) {
    const auto& repfield = this->_internal_healthes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse)
  return target;
}

size_t SiteStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.SiteStatusResponse.Health healthes = 21;
  total_size += 2UL * this->_internal_healthes_size();
  for (const auto& msg : this->_impl_.healthes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.fig.v1.SiteStatusResponse.PostgreSql postgresql = 1;
  if (this->_internal_has_postgresql()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.postgresql_);
  }

  // .palm.fig.v1.SiteStatusResponse.MySql mysql = 2;
  if (this->_internal_has_mysql()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mysql_);
  }

  // .palm.fig.v1.SiteStatusResponse.Redis redis = 3;
  if (this->_internal_has_redis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.redis_);
  }

  // .palm.fig.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
  if (this->_internal_has_rabbitmq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rabbitmq_);
  }

  // .palm.fig.v1.SiteStatusResponse.OpenSearch opensearch = 5;
  if (this->_internal_has_opensearch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.opensearch_);
  }

  // .palm.fig.v1.SiteStatusResponse.System system = 11;
  if (this->_internal_has_system()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.system_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse::GetClassData() const { return &_class_data_; }


void SiteStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.healthes_.MergeFrom(from._impl_.healthes_);
  if (from._internal_has_postgresql()) {
    _this->_internal_mutable_postgresql()->::palm::fig::v1::SiteStatusResponse_PostgreSql::MergeFrom(
        from._internal_postgresql());
  }
  if (from._internal_has_mysql()) {
    _this->_internal_mutable_mysql()->::palm::fig::v1::SiteStatusResponse_MySql::MergeFrom(
        from._internal_mysql());
  }
  if (from._internal_has_redis()) {
    _this->_internal_mutable_redis()->::palm::fig::v1::SiteStatusResponse_Redis::MergeFrom(
        from._internal_redis());
  }
  if (from._internal_has_rabbitmq()) {
    _this->_internal_mutable_rabbitmq()->::palm::fig::v1::SiteStatusResponse_RabbitMq::MergeFrom(
        from._internal_rabbitmq());
  }
  if (from._internal_has_opensearch()) {
    _this->_internal_mutable_opensearch()->::palm::fig::v1::SiteStatusResponse_OpenSearch::MergeFrom(
        from._internal_opensearch());
  }
  if (from._internal_has_system()) {
    _this->_internal_mutable_system()->::palm::fig::v1::SiteStatusResponse_System::MergeFrom(
        from._internal_system());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse::CopyFrom(const SiteStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse::IsInitialized() const {
  return true;
}

void SiteStatusResponse::InternalSwap(SiteStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.healthes_.InternalSwap(&other->_impl_.healthes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteStatusResponse, _impl_.system_)
      + sizeof(SiteStatusResponse::_impl_.system_)
      - PROTOBUF_FIELD_OFFSET(SiteStatusResponse, _impl_.postgresql_)>(
          reinterpret_cast<char*>(&_impl_.postgresql_),
          reinterpret_cast<char*>(&other->_impl_.postgresql_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[64]);
}

// ===================================================================

class ShorterLinkIndexResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const ShorterLinkIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ShorterLinkIndexResponse_Item::_Internal::updated_at(const ShorterLinkIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void ShorterLinkIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
ShorterLinkIndexResponse_Item::ShorterLinkIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.ShorterLinkIndexResponse.Item)
}
ShorterLinkIndexResponse_Item::ShorterLinkIndexResponse_Item(const ShorterLinkIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShorterLinkIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.details_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_details().empty()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.ShorterLinkIndexResponse.Item)
}

inline void ShorterLinkIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.details_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShorterLinkIndexResponse_Item::~ShorterLinkIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.ShorterLinkIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShorterLinkIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.details_.Destroy();
  _impl_.code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void ShorterLinkIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShorterLinkIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.ShorterLinkIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.details_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShorterLinkIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkIndexResponse.Item.url"));
        } else
          goto handle_unusual;
        continue;
      // string details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkIndexResponse.Item.details"));
        } else
          goto handle_unusual;
        continue;
      // string code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkIndexResponse.Item.code"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShorterLinkIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.ShorterLinkIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkIndexResponse.Item.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // string details = 3;
  if (!this->_internal_details().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_details().data(), static_cast<int>(this->_internal_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkIndexResponse.Item.details");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_details(), target);
  }

  // string code = 9;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkIndexResponse.Item.code");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_code(), target);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.ShorterLinkIndexResponse.Item)
  return target;
}

size_t ShorterLinkIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.ShorterLinkIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string details = 3;
  if (!this->_internal_details().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_details());
  }

  // string code = 9;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShorterLinkIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShorterLinkIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShorterLinkIndexResponse_Item::GetClassData() const { return &_class_data_; }


void ShorterLinkIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShorterLinkIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const ShorterLinkIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.ShorterLinkIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_details().empty()) {
    _this->_internal_set_details(from._internal_details());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShorterLinkIndexResponse_Item::CopyFrom(const ShorterLinkIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.ShorterLinkIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShorterLinkIndexResponse_Item::IsInitialized() const {
  return true;
}

void ShorterLinkIndexResponse_Item::InternalSwap(ShorterLinkIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShorterLinkIndexResponse_Item, _impl_.id_)
      + sizeof(ShorterLinkIndexResponse_Item::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(ShorterLinkIndexResponse_Item, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShorterLinkIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[65]);
}

// ===================================================================

class ShorterLinkIndexResponse::_Internal {
 public:
  static const ::palm::fig::v1::Pagination& pagination(const ShorterLinkIndexResponse* msg);
};

const ::palm::fig::v1::Pagination&
ShorterLinkIndexResponse::_Internal::pagination(const ShorterLinkIndexResponse* msg) {
  return *msg->_impl_.pagination_;
}
ShorterLinkIndexResponse::ShorterLinkIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.ShorterLinkIndexResponse)
}
ShorterLinkIndexResponse::ShorterLinkIndexResponse(const ShorterLinkIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShorterLinkIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::palm::fig::v1::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.ShorterLinkIndexResponse)
}

inline void ShorterLinkIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShorterLinkIndexResponse::~ShorterLinkIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.ShorterLinkIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShorterLinkIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void ShorterLinkIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShorterLinkIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.ShorterLinkIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShorterLinkIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.fig.v1.Pagination pagination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.ShorterLinkIndexResponse.Item items = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShorterLinkIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.ShorterLinkIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.fig.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.ShorterLinkIndexResponse.Item items = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.ShorterLinkIndexResponse)
  return target;
}

size_t ShorterLinkIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.ShorterLinkIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.ShorterLinkIndexResponse.Item items = 11;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.fig.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShorterLinkIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShorterLinkIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShorterLinkIndexResponse::GetClassData() const { return &_class_data_; }


void ShorterLinkIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShorterLinkIndexResponse*>(&to_msg);
  auto& from = static_cast<const ShorterLinkIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.ShorterLinkIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::palm::fig::v1::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShorterLinkIndexResponse::CopyFrom(const ShorterLinkIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.ShorterLinkIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShorterLinkIndexResponse::IsInitialized() const {
  return true;
}

void ShorterLinkIndexResponse::InternalSwap(ShorterLinkIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShorterLinkIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[66]);
}

// ===================================================================

class ShorterLinkCreateRequest::_Internal {
 public:
};

ShorterLinkCreateRequest::ShorterLinkCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.ShorterLinkCreateRequest)
}
ShorterLinkCreateRequest::ShorterLinkCreateRequest(const ShorterLinkCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShorterLinkCreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.details_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_details().empty()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.ShorterLinkCreateRequest)
}

inline void ShorterLinkCreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.details_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShorterLinkCreateRequest::~ShorterLinkCreateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.ShorterLinkCreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShorterLinkCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.details_.Destroy();
}

void ShorterLinkCreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShorterLinkCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.ShorterLinkCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.details_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShorterLinkCreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkCreateRequest.url"));
        } else
          goto handle_unusual;
        continue;
      // string details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkCreateRequest.details"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShorterLinkCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.ShorterLinkCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkCreateRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string details = 2;
  if (!this->_internal_details().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_details().data(), static_cast<int>(this->_internal_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkCreateRequest.details");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.ShorterLinkCreateRequest)
  return target;
}

size_t ShorterLinkCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.ShorterLinkCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string details = 2;
  if (!this->_internal_details().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_details());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShorterLinkCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShorterLinkCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShorterLinkCreateRequest::GetClassData() const { return &_class_data_; }


void ShorterLinkCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShorterLinkCreateRequest*>(&to_msg);
  auto& from = static_cast<const ShorterLinkCreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.ShorterLinkCreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_details().empty()) {
    _this->_internal_set_details(from._internal_details());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShorterLinkCreateRequest::CopyFrom(const ShorterLinkCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.ShorterLinkCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShorterLinkCreateRequest::IsInitialized() const {
  return true;
}

void ShorterLinkCreateRequest::InternalSwap(ShorterLinkCreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ShorterLinkCreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[67]);
}

// ===================================================================

class ShorterLinkUpdateRequest::_Internal {
 public:
};

ShorterLinkUpdateRequest::ShorterLinkUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.ShorterLinkUpdateRequest)
}
ShorterLinkUpdateRequest::ShorterLinkUpdateRequest(const ShorterLinkUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShorterLinkUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.details_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_details().empty()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.ShorterLinkUpdateRequest)
}

inline void ShorterLinkUpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.details_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShorterLinkUpdateRequest::~ShorterLinkUpdateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.ShorterLinkUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShorterLinkUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.details_.Destroy();
}

void ShorterLinkUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShorterLinkUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.ShorterLinkUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.details_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShorterLinkUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkUpdateRequest.url"));
        } else
          goto handle_unusual;
        continue;
      // string details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkUpdateRequest.details"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShorterLinkUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.ShorterLinkUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkUpdateRequest.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // string details = 3;
  if (!this->_internal_details().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_details().data(), static_cast<int>(this->_internal_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkUpdateRequest.details");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.ShorterLinkUpdateRequest)
  return target;
}

size_t ShorterLinkUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.ShorterLinkUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string details = 3;
  if (!this->_internal_details().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_details());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShorterLinkUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShorterLinkUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShorterLinkUpdateRequest::GetClassData() const { return &_class_data_; }


void ShorterLinkUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShorterLinkUpdateRequest*>(&to_msg);
  auto& from = static_cast<const ShorterLinkUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.ShorterLinkUpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_details().empty()) {
    _this->_internal_set_details(from._internal_details());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShorterLinkUpdateRequest::CopyFrom(const ShorterLinkUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.ShorterLinkUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShorterLinkUpdateRequest::IsInitialized() const {
  return true;
}

void ShorterLinkUpdateRequest::InternalSwap(ShorterLinkUpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShorterLinkUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[68]);
}

// ===================================================================

class TagIndexResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const TagIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TagIndexResponse_Item::_Internal::updated_at(const TagIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void TagIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
TagIndexResponse_Item::TagIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.TagIndexResponse.Item)
}
TagIndexResponse_Item::TagIndexResponse_Item(const TagIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TagIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.TagIndexResponse.Item)
}

inline void TagIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.priority_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TagIndexResponse_Item::~TagIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.TagIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TagIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void TagIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TagIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.TagIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TagIndexResponse.Item.code"));
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TagIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.TagIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TagIndexResponse.Item.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_priority(), target);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.TagIndexResponse.Item)
  return target;
}

size_t TagIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.TagIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TagIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagIndexResponse_Item::GetClassData() const { return &_class_data_; }


void TagIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TagIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const TagIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.TagIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagIndexResponse_Item::CopyFrom(const TagIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.TagIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagIndexResponse_Item::IsInitialized() const {
  return true;
}

void TagIndexResponse_Item::InternalSwap(TagIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagIndexResponse_Item, _impl_.priority_)
      + sizeof(TagIndexResponse_Item::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(TagIndexResponse_Item, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[69]);
}

// ===================================================================

class TagIndexResponse::_Internal {
 public:
};

TagIndexResponse::TagIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.TagIndexResponse)
}
TagIndexResponse::TagIndexResponse(const TagIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TagIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.TagIndexResponse)
}

inline void TagIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TagIndexResponse::~TagIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.TagIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TagIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void TagIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TagIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.TagIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.TagIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TagIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.TagIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.TagIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.TagIndexResponse)
  return target;
}

size_t TagIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.TagIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.TagIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TagIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagIndexResponse::GetClassData() const { return &_class_data_; }


void TagIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TagIndexResponse*>(&to_msg);
  auto& from = static_cast<const TagIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.TagIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagIndexResponse::CopyFrom(const TagIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.TagIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagIndexResponse::IsInitialized() const {
  return true;
}

void TagIndexResponse::InternalSwap(TagIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[70]);
}

// ===================================================================

class TagCreateRequest::_Internal {
 public:
};

TagCreateRequest::TagCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.TagCreateRequest)
}
TagCreateRequest::TagCreateRequest(const TagCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TagCreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.priority_ = from._impl_.priority_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.TagCreateRequest)
}

inline void TagCreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.priority_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TagCreateRequest::~TagCreateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.TagCreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TagCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void TagCreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TagCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.TagCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.priority_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagCreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TagCreateRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TagCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.TagCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TagCreateRequest.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // int32 priority = 11;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.TagCreateRequest)
  return target;
}

size_t TagCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.TagCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // int32 priority = 11;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TagCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagCreateRequest::GetClassData() const { return &_class_data_; }


void TagCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TagCreateRequest*>(&to_msg);
  auto& from = static_cast<const TagCreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.TagCreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagCreateRequest::CopyFrom(const TagCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.TagCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagCreateRequest::IsInitialized() const {
  return true;
}

void TagCreateRequest::InternalSwap(TagCreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  swap(_impl_.priority_, other->_impl_.priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagCreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[71]);
}

// ===================================================================

class TagUpdateRequest::_Internal {
 public:
};

TagUpdateRequest::TagUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.TagUpdateRequest)
}
TagUpdateRequest::TagUpdateRequest(const TagUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TagUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.TagUpdateRequest)
}

inline void TagUpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.priority_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TagUpdateRequest::~TagUpdateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.TagUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TagUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void TagUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TagUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.TagUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TagUpdateRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TagUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.TagUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TagUpdateRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // int32 priority = 11;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.TagUpdateRequest)
  return target;
}

size_t TagUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.TagUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 priority = 11;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TagUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagUpdateRequest::GetClassData() const { return &_class_data_; }


void TagUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TagUpdateRequest*>(&to_msg);
  auto& from = static_cast<const TagUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.TagUpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagUpdateRequest::CopyFrom(const TagUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.TagUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagUpdateRequest::IsInitialized() const {
  return true;
}

void TagUpdateRequest::InternalSwap(TagUpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagUpdateRequest, _impl_.priority_)
      + sizeof(TagUpdateRequest::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(TagUpdateRequest, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[72]);
}

// ===================================================================

class CategoryIndexResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const CategoryIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CategoryIndexResponse_Item::_Internal::updated_at(const CategoryIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void CategoryIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
CategoryIndexResponse_Item::CategoryIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.CategoryIndexResponse.Item)
}
CategoryIndexResponse_Item::CategoryIndexResponse_Item(const CategoryIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.left_){}
    , decltype(_impl_.right_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.right_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.right_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.CategoryIndexResponse.Item)
}

inline void CategoryIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.left_){0}
    , decltype(_impl_.right_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CategoryIndexResponse_Item::~CategoryIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.CategoryIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void CategoryIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.CategoryIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.right_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.CategoryIndexResponse.Item.code"));
        } else
          goto handle_unusual;
        continue;
      // int32 left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.CategoryIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.CategoryIndexResponse.Item.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // int32 left = 3;
  if (this->_internal_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_left(), target);
  }

  // int32 right = 4;
  if (this->_internal_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_right(), target);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.CategoryIndexResponse.Item)
  return target;
}

size_t CategoryIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.CategoryIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 left = 3;
  if (this->_internal_left() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_left());
  }

  // int32 right = 4;
  if (this->_internal_right() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_right());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryIndexResponse_Item::GetClassData() const { return &_class_data_; }


void CategoryIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const CategoryIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.CategoryIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_left() != 0) {
    _this->_internal_set_left(from._internal_left());
  }
  if (from._internal_right() != 0) {
    _this->_internal_set_right(from._internal_right());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryIndexResponse_Item::CopyFrom(const CategoryIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.CategoryIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryIndexResponse_Item::IsInitialized() const {
  return true;
}

void CategoryIndexResponse_Item::InternalSwap(CategoryIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CategoryIndexResponse_Item, _impl_.right_)
      + sizeof(CategoryIndexResponse_Item::_impl_.right_)
      - PROTOBUF_FIELD_OFFSET(CategoryIndexResponse_Item, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[73]);
}

// ===================================================================

class CategoryIndexResponse::_Internal {
 public:
};

CategoryIndexResponse::CategoryIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.CategoryIndexResponse)
}
CategoryIndexResponse::CategoryIndexResponse(const CategoryIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.CategoryIndexResponse)
}

inline void CategoryIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CategoryIndexResponse::~CategoryIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.CategoryIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void CategoryIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.CategoryIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.CategoryIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.CategoryIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.CategoryIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.CategoryIndexResponse)
  return target;
}

size_t CategoryIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.CategoryIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.CategoryIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryIndexResponse::GetClassData() const { return &_class_data_; }


void CategoryIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryIndexResponse*>(&to_msg);
  auto& from = static_cast<const CategoryIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.CategoryIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryIndexResponse::CopyFrom(const CategoryIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.CategoryIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryIndexResponse::IsInitialized() const {
  return true;
}

void CategoryIndexResponse::InternalSwap(CategoryIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[74]);
}

// ===================================================================

class CategoryCreateRequest::_Internal {
 public:
};

CategoryCreateRequest::CategoryCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.CategoryCreateRequest)
}
CategoryCreateRequest::CategoryCreateRequest(const CategoryCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryCreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  clear_has_by();
  switch (from.by_case()) {
    case kLeft: {
      _this->_internal_set_left(from._internal_left());
      break;
    }
    case kParent: {
      _this->_internal_set_parent(from._internal_parent());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.CategoryCreateRequest)
}

inline void CategoryCreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_by();
}

CategoryCreateRequest::~CategoryCreateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.CategoryCreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  if (has_by()) {
    clear_by();
  }
}

void CategoryCreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryCreateRequest::clear_by() {
// @@protoc_insertion_point(one_of_clear_start:palm.fig.v1.CategoryCreateRequest)
  switch (by_case()) {
    case kLeft: {
      // No need to clear
      break;
    }
    case kParent: {
      // No need to clear
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = BY_NOT_SET;
}


void CategoryCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.CategoryCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  clear_by();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryCreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.CategoryCreateRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // int32 left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_left(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_parent(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.CategoryCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.CategoryCreateRequest.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // int32 left = 2;
  if (_internal_has_left()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_left(), target);
  }

  // int32 parent = 3;
  if (_internal_has_parent()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_parent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.CategoryCreateRequest)
  return target;
}

size_t CategoryCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.CategoryCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  switch (by_case()) {
    // int32 left = 2;
    case kLeft: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_left());
      break;
    }
    // int32 parent = 3;
    case kParent: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parent());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryCreateRequest::GetClassData() const { return &_class_data_; }


void CategoryCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryCreateRequest*>(&to_msg);
  auto& from = static_cast<const CategoryCreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.CategoryCreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  switch (from.by_case()) {
    case kLeft: {
      _this->_internal_set_left(from._internal_left());
      break;
    }
    case kParent: {
      _this->_internal_set_parent(from._internal_parent());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryCreateRequest::CopyFrom(const CategoryCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.CategoryCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryCreateRequest::IsInitialized() const {
  return true;
}

void CategoryCreateRequest::InternalSwap(CategoryCreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  swap(_impl_.by_, other->_impl_.by_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryCreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[75]);
}

// ===================================================================

class CategoryUpdateRequest::_Internal {
 public:
};

CategoryUpdateRequest::CategoryUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.CategoryUpdateRequest)
}
CategoryUpdateRequest::CategoryUpdateRequest(const CategoryUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.CategoryUpdateRequest)
}

inline void CategoryUpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CategoryUpdateRequest::~CategoryUpdateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.CategoryUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void CategoryUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.CategoryUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.CategoryUpdateRequest.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.CategoryUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.CategoryUpdateRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.CategoryUpdateRequest)
  return target;
}

size_t CategoryUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.CategoryUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryUpdateRequest::GetClassData() const { return &_class_data_; }


void CategoryUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryUpdateRequest*>(&to_msg);
  auto& from = static_cast<const CategoryUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.CategoryUpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryUpdateRequest::CopyFrom(const CategoryUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.CategoryUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryUpdateRequest::IsInitialized() const {
  return true;
}

void CategoryUpdateRequest::InternalSwap(CategoryUpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[76]);
}

// ===================================================================

class NotificationIndexResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const NotificationIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
NotificationIndexResponse_Item::_Internal::updated_at(const NotificationIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void NotificationIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
NotificationIndexResponse_Item::NotificationIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.NotificationIndexResponse.Item)
}
NotificationIndexResponse_Item::NotificationIndexResponse_Item(const NotificationIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotificationIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.NotificationIndexResponse.Item)
}

inline void NotificationIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NotificationIndexResponse_Item::~NotificationIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.NotificationIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotificationIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.url_.Destroy();
  _impl_.lang_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void NotificationIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotificationIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.NotificationIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _impl_.lang_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.NotificationIndexResponse.Item.Level level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::palm::fig::v1::NotificationIndexResponse_Item_Level>(val));
        } else
          goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.NotificationIndexResponse.Item.title"));
        } else
          goto handle_unusual;
        continue;
      // string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.NotificationIndexResponse.Item.url"));
        } else
          goto handle_unusual;
        continue;
      // string lang = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.NotificationIndexResponse.Item.lang"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.NotificationIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .palm.fig.v1.NotificationIndexResponse.Item.Level level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_level(), target);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.NotificationIndexResponse.Item.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // string url = 4;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.NotificationIndexResponse.Item.url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  // string lang = 8;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.NotificationIndexResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_lang(), target);
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.NotificationIndexResponse.Item)
  return target;
}

size_t NotificationIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.NotificationIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string url = 4;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string lang = 8;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .palm.fig.v1.NotificationIndexResponse.Item.Level level = 2;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotificationIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotificationIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotificationIndexResponse_Item::GetClassData() const { return &_class_data_; }


void NotificationIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotificationIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const NotificationIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.NotificationIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotificationIndexResponse_Item::CopyFrom(const NotificationIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.NotificationIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationIndexResponse_Item::IsInitialized() const {
  return true;
}

void NotificationIndexResponse_Item::InternalSwap(NotificationIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotificationIndexResponse_Item, _impl_.level_)
      + sizeof(NotificationIndexResponse_Item::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(NotificationIndexResponse_Item, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[77]);
}

// ===================================================================

class NotificationIndexResponse::_Internal {
 public:
  static const ::palm::fig::v1::Pagination& pagination(const NotificationIndexResponse* msg);
};

const ::palm::fig::v1::Pagination&
NotificationIndexResponse::_Internal::pagination(const NotificationIndexResponse* msg) {
  return *msg->_impl_.pagination_;
}
NotificationIndexResponse::NotificationIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.NotificationIndexResponse)
}
NotificationIndexResponse::NotificationIndexResponse(const NotificationIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotificationIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::palm::fig::v1::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.NotificationIndexResponse)
}

inline void NotificationIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NotificationIndexResponse::~NotificationIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.NotificationIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotificationIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void NotificationIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotificationIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.NotificationIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.NotificationIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.Pagination pagination = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.NotificationIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.NotificationIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.NotificationIndexResponse)
  return target;
}

size_t NotificationIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.NotificationIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.NotificationIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.fig.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotificationIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotificationIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotificationIndexResponse::GetClassData() const { return &_class_data_; }


void NotificationIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotificationIndexResponse*>(&to_msg);
  auto& from = static_cast<const NotificationIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.NotificationIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::palm::fig::v1::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotificationIndexResponse::CopyFrom(const NotificationIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.NotificationIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationIndexResponse::IsInitialized() const {
  return true;
}

void NotificationIndexResponse::InternalSwap(NotificationIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[78]);
}

// ===================================================================

class NotificationCreateRequest::_Internal {
 public:
};

NotificationCreateRequest::NotificationCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.NotificationCreateRequest)
}
NotificationCreateRequest::NotificationCreateRequest(const NotificationCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotificationCreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.NotificationCreateRequest)
}

inline void NotificationCreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NotificationCreateRequest::~NotificationCreateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.NotificationCreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotificationCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.url_.Destroy();
  _impl_.lang_.Destroy();
}

void NotificationCreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotificationCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.NotificationCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _impl_.lang_.ClearToEmpty();
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationCreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.fig.v1.NotificationIndexResponse.Item.Level level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::palm::fig::v1::NotificationIndexResponse_Item_Level>(val));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.NotificationCreateRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.NotificationCreateRequest.url"));
        } else
          goto handle_unusual;
        continue;
      // string lang = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.NotificationCreateRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.NotificationCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.fig.v1.NotificationIndexResponse.Item.Level level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.NotificationCreateRequest.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.NotificationCreateRequest.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // string lang = 9;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.NotificationCreateRequest.lang");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_lang(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.NotificationCreateRequest)
  return target;
}

size_t NotificationCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.NotificationCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string lang = 9;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // .palm.fig.v1.NotificationIndexResponse.Item.Level level = 1;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotificationCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotificationCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotificationCreateRequest::GetClassData() const { return &_class_data_; }


void NotificationCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotificationCreateRequest*>(&to_msg);
  auto& from = static_cast<const NotificationCreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.NotificationCreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotificationCreateRequest::CopyFrom(const NotificationCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.NotificationCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationCreateRequest::IsInitialized() const {
  return true;
}

void NotificationCreateRequest::InternalSwap(NotificationCreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  swap(_impl_.level_, other->_impl_.level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationCreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[79]);
}

// ===================================================================

class NotificationUpdateRequest::_Internal {
 public:
};

NotificationUpdateRequest::NotificationUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.NotificationUpdateRequest)
}
NotificationUpdateRequest::NotificationUpdateRequest(const NotificationUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotificationUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.NotificationUpdateRequest)
}

inline void NotificationUpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NotificationUpdateRequest::~NotificationUpdateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.NotificationUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotificationUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.url_.Destroy();
}

void NotificationUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotificationUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.NotificationUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.NotificationIndexResponse.Item.Level level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::palm::fig::v1::NotificationIndexResponse_Item_Level>(val));
        } else
          goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.NotificationUpdateRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.NotificationUpdateRequest.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.NotificationUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .palm.fig.v1.NotificationIndexResponse.Item.Level level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_level(), target);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.NotificationUpdateRequest.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // string url = 4;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.NotificationUpdateRequest.url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.NotificationUpdateRequest)
  return target;
}

size_t NotificationUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.NotificationUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string url = 4;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .palm.fig.v1.NotificationIndexResponse.Item.Level level = 2;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotificationUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotificationUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotificationUpdateRequest::GetClassData() const { return &_class_data_; }


void NotificationUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotificationUpdateRequest*>(&to_msg);
  auto& from = static_cast<const NotificationUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.NotificationUpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotificationUpdateRequest::CopyFrom(const NotificationUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.NotificationUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationUpdateRequest::IsInitialized() const {
  return true;
}

void NotificationUpdateRequest::InternalSwap(NotificationUpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotificationUpdateRequest, _impl_.level_)
      + sizeof(NotificationUpdateRequest::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(NotificationUpdateRequest, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[80]);
}

// ===================================================================

class AttachmentShowRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const AttachmentShowRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
AttachmentShowRequest::_Internal::ttl(const AttachmentShowRequest* msg) {
  return *msg->_impl_.ttl_;
}
void AttachmentShowRequest::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
AttachmentShowRequest::AttachmentShowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.AttachmentShowRequest)
}
AttachmentShowRequest::AttachmentShowRequest(const AttachmentShowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentShowRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.AttachmentShowRequest)
}

inline void AttachmentShowRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AttachmentShowRequest::~AttachmentShowRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.AttachmentShowRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentShowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ttl_;
}

void AttachmentShowRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentShowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.AttachmentShowRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentShowRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentShowRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.AttachmentShowRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .google.protobuf.Duration ttl = 2;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.AttachmentShowRequest)
  return target;
}

size_t AttachmentShowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.AttachmentShowRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration ttl = 2;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentShowRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentShowRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentShowRequest::GetClassData() const { return &_class_data_; }


void AttachmentShowRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentShowRequest*>(&to_msg);
  auto& from = static_cast<const AttachmentShowRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.AttachmentShowRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentShowRequest::CopyFrom(const AttachmentShowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.AttachmentShowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentShowRequest::IsInitialized() const {
  return true;
}

void AttachmentShowRequest::InternalSwap(AttachmentShowRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttachmentShowRequest, _impl_.id_)
      + sizeof(AttachmentShowRequest::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(AttachmentShowRequest, _impl_.ttl_)>(
          reinterpret_cast<char*>(&_impl_.ttl_),
          reinterpret_cast<char*>(&other->_impl_.ttl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentShowRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[81]);
}

// ===================================================================

class AttachmentShowResponse::_Internal {
 public:
  static const ::palm::fig::v1::AttachmentIndexResponse_Item& item(const AttachmentShowResponse* msg);
};

const ::palm::fig::v1::AttachmentIndexResponse_Item&
AttachmentShowResponse::_Internal::item(const AttachmentShowResponse* msg) {
  return *msg->_impl_.item_;
}
AttachmentShowResponse::AttachmentShowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.AttachmentShowResponse)
}
AttachmentShowResponse::AttachmentShowResponse(const AttachmentShowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentShowResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::palm::fig::v1::AttachmentIndexResponse_Item(*from._impl_.item_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.AttachmentShowResponse)
}

inline void AttachmentShowResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttachmentShowResponse::~AttachmentShowResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.AttachmentShowResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentShowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.item_;
}

void AttachmentShowResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentShowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.AttachmentShowResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentShowResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.fig.v1.AttachmentIndexResponse.Item item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.AttachmentShowResponse.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentShowResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.AttachmentShowResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.fig.v1.AttachmentIndexResponse.Item item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.AttachmentShowResponse.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.AttachmentShowResponse)
  return target;
}

size_t AttachmentShowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.AttachmentShowResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .palm.fig.v1.AttachmentIndexResponse.Item item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentShowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentShowResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentShowResponse::GetClassData() const { return &_class_data_; }


void AttachmentShowResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentShowResponse*>(&to_msg);
  auto& from = static_cast<const AttachmentShowResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.AttachmentShowResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::palm::fig::v1::AttachmentIndexResponse_Item::MergeFrom(
        from._internal_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentShowResponse::CopyFrom(const AttachmentShowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.AttachmentShowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentShowResponse::IsInitialized() const {
  return true;
}

void AttachmentShowResponse::InternalSwap(AttachmentShowResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  swap(_impl_.item_, other->_impl_.item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentShowResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[82]);
}

// ===================================================================

class AttachmentIndexResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const AttachmentIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AttachmentIndexResponse_Item::_Internal::updated_at(const AttachmentIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void AttachmentIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
AttachmentIndexResponse_Item::AttachmentIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.AttachmentIndexResponse.Item)
}
AttachmentIndexResponse_Item::AttachmentIndexResponse_Item(const AttachmentIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket().empty()) {
    _this->_impl_.bucket_.Set(from._internal_bucket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_type().empty()) {
    _this->_impl_.content_type_.Set(from._internal_content_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.AttachmentIndexResponse.Item)
}

inline void AttachmentIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttachmentIndexResponse_Item::~AttachmentIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.AttachmentIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_.Destroy();
  _impl_.name_.Destroy();
  _impl_.title_.Destroy();
  _impl_.content_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void AttachmentIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.AttachmentIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.content_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bucket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bucket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.AttachmentIndexResponse.Item.bucket"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.AttachmentIndexResponse.Item.name"));
        } else
          goto handle_unusual;
        continue;
      // string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.AttachmentIndexResponse.Item.title"));
        } else
          goto handle_unusual;
        continue;
      // int64 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_content_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.AttachmentIndexResponse.Item.content_type"));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.MediaContent.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::palm::fig::v1::MediaContent_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.AttachmentIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string bucket = 2;
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.AttachmentIndexResponse.Item.bucket");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bucket(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.AttachmentIndexResponse.Item.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string title = 4;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.AttachmentIndexResponse.Item.title");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_title(), target);
  }

  // int64 size = 5;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_size(), target);
  }

  // string content_type = 6;
  if (!this->_internal_content_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.AttachmentIndexResponse.Item.content_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content_type(), target);
  }

  // .palm.fig.v1.MediaContent.Status status = 7;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.AttachmentIndexResponse.Item)
  return target;
}

size_t AttachmentIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.AttachmentIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 2;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string title = 4;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string content_type = 6;
  if (!this->_internal_content_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type());
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .palm.fig.v1.MediaContent.Status status = 7;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int64 size = 5;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentIndexResponse_Item::GetClassData() const { return &_class_data_; }


void AttachmentIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const AttachmentIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.AttachmentIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_content_type().empty()) {
    _this->_internal_set_content_type(from._internal_content_type());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentIndexResponse_Item::CopyFrom(const AttachmentIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.AttachmentIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentIndexResponse_Item::IsInitialized() const {
  return true;
}

void AttachmentIndexResponse_Item::InternalSwap(AttachmentIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_, lhs_arena,
      &other->_impl_.bucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_type_, lhs_arena,
      &other->_impl_.content_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttachmentIndexResponse_Item, _impl_.size_)
      + sizeof(AttachmentIndexResponse_Item::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(AttachmentIndexResponse_Item, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[83]);
}

// ===================================================================

class AttachmentIndexResponse::_Internal {
 public:
  static const ::palm::fig::v1::Pagination& pagination(const AttachmentIndexResponse* msg);
};

const ::palm::fig::v1::Pagination&
AttachmentIndexResponse::_Internal::pagination(const AttachmentIndexResponse* msg) {
  return *msg->_impl_.pagination_;
}
AttachmentIndexResponse::AttachmentIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.AttachmentIndexResponse)
}
AttachmentIndexResponse::AttachmentIndexResponse(const AttachmentIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::palm::fig::v1::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.AttachmentIndexResponse)
}

inline void AttachmentIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AttachmentIndexResponse::~AttachmentIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.AttachmentIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void AttachmentIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.AttachmentIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.fig.v1.Pagination pagination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.AttachmentIndexResponse.Item items = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.AttachmentIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.fig.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.AttachmentIndexResponse.Item items = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.AttachmentIndexResponse)
  return target;
}

size_t AttachmentIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.AttachmentIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.AttachmentIndexResponse.Item items = 11;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.fig.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentIndexResponse::GetClassData() const { return &_class_data_; }


void AttachmentIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentIndexResponse*>(&to_msg);
  auto& from = static_cast<const AttachmentIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.AttachmentIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::palm::fig::v1::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentIndexResponse::CopyFrom(const AttachmentIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.AttachmentIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentIndexResponse::IsInitialized() const {
  return true;
}

void AttachmentIndexResponse::InternalSwap(AttachmentIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[84]);
}

// ===================================================================

class LeaveWordIndexResponse_Item::_Internal {
 public:
  static const ::palm::fig::v1::MediaContent& content(const LeaveWordIndexResponse_Item* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const LeaveWordIndexResponse_Item* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const LeaveWordIndexResponse_Item* msg);
};

const ::palm::fig::v1::MediaContent&
LeaveWordIndexResponse_Item::_Internal::content(const LeaveWordIndexResponse_Item* msg) {
  return *msg->_impl_.content_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LeaveWordIndexResponse_Item::_Internal::updated_at(const LeaveWordIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LeaveWordIndexResponse_Item::_Internal::created_at(const LeaveWordIndexResponse_Item* msg) {
  return *msg->_impl_.created_at_;
}
void LeaveWordIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
void LeaveWordIndexResponse_Item::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
LeaveWordIndexResponse_Item::LeaveWordIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.LeaveWordIndexResponse.Item)
}
LeaveWordIndexResponse_Item::LeaveWordIndexResponse_Item(const LeaveWordIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveWordIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.content_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_content()) {
    _this->_impl_.content_ = new ::palm::fig::v1::MediaContent(*from._impl_.content_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.LeaveWordIndexResponse.Item)
}

inline void LeaveWordIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.content_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LeaveWordIndexResponse_Item::~LeaveWordIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.LeaveWordIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveWordIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.ip_.Destroy();
  if (this != internal_default_instance()) delete _impl_.content_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void LeaveWordIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveWordIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.LeaveWordIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.content_ != nullptr) {
    delete _impl_.content_;
  }
  _impl_.content_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveWordIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.LeaveWordIndexResponse.Item.lang"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.LeaveWordIndexResponse.Item.ip"));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.MediaContent content = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveWordIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.LeaveWordIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.LeaveWordIndexResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.LeaveWordIndexResponse.Item.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // .palm.fig.v1.MediaContent content = 8;
  if (this->_internal_has_content()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::content(this),
        _Internal::content(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 12;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.LeaveWordIndexResponse.Item)
  return target;
}

size_t LeaveWordIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.LeaveWordIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .palm.fig.v1.MediaContent content = 8;
  if (this->_internal_has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.content_);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .google.protobuf.Timestamp created_at = 12;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveWordIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveWordIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveWordIndexResponse_Item::GetClassData() const { return &_class_data_; }


void LeaveWordIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveWordIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const LeaveWordIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.LeaveWordIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_has_content()) {
    _this->_internal_mutable_content()->::palm::fig::v1::MediaContent::MergeFrom(
        from._internal_content());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveWordIndexResponse_Item::CopyFrom(const LeaveWordIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.LeaveWordIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveWordIndexResponse_Item::IsInitialized() const {
  return true;
}

void LeaveWordIndexResponse_Item::InternalSwap(LeaveWordIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveWordIndexResponse_Item, _impl_.id_)
      + sizeof(LeaveWordIndexResponse_Item::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(LeaveWordIndexResponse_Item, _impl_.content_)>(
          reinterpret_cast<char*>(&_impl_.content_),
          reinterpret_cast<char*>(&other->_impl_.content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveWordIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[85]);
}

// ===================================================================

class LeaveWordIndexResponse::_Internal {
 public:
  static const ::palm::fig::v1::Pagination& pagination(const LeaveWordIndexResponse* msg);
};

const ::palm::fig::v1::Pagination&
LeaveWordIndexResponse::_Internal::pagination(const LeaveWordIndexResponse* msg) {
  return *msg->_impl_.pagination_;
}
LeaveWordIndexResponse::LeaveWordIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.LeaveWordIndexResponse)
}
LeaveWordIndexResponse::LeaveWordIndexResponse(const LeaveWordIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveWordIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::palm::fig::v1::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.LeaveWordIndexResponse)
}

inline void LeaveWordIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeaveWordIndexResponse::~LeaveWordIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.LeaveWordIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveWordIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void LeaveWordIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveWordIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.LeaveWordIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveWordIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.LeaveWordIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.Pagination pagination = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveWordIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.LeaveWordIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.LeaveWordIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.LeaveWordIndexResponse)
  return target;
}

size_t LeaveWordIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.LeaveWordIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.LeaveWordIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.fig.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveWordIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveWordIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveWordIndexResponse::GetClassData() const { return &_class_data_; }


void LeaveWordIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveWordIndexResponse*>(&to_msg);
  auto& from = static_cast<const LeaveWordIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.LeaveWordIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::palm::fig::v1::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveWordIndexResponse::CopyFrom(const LeaveWordIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.LeaveWordIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveWordIndexResponse::IsInitialized() const {
  return true;
}

void LeaveWordIndexResponse::InternalSwap(LeaveWordIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveWordIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[86]);
}

// ===================================================================

class SignInByGoogleRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const SignInByGoogleRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SignInByGoogleRequest::_Internal::ttl(const SignInByGoogleRequest* msg) {
  return *msg->_impl_.ttl_;
}
void SignInByGoogleRequest::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
SignInByGoogleRequest::SignInByGoogleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SignInByGoogleRequest)
}
SignInByGoogleRequest::SignInByGoogleRequest(const SignInByGoogleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignInByGoogleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){from._impl_.scopes_}
    , decltype(_impl_.code_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.ttl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redirect_uri().empty()) {
    _this->_impl_.redirect_uri_.Set(from._internal_redirect_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce().empty()) {
    _this->_impl_.nonce_.Set(from._internal_nonce(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SignInByGoogleRequest)
}

inline void SignInByGoogleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){arena}
    , decltype(_impl_.code_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.ttl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignInByGoogleRequest::~SignInByGoogleRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SignInByGoogleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignInByGoogleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scopes_.~RepeatedPtrField();
  _impl_.code_.Destroy();
  _impl_.state_.Destroy();
  _impl_.redirect_uri_.Destroy();
  _impl_.nonce_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ttl_;
}

void SignInByGoogleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignInByGoogleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SignInByGoogleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scopes_.Clear();
  _impl_.code_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  _impl_.redirect_uri_.ClearToEmpty();
  _impl_.nonce_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignInByGoogleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string scopes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SignInByGoogleRequest.scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SignInByGoogleRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // string state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SignInByGoogleRequest.state"));
        } else
          goto handle_unusual;
        continue;
      // string redirect_uri = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_redirect_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SignInByGoogleRequest.redirect_uri"));
        } else
          goto handle_unusual;
        continue;
      // string nonce = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SignInByGoogleRequest.nonce"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignInByGoogleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SignInByGoogleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string scopes = 1;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SignInByGoogleRequest.scopes");
    target = stream->WriteString(1, s, target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SignInByGoogleRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SignInByGoogleRequest.state");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_state(), target);
  }

  // string redirect_uri = 4;
  if (!this->_internal_redirect_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redirect_uri().data(), static_cast<int>(this->_internal_redirect_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SignInByGoogleRequest.redirect_uri");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_redirect_uri(), target);
  }

  // string nonce = 9;
  if (!this->_internal_nonce().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SignInByGoogleRequest.nonce");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_nonce(), target);
  }

  // .google.protobuf.Duration ttl = 11;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SignInByGoogleRequest)
  return target;
}

size_t SignInByGoogleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SignInByGoogleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.scopes_.size());
  for (int i = 0, n = _impl_.scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.scopes_.Get(i));
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string redirect_uri = 4;
  if (!this->_internal_redirect_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redirect_uri());
  }

  // string nonce = 9;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  // .google.protobuf.Duration ttl = 11;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignInByGoogleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignInByGoogleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignInByGoogleRequest::GetClassData() const { return &_class_data_; }


void SignInByGoogleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignInByGoogleRequest*>(&to_msg);
  auto& from = static_cast<const SignInByGoogleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SignInByGoogleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scopes_.MergeFrom(from._impl_.scopes_);
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (!from._internal_redirect_uri().empty()) {
    _this->_internal_set_redirect_uri(from._internal_redirect_uri());
  }
  if (!from._internal_nonce().empty()) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignInByGoogleRequest::CopyFrom(const SignInByGoogleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SignInByGoogleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInByGoogleRequest::IsInitialized() const {
  return true;
}

void SignInByGoogleRequest::InternalSwap(SignInByGoogleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scopes_.InternalSwap(&other->_impl_.scopes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redirect_uri_, lhs_arena,
      &other->_impl_.redirect_uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nonce_, lhs_arena,
      &other->_impl_.nonce_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignInByGoogleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[87]);
}

// ===================================================================

class GoogleSignInUrlRequest::_Internal {
 public:
  static const ::palm::fig::v1::Oauth2State& state(const GoogleSignInUrlRequest* msg);
};

const ::palm::fig::v1::Oauth2State&
GoogleSignInUrlRequest::_Internal::state(const GoogleSignInUrlRequest* msg) {
  return *msg->_impl_.state_;
}
GoogleSignInUrlRequest::GoogleSignInUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.GoogleSignInUrlRequest)
}
GoogleSignInUrlRequest::GoogleSignInUrlRequest(const GoogleSignInUrlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GoogleSignInUrlRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redirect_uri().empty()) {
    _this->_impl_.redirect_uri_.Set(from._internal_redirect_uri(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::palm::fig::v1::Oauth2State(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.GoogleSignInUrlRequest)
}

inline void GoogleSignInUrlRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GoogleSignInUrlRequest::~GoogleSignInUrlRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.GoogleSignInUrlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleSignInUrlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.redirect_uri_.Destroy();
  if (this != internal_default_instance()) delete _impl_.state_;
}

void GoogleSignInUrlRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GoogleSignInUrlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.GoogleSignInUrlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.redirect_uri_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleSignInUrlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string redirect_uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_redirect_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.GoogleSignInUrlRequest.redirect_uri"));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.Oauth2State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleSignInUrlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.GoogleSignInUrlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string redirect_uri = 1;
  if (!this->_internal_redirect_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redirect_uri().data(), static_cast<int>(this->_internal_redirect_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.GoogleSignInUrlRequest.redirect_uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_redirect_uri(), target);
  }

  // .palm.fig.v1.Oauth2State state = 2;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.GoogleSignInUrlRequest)
  return target;
}

size_t GoogleSignInUrlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.GoogleSignInUrlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string redirect_uri = 1;
  if (!this->_internal_redirect_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redirect_uri());
  }

  // .palm.fig.v1.Oauth2State state = 2;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleSignInUrlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GoogleSignInUrlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleSignInUrlRequest::GetClassData() const { return &_class_data_; }


void GoogleSignInUrlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GoogleSignInUrlRequest*>(&to_msg);
  auto& from = static_cast<const GoogleSignInUrlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.GoogleSignInUrlRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_redirect_uri().empty()) {
    _this->_internal_set_redirect_uri(from._internal_redirect_uri());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::palm::fig::v1::Oauth2State::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleSignInUrlRequest::CopyFrom(const GoogleSignInUrlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.GoogleSignInUrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleSignInUrlRequest::IsInitialized() const {
  return true;
}

void GoogleSignInUrlRequest::InternalSwap(GoogleSignInUrlRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redirect_uri_, lhs_arena,
      &other->_impl_.redirect_uri_, rhs_arena
  );
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleSignInUrlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[88]);
}

// ===================================================================

class GoogleSignInUrlResponse::_Internal {
 public:
};

GoogleSignInUrlResponse::GoogleSignInUrlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.GoogleSignInUrlResponse)
}
GoogleSignInUrlResponse::GoogleSignInUrlResponse(const GoogleSignInUrlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GoogleSignInUrlResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.nonce_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce().empty()) {
    _this->_impl_.nonce_.Set(from._internal_nonce(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.GoogleSignInUrlResponse)
}

inline void GoogleSignInUrlResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.nonce_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GoogleSignInUrlResponse::~GoogleSignInUrlResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.GoogleSignInUrlResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleSignInUrlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.nonce_.Destroy();
}

void GoogleSignInUrlResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GoogleSignInUrlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.GoogleSignInUrlResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.nonce_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleSignInUrlResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.GoogleSignInUrlResponse.url"));
        } else
          goto handle_unusual;
        continue;
      // string nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.GoogleSignInUrlResponse.nonce"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleSignInUrlResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.GoogleSignInUrlResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.GoogleSignInUrlResponse.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string nonce = 2;
  if (!this->_internal_nonce().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.GoogleSignInUrlResponse.nonce");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.GoogleSignInUrlResponse)
  return target;
}

size_t GoogleSignInUrlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.GoogleSignInUrlResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string nonce = 2;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleSignInUrlResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GoogleSignInUrlResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleSignInUrlResponse::GetClassData() const { return &_class_data_; }


void GoogleSignInUrlResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GoogleSignInUrlResponse*>(&to_msg);
  auto& from = static_cast<const GoogleSignInUrlResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.GoogleSignInUrlResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_nonce().empty()) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleSignInUrlResponse::CopyFrom(const GoogleSignInUrlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.GoogleSignInUrlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleSignInUrlResponse::IsInitialized() const {
  return true;
}

void GoogleSignInUrlResponse::InternalSwap(GoogleSignInUrlResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nonce_, lhs_arena,
      &other->_impl_.nonce_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleSignInUrlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[89]);
}

// ===================================================================

class WechatUserBindByIdRequest::_Internal {
 public:
};

WechatUserBindByIdRequest::WechatUserBindByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.WechatUserBindByIdRequest)
}
WechatUserBindByIdRequest::WechatUserBindByIdRequest(const WechatUserBindByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatUserBindByIdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.wechat_user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wechat_user_id_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.wechat_user_id_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.WechatUserBindByIdRequest)
}

inline void WechatUserBindByIdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){0}
    , decltype(_impl_.wechat_user_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WechatUserBindByIdRequest::~WechatUserBindByIdRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.WechatUserBindByIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatUserBindByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WechatUserBindByIdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatUserBindByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.WechatUserBindByIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.wechat_user_id_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.wechat_user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatUserBindByIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 wechat_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.wechat_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatUserBindByIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.WechatUserBindByIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 wechat_user_id = 2;
  if (this->_internal_wechat_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_wechat_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.WechatUserBindByIdRequest)
  return target;
}

size_t WechatUserBindByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.WechatUserBindByIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }

  // int32 wechat_user_id = 2;
  if (this->_internal_wechat_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wechat_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatUserBindByIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatUserBindByIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatUserBindByIdRequest::GetClassData() const { return &_class_data_; }


void WechatUserBindByIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatUserBindByIdRequest*>(&to_msg);
  auto& from = static_cast<const WechatUserBindByIdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.WechatUserBindByIdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_wechat_user_id() != 0) {
    _this->_internal_set_wechat_user_id(from._internal_wechat_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatUserBindByIdRequest::CopyFrom(const WechatUserBindByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.WechatUserBindByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatUserBindByIdRequest::IsInitialized() const {
  return true;
}

void WechatUserBindByIdRequest::InternalSwap(WechatUserBindByIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WechatUserBindByIdRequest, _impl_.wechat_user_id_)
      + sizeof(WechatUserBindByIdRequest::_impl_.wechat_user_id_)
      - PROTOBUF_FIELD_OFFSET(WechatUserBindByIdRequest, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatUserBindByIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[90]);
}

// ===================================================================

class WechatUserBindByAccountRequest::_Internal {
 public:
};

WechatUserBindByAccountRequest::WechatUserBindByAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.WechatUserBindByAccountRequest)
}
WechatUserBindByAccountRequest::WechatUserBindByAccountRequest(const WechatUserBindByAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatUserBindByAccountRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.WechatUserBindByAccountRequest)
}

inline void WechatUserBindByAccountRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatUserBindByAccountRequest::~WechatUserBindByAccountRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.WechatUserBindByAccountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatUserBindByAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
  _impl_.password_.Destroy();
}

void WechatUserBindByAccountRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatUserBindByAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.WechatUserBindByAccountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatUserBindByAccountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatUserBindByAccountRequest.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatUserBindByAccountRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatUserBindByAccountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.WechatUserBindByAccountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatUserBindByAccountRequest.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatUserBindByAccountRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.WechatUserBindByAccountRequest)
  return target;
}

size_t WechatUserBindByAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.WechatUserBindByAccountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatUserBindByAccountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatUserBindByAccountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatUserBindByAccountRequest::GetClassData() const { return &_class_data_; }


void WechatUserBindByAccountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatUserBindByAccountRequest*>(&to_msg);
  auto& from = static_cast<const WechatUserBindByAccountRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.WechatUserBindByAccountRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatUserBindByAccountRequest::CopyFrom(const WechatUserBindByAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.WechatUserBindByAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatUserBindByAccountRequest::IsInitialized() const {
  return true;
}

void WechatUserBindByAccountRequest::InternalSwap(WechatUserBindByAccountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatUserBindByAccountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[91]);
}

// ===================================================================

class WechatUserQueryByOpenIdRequest::_Internal {
 public:
};

WechatUserQueryByOpenIdRequest::WechatUserQueryByOpenIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.WechatUserQueryByOpenIdRequest)
}
WechatUserQueryByOpenIdRequest::WechatUserQueryByOpenIdRequest(const WechatUserQueryByOpenIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatUserQueryByOpenIdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open_id().empty()) {
    _this->_impl_.open_id_.Set(from._internal_open_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.WechatUserQueryByOpenIdRequest)
}

inline void WechatUserQueryByOpenIdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatUserQueryByOpenIdRequest::~WechatUserQueryByOpenIdRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.WechatUserQueryByOpenIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatUserQueryByOpenIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.open_id_.Destroy();
}

void WechatUserQueryByOpenIdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatUserQueryByOpenIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.WechatUserQueryByOpenIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_id_.ClearToEmpty();
  _impl_.open_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatUserQueryByOpenIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatUserQueryByOpenIdRequest.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string open_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_open_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatUserQueryByOpenIdRequest.open_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatUserQueryByOpenIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.WechatUserQueryByOpenIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatUserQueryByOpenIdRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string open_id = 2;
  if (!this->_internal_open_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_id().data(), static_cast<int>(this->_internal_open_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatUserQueryByOpenIdRequest.open_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_open_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.WechatUserQueryByOpenIdRequest)
  return target;
}

size_t WechatUserQueryByOpenIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.WechatUserQueryByOpenIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string open_id = 2;
  if (!this->_internal_open_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatUserQueryByOpenIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatUserQueryByOpenIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatUserQueryByOpenIdRequest::GetClassData() const { return &_class_data_; }


void WechatUserQueryByOpenIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatUserQueryByOpenIdRequest*>(&to_msg);
  auto& from = static_cast<const WechatUserQueryByOpenIdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.WechatUserQueryByOpenIdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_open_id().empty()) {
    _this->_internal_set_open_id(from._internal_open_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatUserQueryByOpenIdRequest::CopyFrom(const WechatUserQueryByOpenIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.WechatUserQueryByOpenIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatUserQueryByOpenIdRequest::IsInitialized() const {
  return true;
}

void WechatUserQueryByOpenIdRequest::InternalSwap(WechatUserQueryByOpenIdRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_id_, lhs_arena,
      &other->_impl_.open_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatUserQueryByOpenIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[92]);
}

// ===================================================================

class WechatUserQueryByUnionIdRequest::_Internal {
 public:
};

WechatUserQueryByUnionIdRequest::WechatUserQueryByUnionIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.WechatUserQueryByUnionIdRequest)
}
WechatUserQueryByUnionIdRequest::WechatUserQueryByUnionIdRequest(const WechatUserQueryByUnionIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatUserQueryByUnionIdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.union_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_union_id().empty()) {
    _this->_impl_.union_id_.Set(from._internal_union_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.WechatUserQueryByUnionIdRequest)
}

inline void WechatUserQueryByUnionIdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.union_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatUserQueryByUnionIdRequest::~WechatUserQueryByUnionIdRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.WechatUserQueryByUnionIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatUserQueryByUnionIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.union_id_.Destroy();
}

void WechatUserQueryByUnionIdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatUserQueryByUnionIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.WechatUserQueryByUnionIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.union_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatUserQueryByUnionIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string union_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_union_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatUserQueryByUnionIdRequest.union_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatUserQueryByUnionIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.WechatUserQueryByUnionIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string union_id = 1;
  if (!this->_internal_union_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_union_id().data(), static_cast<int>(this->_internal_union_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatUserQueryByUnionIdRequest.union_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_union_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.WechatUserQueryByUnionIdRequest)
  return target;
}

size_t WechatUserQueryByUnionIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.WechatUserQueryByUnionIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string union_id = 1;
  if (!this->_internal_union_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_union_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatUserQueryByUnionIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatUserQueryByUnionIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatUserQueryByUnionIdRequest::GetClassData() const { return &_class_data_; }


void WechatUserQueryByUnionIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatUserQueryByUnionIdRequest*>(&to_msg);
  auto& from = static_cast<const WechatUserQueryByUnionIdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.WechatUserQueryByUnionIdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_union_id().empty()) {
    _this->_internal_set_union_id(from._internal_union_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatUserQueryByUnionIdRequest::CopyFrom(const WechatUserQueryByUnionIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.WechatUserQueryByUnionIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatUserQueryByUnionIdRequest::IsInitialized() const {
  return true;
}

void WechatUserQueryByUnionIdRequest::InternalSwap(WechatUserQueryByUnionIdRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.union_id_, lhs_arena,
      &other->_impl_.union_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatUserQueryByUnionIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[93]);
}

// ===================================================================

class WechatAllMiniProgramUserResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<WechatAllMiniProgramUserResponse_Item>()._impl_._has_bits_);
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_avatar_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WechatAllMiniProgramUserResponse_Item::WechatAllMiniProgramUserResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.WechatAllMiniProgramUserResponse.Item)
}
WechatAllMiniProgramUserResponse_Item::WechatAllMiniProgramUserResponse_Item(const WechatAllMiniProgramUserResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatAllMiniProgramUserResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_union_id().empty()) {
    _this->_impl_.union_id_.Set(from._internal_union_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open_id().empty()) {
    _this->_impl_.open_id_.Set(from._internal_open_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar_url()) {
    _this->_impl_.avatar_url_.Set(from._internal_avatar_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.WechatAllMiniProgramUserResponse.Item)
}

inline void WechatAllMiniProgramUserResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.user_id_){0}
  };
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatAllMiniProgramUserResponse_Item::~WechatAllMiniProgramUserResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.WechatAllMiniProgramUserResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatAllMiniProgramUserResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.union_id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.open_id_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.avatar_url_.Destroy();
}

void WechatAllMiniProgramUserResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatAllMiniProgramUserResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.WechatAllMiniProgramUserResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.union_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.open_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.nickname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.avatar_url_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.user_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatAllMiniProgramUserResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string union_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_union_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllMiniProgramUserResponse.Item.union_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllMiniProgramUserResponse.Item.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string open_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_open_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllMiniProgramUserResponse.Item.open_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllMiniProgramUserResponse.Item.nickname"));
        } else
          goto handle_unusual;
        continue;
      // optional string avatar_url = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllMiniProgramUserResponse.Item.avatar_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatAllMiniProgramUserResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.WechatAllMiniProgramUserResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // string union_id = 3;
  if (!this->_internal_union_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_union_id().data(), static_cast<int>(this->_internal_union_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllMiniProgramUserResponse.Item.union_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_union_id(), target);
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllMiniProgramUserResponse.Item.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // string open_id = 5;
  if (!this->_internal_open_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_id().data(), static_cast<int>(this->_internal_open_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllMiniProgramUserResponse.Item.open_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_open_id(), target);
  }

  // optional string nickname = 11;
  if (_internal_has_nickname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllMiniProgramUserResponse.Item.nickname");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_nickname(), target);
  }

  // optional string avatar_url = 12;
  if (_internal_has_avatar_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllMiniProgramUserResponse.Item.avatar_url");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_avatar_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.WechatAllMiniProgramUserResponse.Item)
  return target;
}

size_t WechatAllMiniProgramUserResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.WechatAllMiniProgramUserResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string union_id = 3;
  if (!this->_internal_union_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_union_id());
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string open_id = 5;
  if (!this->_internal_open_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string nickname = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional string avatar_url = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_avatar_url());
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatAllMiniProgramUserResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatAllMiniProgramUserResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatAllMiniProgramUserResponse_Item::GetClassData() const { return &_class_data_; }


void WechatAllMiniProgramUserResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatAllMiniProgramUserResponse_Item*>(&to_msg);
  auto& from = static_cast<const WechatAllMiniProgramUserResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.WechatAllMiniProgramUserResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_union_id().empty()) {
    _this->_internal_set_union_id(from._internal_union_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_open_id().empty()) {
    _this->_internal_set_open_id(from._internal_open_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_avatar_url(from._internal_avatar_url());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatAllMiniProgramUserResponse_Item::CopyFrom(const WechatAllMiniProgramUserResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.WechatAllMiniProgramUserResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatAllMiniProgramUserResponse_Item::IsInitialized() const {
  return true;
}

void WechatAllMiniProgramUserResponse_Item::InternalSwap(WechatAllMiniProgramUserResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.union_id_, lhs_arena,
      &other->_impl_.union_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_id_, lhs_arena,
      &other->_impl_.open_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_url_, lhs_arena,
      &other->_impl_.avatar_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WechatAllMiniProgramUserResponse_Item, _impl_.user_id_)
      + sizeof(WechatAllMiniProgramUserResponse_Item::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(WechatAllMiniProgramUserResponse_Item, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatAllMiniProgramUserResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[94]);
}

// ===================================================================

class WechatAllMiniProgramUserResponse::_Internal {
 public:
};

WechatAllMiniProgramUserResponse::WechatAllMiniProgramUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.WechatAllMiniProgramUserResponse)
}
WechatAllMiniProgramUserResponse::WechatAllMiniProgramUserResponse(const WechatAllMiniProgramUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatAllMiniProgramUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.WechatAllMiniProgramUserResponse)
}

inline void WechatAllMiniProgramUserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WechatAllMiniProgramUserResponse::~WechatAllMiniProgramUserResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.WechatAllMiniProgramUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatAllMiniProgramUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void WechatAllMiniProgramUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatAllMiniProgramUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.WechatAllMiniProgramUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatAllMiniProgramUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.WechatAllMiniProgramUserResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatAllMiniProgramUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.WechatAllMiniProgramUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.WechatAllMiniProgramUserResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.WechatAllMiniProgramUserResponse)
  return target;
}

size_t WechatAllMiniProgramUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.WechatAllMiniProgramUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.WechatAllMiniProgramUserResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatAllMiniProgramUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatAllMiniProgramUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatAllMiniProgramUserResponse::GetClassData() const { return &_class_data_; }


void WechatAllMiniProgramUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatAllMiniProgramUserResponse*>(&to_msg);
  auto& from = static_cast<const WechatAllMiniProgramUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.WechatAllMiniProgramUserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatAllMiniProgramUserResponse::CopyFrom(const WechatAllMiniProgramUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.WechatAllMiniProgramUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatAllMiniProgramUserResponse::IsInitialized() const {
  return true;
}

void WechatAllMiniProgramUserResponse::InternalSwap(WechatAllMiniProgramUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatAllMiniProgramUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[95]);
}

// ===================================================================

class WechatAllOauth2UserResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<WechatAllOauth2UserResponse_Item>()._impl_._has_bits_);
  static void set_has_head_img_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WechatAllOauth2UserResponse_Item::WechatAllOauth2UserResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.WechatAllOauth2UserResponse.Item)
}
WechatAllOauth2UserResponse_Item::WechatAllOauth2UserResponse_Item(const WechatAllOauth2UserResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatAllOauth2UserResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.privilege_){from._impl_.privilege_}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.head_img_url_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.sex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_union_id().empty()) {
    _this->_impl_.union_id_.Set(from._internal_union_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open_id().empty()) {
    _this->_impl_.open_id_.Set(from._internal_open_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_city().empty()) {
    _this->_impl_.city_.Set(from._internal_city(), 
      _this->GetArenaForAllocation());
  }
  _impl_.province_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.province_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_province().empty()) {
    _this->_impl_.province_.Set(from._internal_province(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.head_img_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.head_img_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_head_img_url()) {
    _this->_impl_.head_img_url_.Set(from._internal_head_img_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sex_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sex_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.WechatAllOauth2UserResponse.Item)
}

inline void WechatAllOauth2UserResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.privilege_){arena}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.head_img_url_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.user_id_){0}
    , decltype(_impl_.sex_){0}
  };
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.province_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.province_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.head_img_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.head_img_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatAllOauth2UserResponse_Item::~WechatAllOauth2UserResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.WechatAllOauth2UserResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatAllOauth2UserResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.privilege_.~RepeatedPtrField();
  _impl_.union_id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.open_id_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.city_.Destroy();
  _impl_.province_.Destroy();
  _impl_.country_.Destroy();
  _impl_.head_img_url_.Destroy();
  _impl_.lang_.Destroy();
}

void WechatAllOauth2UserResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatAllOauth2UserResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.WechatAllOauth2UserResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.privilege_.Clear();
  _impl_.union_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.open_id_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.city_.ClearToEmpty();
  _impl_.province_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.head_img_url_.ClearNonDefaultToEmpty();
  }
  _impl_.lang_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sex_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sex_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatAllOauth2UserResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string union_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_union_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllOauth2UserResponse.Item.union_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllOauth2UserResponse.Item.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string open_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_open_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllOauth2UserResponse.Item.open_id"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllOauth2UserResponse.Item.nickname"));
        } else
          goto handle_unusual;
        continue;
      // int32 sex = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string city = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_city();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllOauth2UserResponse.Item.city"));
        } else
          goto handle_unusual;
        continue;
      // string province = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_province();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllOauth2UserResponse.Item.province"));
        } else
          goto handle_unusual;
        continue;
      // string country = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllOauth2UserResponse.Item.country"));
        } else
          goto handle_unusual;
        continue;
      // optional string head_img_url = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_head_img_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllOauth2UserResponse.Item.head_img_url"));
        } else
          goto handle_unusual;
        continue;
      // repeated string privilege = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_privilege();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllOauth2UserResponse.Item.privilege"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string lang = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatAllOauth2UserResponse.Item.lang"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatAllOauth2UserResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.WechatAllOauth2UserResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // string union_id = 3;
  if (!this->_internal_union_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_union_id().data(), static_cast<int>(this->_internal_union_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllOauth2UserResponse.Item.union_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_union_id(), target);
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllOauth2UserResponse.Item.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // string open_id = 5;
  if (!this->_internal_open_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_id().data(), static_cast<int>(this->_internal_open_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllOauth2UserResponse.Item.open_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_open_id(), target);
  }

  // string nickname = 11;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllOauth2UserResponse.Item.nickname");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_nickname(), target);
  }

  // int32 sex = 12;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_sex(), target);
  }

  // string city = 13;
  if (!this->_internal_city().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllOauth2UserResponse.Item.city");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_city(), target);
  }

  // string province = 14;
  if (!this->_internal_province().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_province().data(), static_cast<int>(this->_internal_province().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllOauth2UserResponse.Item.province");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_province(), target);
  }

  // string country = 15;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllOauth2UserResponse.Item.country");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_country(), target);
  }

  // optional string head_img_url = 16;
  if (_internal_has_head_img_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_head_img_url().data(), static_cast<int>(this->_internal_head_img_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllOauth2UserResponse.Item.head_img_url");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_head_img_url(), target);
  }

  // repeated string privilege = 17;
  for (int i = 0, n = this->_internal_privilege_size(); i < n; i++) {
    const auto& s = this->_internal_privilege(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllOauth2UserResponse.Item.privilege");
    target = stream->WriteString(17, s, target);
  }

  // string lang = 18;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatAllOauth2UserResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_lang(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.WechatAllOauth2UserResponse.Item)
  return target;
}

size_t WechatAllOauth2UserResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.WechatAllOauth2UserResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string privilege = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.privilege_.size());
  for (int i = 0, n = _impl_.privilege_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.privilege_.Get(i));
  }

  // string union_id = 3;
  if (!this->_internal_union_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_union_id());
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string open_id = 5;
  if (!this->_internal_open_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_id());
  }

  // string nickname = 11;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string city = 13;
  if (!this->_internal_city().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string province = 14;
  if (!this->_internal_province().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_province());
  }

  // string country = 15;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // optional string head_img_url = 16;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head_img_url());
  }

  // string lang = 18;
  if (!this->_internal_lang().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }

  // int32 sex = 12;
  if (this->_internal_sex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatAllOauth2UserResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatAllOauth2UserResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatAllOauth2UserResponse_Item::GetClassData() const { return &_class_data_; }


void WechatAllOauth2UserResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatAllOauth2UserResponse_Item*>(&to_msg);
  auto& from = static_cast<const WechatAllOauth2UserResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.WechatAllOauth2UserResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.privilege_.MergeFrom(from._impl_.privilege_);
  if (!from._internal_union_id().empty()) {
    _this->_internal_set_union_id(from._internal_union_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_open_id().empty()) {
    _this->_internal_set_open_id(from._internal_open_id());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_city().empty()) {
    _this->_internal_set_city(from._internal_city());
  }
  if (!from._internal_province().empty()) {
    _this->_internal_set_province(from._internal_province());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (from._internal_has_head_img_url()) {
    _this->_internal_set_head_img_url(from._internal_head_img_url());
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_sex() != 0) {
    _this->_internal_set_sex(from._internal_sex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatAllOauth2UserResponse_Item::CopyFrom(const WechatAllOauth2UserResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.WechatAllOauth2UserResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatAllOauth2UserResponse_Item::IsInitialized() const {
  return true;
}

void WechatAllOauth2UserResponse_Item::InternalSwap(WechatAllOauth2UserResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.privilege_.InternalSwap(&other->_impl_.privilege_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.union_id_, lhs_arena,
      &other->_impl_.union_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_id_, lhs_arena,
      &other->_impl_.open_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.city_, lhs_arena,
      &other->_impl_.city_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.province_, lhs_arena,
      &other->_impl_.province_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.head_img_url_, lhs_arena,
      &other->_impl_.head_img_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WechatAllOauth2UserResponse_Item, _impl_.sex_)
      + sizeof(WechatAllOauth2UserResponse_Item::_impl_.sex_)
      - PROTOBUF_FIELD_OFFSET(WechatAllOauth2UserResponse_Item, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatAllOauth2UserResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[96]);
}

// ===================================================================

class WechatAllOauth2UserResponse::_Internal {
 public:
};

WechatAllOauth2UserResponse::WechatAllOauth2UserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.WechatAllOauth2UserResponse)
}
WechatAllOauth2UserResponse::WechatAllOauth2UserResponse(const WechatAllOauth2UserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatAllOauth2UserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.WechatAllOauth2UserResponse)
}

inline void WechatAllOauth2UserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WechatAllOauth2UserResponse::~WechatAllOauth2UserResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.WechatAllOauth2UserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatAllOauth2UserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void WechatAllOauth2UserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatAllOauth2UserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.WechatAllOauth2UserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatAllOauth2UserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.WechatAllOauth2UserResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatAllOauth2UserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.WechatAllOauth2UserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.WechatAllOauth2UserResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.WechatAllOauth2UserResponse)
  return target;
}

size_t WechatAllOauth2UserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.WechatAllOauth2UserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.WechatAllOauth2UserResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatAllOauth2UserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatAllOauth2UserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatAllOauth2UserResponse::GetClassData() const { return &_class_data_; }


void WechatAllOauth2UserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatAllOauth2UserResponse*>(&to_msg);
  auto& from = static_cast<const WechatAllOauth2UserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.WechatAllOauth2UserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatAllOauth2UserResponse::CopyFrom(const WechatAllOauth2UserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.WechatAllOauth2UserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatAllOauth2UserResponse::IsInitialized() const {
  return true;
}

void WechatAllOauth2UserResponse::InternalSwap(WechatAllOauth2UserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatAllOauth2UserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[97]);
}

// ===================================================================

class SignInByWechatOauth2Request::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const SignInByWechatOauth2Request* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SignInByWechatOauth2Request::_Internal::ttl(const SignInByWechatOauth2Request* msg) {
  return *msg->_impl_.ttl_;
}
void SignInByWechatOauth2Request::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
SignInByWechatOauth2Request::SignInByWechatOauth2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SignInByWechatOauth2Request)
}
SignInByWechatOauth2Request::SignInByWechatOauth2Request(const SignInByWechatOauth2Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignInByWechatOauth2Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  _this->_impl_.language_ = from._impl_.language_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SignInByWechatOauth2Request)
}

inline void SignInByWechatOauth2Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.language_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignInByWechatOauth2Request::~SignInByWechatOauth2Request() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SignInByWechatOauth2Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignInByWechatOauth2Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.state_.Destroy();
  _impl_.code_.Destroy();
  _impl_.app_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ttl_;
}

void SignInByWechatOauth2Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignInByWechatOauth2Request::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SignInByWechatOauth2Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  _impl_.language_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignInByWechatOauth2Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SignInByWechatOauth2Request.state"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SignInByWechatOauth2Request.code"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SignInByWechatOauth2Request.app_id"));
        } else
          goto handle_unusual;
        continue;
      // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignInByWechatOauth2Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SignInByWechatOauth2Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string state = 1;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SignInByWechatOauth2Request.state");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_state(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SignInByWechatOauth2Request.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string app_id = 3;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SignInByWechatOauth2Request.app_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_app_id(), target);
  }

  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 8;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_language(), target);
  }

  // .google.protobuf.Duration ttl = 11;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SignInByWechatOauth2Request)
  return target;
}

size_t SignInByWechatOauth2Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SignInByWechatOauth2Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string state = 1;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string app_id = 3;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // .google.protobuf.Duration ttl = 11;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 8;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignInByWechatOauth2Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignInByWechatOauth2Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignInByWechatOauth2Request::GetClassData() const { return &_class_data_; }


void SignInByWechatOauth2Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignInByWechatOauth2Request*>(&to_msg);
  auto& from = static_cast<const SignInByWechatOauth2Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SignInByWechatOauth2Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignInByWechatOauth2Request::CopyFrom(const SignInByWechatOauth2Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SignInByWechatOauth2Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInByWechatOauth2Request::IsInitialized() const {
  return true;
}

void SignInByWechatOauth2Request::InternalSwap(SignInByWechatOauth2Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignInByWechatOauth2Request, _impl_.language_)
      + sizeof(SignInByWechatOauth2Request::_impl_.language_)
      - PROTOBUF_FIELD_OFFSET(SignInByWechatOauth2Request, _impl_.ttl_)>(
          reinterpret_cast<char*>(&_impl_.ttl_),
          reinterpret_cast<char*>(&other->_impl_.ttl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignInByWechatOauth2Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[98]);
}

// ===================================================================

class WechatOauth2SignInStateResponse::_Internal {
 public:
};

WechatOauth2SignInStateResponse::WechatOauth2SignInStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.WechatOauth2SignInStateResponse)
}
WechatOauth2SignInStateResponse::WechatOauth2SignInStateResponse(const WechatOauth2SignInStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatOauth2SignInStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.WechatOauth2SignInStateResponse)
}

inline void WechatOauth2SignInStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatOauth2SignInStateResponse::~WechatOauth2SignInStateResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.WechatOauth2SignInStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatOauth2SignInStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.state_.Destroy();
}

void WechatOauth2SignInStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatOauth2SignInStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.WechatOauth2SignInStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatOauth2SignInStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatOauth2SignInStateResponse.state"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatOauth2SignInStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.WechatOauth2SignInStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string state = 1;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatOauth2SignInStateResponse.state");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.WechatOauth2SignInStateResponse)
  return target;
}

size_t WechatOauth2SignInStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.WechatOauth2SignInStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string state = 1;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatOauth2SignInStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatOauth2SignInStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatOauth2SignInStateResponse::GetClassData() const { return &_class_data_; }


void WechatOauth2SignInStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatOauth2SignInStateResponse*>(&to_msg);
  auto& from = static_cast<const WechatOauth2SignInStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.WechatOauth2SignInStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatOauth2SignInStateResponse::CopyFrom(const WechatOauth2SignInStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.WechatOauth2SignInStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatOauth2SignInStateResponse::IsInitialized() const {
  return true;
}

void WechatOauth2SignInStateResponse::InternalSwap(WechatOauth2SignInStateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatOauth2SignInStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[99]);
}

// ===================================================================

class WechatOauth2SignInUrlRequest::_Internal {
 public:
};

WechatOauth2SignInUrlRequest::WechatOauth2SignInUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.WechatOauth2SignInUrlRequest)
}
WechatOauth2SignInUrlRequest::WechatOauth2SignInUrlRequest(const WechatOauth2SignInUrlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatOauth2SignInUrlRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redirect_uri().empty()) {
    _this->_impl_.redirect_uri_.Set(from._internal_redirect_uri(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.language_ = from._impl_.language_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.WechatOauth2SignInUrlRequest)
}

inline void WechatOauth2SignInUrlRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.language_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatOauth2SignInUrlRequest::~WechatOauth2SignInUrlRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.WechatOauth2SignInUrlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatOauth2SignInUrlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.redirect_uri_.Destroy();
}

void WechatOauth2SignInUrlRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatOauth2SignInUrlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.WechatOauth2SignInUrlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_id_.ClearToEmpty();
  _impl_.redirect_uri_.ClearToEmpty();
  _impl_.language_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatOauth2SignInUrlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatOauth2SignInUrlRequest.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string redirect_uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_redirect_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatOauth2SignInUrlRequest.redirect_uri"));
        } else
          goto handle_unusual;
        continue;
      // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatOauth2SignInUrlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.WechatOauth2SignInUrlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatOauth2SignInUrlRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string redirect_uri = 2;
  if (!this->_internal_redirect_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redirect_uri().data(), static_cast<int>(this->_internal_redirect_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatOauth2SignInUrlRequest.redirect_uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_redirect_uri(), target);
  }

  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 3;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.WechatOauth2SignInUrlRequest)
  return target;
}

size_t WechatOauth2SignInUrlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.WechatOauth2SignInUrlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string redirect_uri = 2;
  if (!this->_internal_redirect_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redirect_uri());
  }

  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 3;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatOauth2SignInUrlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatOauth2SignInUrlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatOauth2SignInUrlRequest::GetClassData() const { return &_class_data_; }


void WechatOauth2SignInUrlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatOauth2SignInUrlRequest*>(&to_msg);
  auto& from = static_cast<const WechatOauth2SignInUrlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.WechatOauth2SignInUrlRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_redirect_uri().empty()) {
    _this->_internal_set_redirect_uri(from._internal_redirect_uri());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatOauth2SignInUrlRequest::CopyFrom(const WechatOauth2SignInUrlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.WechatOauth2SignInUrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatOauth2SignInUrlRequest::IsInitialized() const {
  return true;
}

void WechatOauth2SignInUrlRequest::InternalSwap(WechatOauth2SignInUrlRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redirect_uri_, lhs_arena,
      &other->_impl_.redirect_uri_, rhs_arena
  );
  swap(_impl_.language_, other->_impl_.language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatOauth2SignInUrlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[100]);
}

// ===================================================================

class WechatMiniProgramUser::_Internal {
 public:
  using HasBits = decltype(std::declval<WechatMiniProgramUser>()._impl_._has_bits_);
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_avatar_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WechatMiniProgramUser::WechatMiniProgramUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.WechatMiniProgramUser)
}
WechatMiniProgramUser::WechatMiniProgramUser(const WechatMiniProgramUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatMiniProgramUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.avatar_url_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open_id().empty()) {
    _this->_impl_.open_id_.Set(from._internal_open_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_union_id().empty()) {
    _this->_impl_.union_id_.Set(from._internal_union_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar_url()) {
    _this->_impl_.avatar_url_.Set(from._internal_avatar_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.WechatMiniProgramUser)
}

inline void WechatMiniProgramUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.avatar_url_){}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatMiniProgramUser::~WechatMiniProgramUser() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.WechatMiniProgramUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatMiniProgramUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.open_id_.Destroy();
  _impl_.union_id_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.avatar_url_.Destroy();
}

void WechatMiniProgramUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatMiniProgramUser::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.WechatMiniProgramUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_id_.ClearToEmpty();
  _impl_.open_id_.ClearToEmpty();
  _impl_.union_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.nickname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.avatar_url_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatMiniProgramUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatMiniProgramUser.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string open_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_open_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatMiniProgramUser.open_id"));
        } else
          goto handle_unusual;
        continue;
      // string union_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_union_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatMiniProgramUser.union_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatMiniProgramUser.nickname"));
        } else
          goto handle_unusual;
        continue;
      // optional string avatar_url = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.WechatMiniProgramUser.avatar_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatMiniProgramUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.WechatMiniProgramUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 11;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatMiniProgramUser.app_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_app_id(), target);
  }

  // string open_id = 12;
  if (!this->_internal_open_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_id().data(), static_cast<int>(this->_internal_open_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatMiniProgramUser.open_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_open_id(), target);
  }

  // string union_id = 13;
  if (!this->_internal_union_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_union_id().data(), static_cast<int>(this->_internal_union_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatMiniProgramUser.union_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_union_id(), target);
  }

  // optional string nickname = 21;
  if (_internal_has_nickname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatMiniProgramUser.nickname");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_nickname(), target);
  }

  // optional string avatar_url = 22;
  if (_internal_has_avatar_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.WechatMiniProgramUser.avatar_url");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_avatar_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.WechatMiniProgramUser)
  return target;
}

size_t WechatMiniProgramUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.WechatMiniProgramUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 11;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string open_id = 12;
  if (!this->_internal_open_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_id());
  }

  // string union_id = 13;
  if (!this->_internal_union_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_union_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string nickname = 21;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional string avatar_url = 22;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_avatar_url());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatMiniProgramUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatMiniProgramUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatMiniProgramUser::GetClassData() const { return &_class_data_; }


void WechatMiniProgramUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatMiniProgramUser*>(&to_msg);
  auto& from = static_cast<const WechatMiniProgramUser&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.WechatMiniProgramUser)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_open_id().empty()) {
    _this->_internal_set_open_id(from._internal_open_id());
  }
  if (!from._internal_union_id().empty()) {
    _this->_internal_set_union_id(from._internal_union_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_avatar_url(from._internal_avatar_url());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatMiniProgramUser::CopyFrom(const WechatMiniProgramUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.WechatMiniProgramUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatMiniProgramUser::IsInitialized() const {
  return true;
}

void WechatMiniProgramUser::InternalSwap(WechatMiniProgramUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_id_, lhs_arena,
      &other->_impl_.open_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.union_id_, lhs_arena,
      &other->_impl_.union_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_url_, lhs_arena,
      &other->_impl_.avatar_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatMiniProgramUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[101]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace fig
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::fig::v1::IdRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::IdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::IdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::Pager*
Arena::CreateMaybeMessage< ::palm::fig::v1::Pager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::Pager >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::Pagination*
Arena::CreateMaybeMessage< ::palm::fig::v1::Pagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::Pagination >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::MediaContent*
Arena::CreateMaybeMessage< ::palm::fig::v1::MediaContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::MediaContent >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserDetail*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::Oauth2State*
Arena::CreateMaybeMessage< ::palm::fig::v1::Oauth2State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::Oauth2State >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserProfile_PayloadEntry_DoNotUse*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserProfile_PayloadEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserProfile_PayloadEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserProfile*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserIndexResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserSetPasswordRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserSetPasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserSetPasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserChangePasswordRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserChangePasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserChangePasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserLogsRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserLogsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserLogsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserLogsResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserLogsResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserLogsResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserLogsResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserLogsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserLogsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserResetPasswordRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserResetPasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserResetPasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserTokenRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserQueryRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserSignUpByEmailRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserSignUpByEmailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserSignUpByEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserSignInByPasswordRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserSignInByPasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserSignInByPasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::UserSignInResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::UserSignInResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::UserSignInResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SettingSetRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SettingSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SettingSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SettingGetRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SettingGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SettingGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SettingByUserRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SettingByUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SettingByUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SettingsResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::SettingsResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SettingsResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SettingsResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::SettingsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SettingsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::LocaleByLangRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::LocaleByLangRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::LocaleByLangRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::LocaleGetRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::LocaleGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::LocaleGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::LocalesResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::LocalesResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::LocalesResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::LocalesResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::LocalesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::LocalesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::LocaleSetRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::LocaleSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::LocaleSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::IndexNowProfile*
Arena::CreateMaybeMessage< ::palm::fig::v1::IndexNowProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::IndexNowProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::IndexNowPingRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::IndexNowPingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::IndexNowPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SitemapPingRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SitemapPingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SitemapPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteMaintenanceModeRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteMaintenanceModeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteMaintenanceModeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteInstallRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteInstallRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteInstallRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::TwilioProfile*
Arena::CreateMaybeMessage< ::palm::fig::v1::TwilioProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::TwilioProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SmtpProfile*
Arena::CreateMaybeMessage< ::palm::fig::v1::SmtpProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SmtpProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::EmailTask_Address*
Arena::CreateMaybeMessage< ::palm::fig::v1::EmailTask_Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::EmailTask_Address >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::EmailTask_Body*
Arena::CreateMaybeMessage< ::palm::fig::v1::EmailTask_Body >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::EmailTask_Body >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::EmailTask_Attachment*
Arena::CreateMaybeMessage< ::palm::fig::v1::EmailTask_Attachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::EmailTask_Attachment >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::EmailTask*
Arena::CreateMaybeMessage< ::palm::fig::v1::EmailTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::EmailTask >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteTwilioPingRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteTwilioPingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteTwilioPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteSmtpPingRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteSmtpPingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteSmtpPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteSetLogoRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteSetLogoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteSetLogoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteSetCopyrightRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteSetCopyrightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteSetCopyrightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteSetKeywordsRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteSetKeywordsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteSetKeywordsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteSetInfoRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteSetInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteSetInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteLayoutResponse_Author*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteLayoutResponse_Author >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteLayoutResponse_Author >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteLayoutResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteLayoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteLayoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::GoogleProfile_ReCaptcha*
Arena::CreateMaybeMessage< ::palm::fig::v1::GoogleProfile_ReCaptcha >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::GoogleProfile_ReCaptcha >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::GoogleProfile*
Arena::CreateMaybeMessage< ::palm::fig::v1::GoogleProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::GoogleProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::BaiduProfile_SiteVerify*
Arena::CreateMaybeMessage< ::palm::fig::v1::BaiduProfile_SiteVerify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::BaiduProfile_SiteVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::BaiduProfile*
Arena::CreateMaybeMessage< ::palm::fig::v1::BaiduProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::BaiduProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SmsTask*
Arena::CreateMaybeMessage< ::palm::fig::v1::SmsTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SmsTask >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_Database*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_Database >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_Database >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_PostgreSql*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_PostgreSql >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_PostgreSql >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_MySql*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_MySql >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_MySql >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_Redis_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_Redis_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_Redis_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_Redis*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_Redis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_Redis >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_RabbitMq*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_RabbitMq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_RabbitMq >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_OpenSearch*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_OpenSearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_OpenSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_Health*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_Health >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_Health >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_System*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_System >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_System >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::ShorterLinkIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::ShorterLinkIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::ShorterLinkIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::ShorterLinkIndexResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::ShorterLinkIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::ShorterLinkIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::ShorterLinkCreateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::ShorterLinkCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::ShorterLinkCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::ShorterLinkUpdateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::ShorterLinkUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::ShorterLinkUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::TagIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::TagIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::TagIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::TagIndexResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::TagIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::TagIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::TagCreateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::TagCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::TagCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::TagUpdateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::TagUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::TagUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::CategoryIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::CategoryIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::CategoryIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::CategoryIndexResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::CategoryIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::CategoryIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::CategoryCreateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::CategoryCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::CategoryCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::CategoryUpdateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::CategoryUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::CategoryUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::NotificationIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::NotificationIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::NotificationIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::NotificationIndexResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::NotificationIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::NotificationIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::NotificationCreateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::NotificationCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::NotificationCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::NotificationUpdateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::NotificationUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::NotificationUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::AttachmentShowRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::AttachmentShowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::AttachmentShowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::AttachmentShowResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::AttachmentShowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::AttachmentShowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::AttachmentIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::AttachmentIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::AttachmentIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::AttachmentIndexResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::AttachmentIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::AttachmentIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::LeaveWordIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::LeaveWordIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::LeaveWordIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::LeaveWordIndexResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::LeaveWordIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::LeaveWordIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SignInByGoogleRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SignInByGoogleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SignInByGoogleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::GoogleSignInUrlRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::GoogleSignInUrlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::GoogleSignInUrlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::GoogleSignInUrlResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::GoogleSignInUrlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::GoogleSignInUrlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::WechatUserBindByIdRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::WechatUserBindByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::WechatUserBindByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::WechatUserBindByAccountRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::WechatUserBindByAccountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::WechatUserBindByAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::WechatUserQueryByOpenIdRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::WechatUserQueryByOpenIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::WechatUserQueryByOpenIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::WechatUserQueryByUnionIdRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::WechatUserQueryByUnionIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::WechatUserQueryByUnionIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::WechatAllMiniProgramUserResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::WechatAllMiniProgramUserResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::WechatAllMiniProgramUserResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::WechatAllMiniProgramUserResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::WechatAllMiniProgramUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::WechatAllMiniProgramUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::WechatAllOauth2UserResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::WechatAllOauth2UserResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::WechatAllOauth2UserResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::WechatAllOauth2UserResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::WechatAllOauth2UserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::WechatAllOauth2UserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SignInByWechatOauth2Request*
Arena::CreateMaybeMessage< ::palm::fig::v1::SignInByWechatOauth2Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SignInByWechatOauth2Request >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::WechatOauth2SignInStateResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::WechatOauth2SignInStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::WechatOauth2SignInStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::WechatOauth2SignInUrlRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::WechatOauth2SignInUrlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::WechatOauth2SignInUrlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::WechatMiniProgramUser*
Arena::CreateMaybeMessage< ::palm::fig::v1::WechatMiniProgramUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::WechatMiniProgramUser >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
