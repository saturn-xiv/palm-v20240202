// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metasequoia.proto

#include "metasequoia.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace metasequoia {
namespace v1 {
PROTOBUF_CONSTEXPR Permission::Permission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_.subject_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermissionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermissionDefaultTypeInternal() {}
  union {
    Permission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermissionDefaultTypeInternal _Permission_default_instance_;
PROTOBUF_CONSTEXPR Resource::Resource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceDefaultTypeInternal() {}
  union {
    Resource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceDefaultTypeInternal _Resource_default_instance_;
PROTOBUF_CONSTEXPR Role::Role(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.by_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RoleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleDefaultTypeInternal() {}
  union {
    Role _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleDefaultTypeInternal _Role_default_instance_;
PROTOBUF_CONSTEXPR User::User(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.by_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDefaultTypeInternal() {}
  union {
    User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDefaultTypeInternal _User_default_instance_;
PROTOBUF_CONSTEXPR RbacCanRequest::RbacCanRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_.user_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RbacCanRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RbacCanRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RbacCanRequestDefaultTypeInternal() {}
  union {
    RbacCanRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RbacCanRequestDefaultTypeInternal _RbacCanRequest_default_instance_;
PROTOBUF_CONSTEXPR RbacHasRequest::RbacHasRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_)*/nullptr
  , /*decltype(_impl_.user_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RbacHasRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RbacHasRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RbacHasRequestDefaultTypeInternal() {}
  union {
    RbacHasRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RbacHasRequestDefaultTypeInternal _RbacHasRequest_default_instance_;
PROTOBUF_CONSTEXPR RbacPermissionItem::RbacPermissionItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RbacPermissionItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RbacPermissionItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RbacPermissionItemDefaultTypeInternal() {}
  union {
    RbacPermissionItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RbacPermissionItemDefaultTypeInternal _RbacPermissionItem_default_instance_;
PROTOBUF_CONSTEXPR RbacPermissionsForUserRequest::RbacPermissionsForUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.permissions_)*/{}
  , /*decltype(_impl_.user_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RbacPermissionsForUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RbacPermissionsForUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RbacPermissionsForUserRequestDefaultTypeInternal() {}
  union {
    RbacPermissionsForUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RbacPermissionsForUserRequestDefaultTypeInternal _RbacPermissionsForUserRequest_default_instance_;
PROTOBUF_CONSTEXPR RbacPermissionsForRoleRequest::RbacPermissionsForRoleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.permissions_)*/{}
  , /*decltype(_impl_.role_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RbacPermissionsForRoleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RbacPermissionsForRoleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RbacPermissionsForRoleRequestDefaultTypeInternal() {}
  union {
    RbacPermissionsForRoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RbacPermissionsForRoleRequestDefaultTypeInternal _RbacPermissionsForRoleRequest_default_instance_;
PROTOBUF_CONSTEXPR RbacRolesForUserRequest::RbacRolesForUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roles_)*/{}
  , /*decltype(_impl_.user_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RbacRolesForUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RbacRolesForUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RbacRolesForUserRequestDefaultTypeInternal() {}
  union {
    RbacRolesForUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RbacRolesForUserRequestDefaultTypeInternal _RbacRolesForUserRequest_default_instance_;
PROTOBUF_CONSTEXPR RbacRolesResponse::RbacRolesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RbacRolesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RbacRolesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RbacRolesResponseDefaultTypeInternal() {}
  union {
    RbacRolesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RbacRolesResponseDefaultTypeInternal _RbacRolesResponse_default_instance_;
PROTOBUF_CONSTEXPR RbacPermissionsResponse::RbacPermissionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RbacPermissionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RbacPermissionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RbacPermissionsResponseDefaultTypeInternal() {}
  union {
    RbacPermissionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RbacPermissionsResponseDefaultTypeInternal _RbacPermissionsResponse_default_instance_;
PROTOBUF_CONSTEXPR RbacUsersResponse::RbacUsersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RbacUsersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RbacUsersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RbacUsersResponseDefaultTypeInternal() {}
  union {
    RbacUsersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RbacUsersResponseDefaultTypeInternal _RbacUsersResponse_default_instance_;
}  // namespace v1
}  // namespace metasequoia
}  // namespace palm
static ::_pb::Metadata file_level_metadata_metasequoia_2eproto[13];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_metasequoia_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_metasequoia_2eproto = nullptr;

const uint32_t TableStruct_metasequoia_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::Permission, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::Permission, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::Permission, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::Permission, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::Permission, _impl_.subject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::Resource, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::Resource, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::Resource, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::Role, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::Role, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::Role, _impl_.by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::User, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::User, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::User, _impl_.by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacCanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacCanRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacCanRequest, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacCanRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacHasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacHasRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacHasRequest, _impl_.role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacPermissionItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacPermissionItem, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacPermissionItem, _impl_.resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacPermissionsForUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacPermissionsForUserRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacPermissionsForUserRequest, _impl_.permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacPermissionsForRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacPermissionsForRoleRequest, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacPermissionsForRoleRequest, _impl_.permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacRolesForUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacRolesForUserRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacRolesForUserRequest, _impl_.roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacRolesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacRolesResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacPermissionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacPermissionsResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::metasequoia::v1::RbacUsersResponse, _impl_.items_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::metasequoia::v1::Permission)},
  { 11, -1, -1, sizeof(::palm::metasequoia::v1::Resource)},
  { 21, -1, -1, sizeof(::palm::metasequoia::v1::Role)},
  { 31, -1, -1, sizeof(::palm::metasequoia::v1::User)},
  { 40, -1, -1, sizeof(::palm::metasequoia::v1::RbacCanRequest)},
  { 49, -1, -1, sizeof(::palm::metasequoia::v1::RbacHasRequest)},
  { 57, -1, -1, sizeof(::palm::metasequoia::v1::RbacPermissionItem)},
  { 65, -1, -1, sizeof(::palm::metasequoia::v1::RbacPermissionsForUserRequest)},
  { 73, -1, -1, sizeof(::palm::metasequoia::v1::RbacPermissionsForRoleRequest)},
  { 81, -1, -1, sizeof(::palm::metasequoia::v1::RbacRolesForUserRequest)},
  { 89, -1, -1, sizeof(::palm::metasequoia::v1::RbacRolesResponse)},
  { 96, -1, -1, sizeof(::palm::metasequoia::v1::RbacPermissionsResponse)},
  { 103, -1, -1, sizeof(::palm::metasequoia::v1::RbacUsersResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::metasequoia::v1::_Permission_default_instance_._instance,
  &::palm::metasequoia::v1::_Resource_default_instance_._instance,
  &::palm::metasequoia::v1::_Role_default_instance_._instance,
  &::palm::metasequoia::v1::_User_default_instance_._instance,
  &::palm::metasequoia::v1::_RbacCanRequest_default_instance_._instance,
  &::palm::metasequoia::v1::_RbacHasRequest_default_instance_._instance,
  &::palm::metasequoia::v1::_RbacPermissionItem_default_instance_._instance,
  &::palm::metasequoia::v1::_RbacPermissionsForUserRequest_default_instance_._instance,
  &::palm::metasequoia::v1::_RbacPermissionsForRoleRequest_default_instance_._instance,
  &::palm::metasequoia::v1::_RbacRolesForUserRequest_default_instance_._instance,
  &::palm::metasequoia::v1::_RbacRolesResponse_default_instance_._instance,
  &::palm::metasequoia::v1::_RbacPermissionsResponse_default_instance_._instance,
  &::palm::metasequoia::v1::_RbacUsersResponse_default_instance_._instance,
};

const char descriptor_table_protodef_metasequoia_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021metasequoia.proto\022\023palm.metasequoia.v1"
  "\032\033google/protobuf/empty.proto\"\221\001\n\nPermis"
  "sion\022\016\n\004user\030\001 \001(\005H\000\022)\n\004role\030\002 \001(\0132\031.pal"
  "m.metasequoia.v1.RoleH\000\022-\n\006object\030\013 \001(\0132"
  "\035.palm.metasequoia.v1.Resource\022\016\n\006action"
  "\030\014 \001(\tB\t\n\007subject\"8\n\010Resource\022\013\n\001s\030\001 \001(\t"
  "H\000\022\013\n\001i\030\002 \001(\005H\000\022\014\n\004type\030\013 \001(\tB\004\n\002id\"u\n\004R"
  "ole\022/\n\radministrator\030\001 \001(\0132\026.google.prot"
  "obuf.EmptyH\000\022&\n\004root\030\002 \001(\0132\026.google.prot"
  "obuf.EmptyH\000\022\016\n\004code\030\003 \001(\tH\000B\004\n\002by\"*\n\004Us"
  "er\022\014\n\002id\030\001 \001(\005H\000\022\016\n\004code\030\002 \001(\tH\000B\004\n\002by\"]"
  "\n\016RbacCanRequest\022\014\n\004user\030\001 \001(\005\022-\n\006object"
  "\030\002 \001(\0132\035.palm.metasequoia.v1.Resource\022\016\n"
  "\006action\030\003 \001(\t\"G\n\016RbacHasRequest\022\014\n\004user\030"
  "\001 \001(\005\022\'\n\004role\030\002 \001(\0132\031.palm.metasequoia.v"
  "1.Role\"U\n\022RbacPermissionItem\022\016\n\006action\030\001"
  " \001(\t\022/\n\010resource\030\002 \001(\0132\035.palm.metasequoi"
  "a.v1.Resource\"k\n\035RbacPermissionsForUserR"
  "equest\022\014\n\004user\030\001 \001(\005\022<\n\013permissions\030\002 \003("
  "\0132\'.palm.metasequoia.v1.RbacPermissionIt"
  "em\"\206\001\n\035RbacPermissionsForRoleRequest\022\'\n\004"
  "role\030\001 \001(\0132\031.palm.metasequoia.v1.Role\022<\n"
  "\013permissions\030\002 \003(\0132\'.palm.metasequoia.v1"
  ".RbacPermissionItem\"Q\n\027RbacRolesForUserR"
  "equest\022\014\n\004user\030\001 \001(\005\022(\n\005roles\030\002 \003(\0132\031.pa"
  "lm.metasequoia.v1.Role\"=\n\021RbacRolesRespo"
  "nse\022(\n\005items\030\001 \003(\0132\031.palm.metasequoia.v1"
  ".Role\"I\n\027RbacPermissionsResponse\022.\n\005item"
  "s\030\001 \003(\0132\037.palm.metasequoia.v1.Permission"
  "\"=\n\021RbacUsersResponse\022(\n\005items\030\001 \003(\0132\031.p"
  "alm.metasequoia.v1.User2\255\n\n\004Rbac\022D\n\003Can\022"
  "#.palm.metasequoia.v1.RbacCanRequest\032\026.g"
  "oogle.protobuf.Empty\"\000\022D\n\003Has\022#.palm.met"
  "asequoia.v1.RbacHasRequest\032\026.google.prot"
  "obuf.Empty\"\000\022V\n\017GetRolesForUser\022\031.palm.m"
  "etasequoia.v1.User\032&.palm.metasequoia.v1"
  ".RbacRolesResponse\"\000\022^\n\027GetImplicitRoles"
  "ForUser\022\031.palm.metasequoia.v1.User\032&.pal"
  "m.metasequoia.v1.RbacRolesResponse\"\000\022V\n\017"
  "GetUsersForRole\022\031.palm.metasequoia.v1.Ro"
  "le\032&.palm.metasequoia.v1.RbacUsersRespon"
  "se\"\000\022^\n\027GetImplicitUsersForRole\022\031.palm.m"
  "etasequoia.v1.Role\032&.palm.metasequoia.v1"
  ".RbacUsersResponse\"\000\022Y\n\017AddRolesForUser\022"
  ",.palm.metasequoia.v1.RbacRolesForUserRe"
  "quest\032\026.google.protobuf.Empty\"\000\022\\\n\022Delet"
  "eRolesForUser\022,.palm.metasequoia.v1.Rbac"
  "RolesForUserRequest\032\026.google.protobuf.Em"
  "pty\"\000\022e\n\025AddPermissionsForRole\0222.palm.me"
  "tasequoia.v1.RbacPermissionsForRoleReque"
  "st\032\026.google.protobuf.Empty\"\000\022h\n\030DeletePe"
  "rmissionsForRole\0222.palm.metasequoia.v1.R"
  "bacPermissionsForRoleRequest\032\026.google.pr"
  "otobuf.Empty\"\000\022b\n\025GetPermissionsForUser\022"
  "\031.palm.metasequoia.v1.User\032,.palm.metase"
  "quoia.v1.RbacPermissionsResponse\"\000\022j\n\035Ge"
  "tImplicitPermissionsForUser\022\031.palm.metas"
  "equoia.v1.User\032,.palm.metasequoia.v1.Rba"
  "cPermissionsResponse\"\000\022e\n\025AddPermissions"
  "ForUser\0222.palm.metasequoia.v1.RbacPermis"
  "sionsForUserRequest\032\026.google.protobuf.Em"
  "pty\"\000\022h\n\030DeletePermissionsForUser\0222.palm"
  ".metasequoia.v1.RbacPermissionsForUserRe"
  "quest\032\026.google.protobuf.Empty\"\000B`\n1com.g"
  "ithub.saturn_xiv.palm.plugins.metasequoi"
  "a.v1P\001Z)github.com/saturn_xiv/palm/metas"
  "equoia/v2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_metasequoia_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_metasequoia_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_metasequoia_2eproto = {
    false, false, 2657, descriptor_table_protodef_metasequoia_2eproto,
    "metasequoia.proto",
    &descriptor_table_metasequoia_2eproto_once, descriptor_table_metasequoia_2eproto_deps, 1, 13,
    schemas, file_default_instances, TableStruct_metasequoia_2eproto::offsets,
    file_level_metadata_metasequoia_2eproto, file_level_enum_descriptors_metasequoia_2eproto,
    file_level_service_descriptors_metasequoia_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_metasequoia_2eproto_getter() {
  return &descriptor_table_metasequoia_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_metasequoia_2eproto(&descriptor_table_metasequoia_2eproto);
namespace palm {
namespace metasequoia {
namespace v1 {

// ===================================================================

class Permission::_Internal {
 public:
  static const ::palm::metasequoia::v1::Role& role(const Permission* msg);
  static const ::palm::metasequoia::v1::Resource& object(const Permission* msg);
};

const ::palm::metasequoia::v1::Role&
Permission::_Internal::role(const Permission* msg) {
  return *msg->_impl_.subject_.role_;
}
const ::palm::metasequoia::v1::Resource&
Permission::_Internal::object(const Permission* msg) {
  return *msg->_impl_.object_;
}
void Permission::set_allocated_role(::palm::metasequoia::v1::Role* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_subject();
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    set_has_role();
    _impl_.subject_.role_ = role;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.metasequoia.v1.Permission.role)
}
Permission::Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.metasequoia.v1.Permission)
}
Permission::Permission(const Permission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Permission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.subject_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::palm::metasequoia::v1::Resource(*from._impl_.object_);
  }
  clear_has_subject();
  switch (from.subject_case()) {
    case kUser: {
      _this->_internal_set_user(from._internal_user());
      break;
    }
    case kRole: {
      _this->_internal_mutable_role()->::palm::metasequoia::v1::Role::MergeFrom(
          from._internal_role());
      break;
    }
    case SUBJECT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.metasequoia.v1.Permission)
}

inline void Permission::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.subject_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_subject();
}

Permission::~Permission() {
  // @@protoc_insertion_point(destructor:palm.metasequoia.v1.Permission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Permission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.object_;
  if (has_subject()) {
    clear_subject();
  }
}

void Permission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Permission::clear_subject() {
// @@protoc_insertion_point(one_of_clear_start:palm.metasequoia.v1.Permission)
  switch (subject_case()) {
    case kUser: {
      // No need to clear
      break;
    }
    case kRole: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.subject_.role_;
      }
      break;
    }
    case SUBJECT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUBJECT_NOT_SET;
}


void Permission::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.metasequoia.v1.Permission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
  clear_subject();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Permission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_user(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.metasequoia.v1.Role role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.metasequoia.v1.Resource object = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string action = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.metasequoia.v1.Permission.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Permission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.metasequoia.v1.Permission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user(), target);
  }

  // .palm.metasequoia.v1.Role role = 2;
  if (_internal_has_role()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::role(this),
        _Internal::role(this).GetCachedSize(), target, stream);
  }

  // .palm.metasequoia.v1.Resource object = 11;
  if (this->_internal_has_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  // string action = 12;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.metasequoia.v1.Permission.action");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.metasequoia.v1.Permission)
  return target;
}

size_t Permission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.metasequoia.v1.Permission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 12;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .palm.metasequoia.v1.Resource object = 11;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  switch (subject_case()) {
    // int32 user = 1;
    case kUser: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user());
      break;
    }
    // .palm.metasequoia.v1.Role role = 2;
    case kRole: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.subject_.role_);
      break;
    }
    case SUBJECT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Permission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Permission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Permission::GetClassData() const { return &_class_data_; }


void Permission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Permission*>(&to_msg);
  auto& from = static_cast<const Permission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.metasequoia.v1.Permission)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_object()) {
    _this->_internal_mutable_object()->::palm::metasequoia::v1::Resource::MergeFrom(
        from._internal_object());
  }
  switch (from.subject_case()) {
    case kUser: {
      _this->_internal_set_user(from._internal_user());
      break;
    }
    case kRole: {
      _this->_internal_mutable_role()->::palm::metasequoia::v1::Role::MergeFrom(
          from._internal_role());
      break;
    }
    case SUBJECT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Permission::CopyFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.metasequoia.v1.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Permission::IsInitialized() const {
  return true;
}

void Permission::InternalSwap(Permission* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.object_, other->_impl_.object_);
  swap(_impl_.subject_, other->_impl_.subject_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Permission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metasequoia_2eproto_getter, &descriptor_table_metasequoia_2eproto_once,
      file_level_metadata_metasequoia_2eproto[0]);
}

// ===================================================================

class Resource::_Internal {
 public:
};

Resource::Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.metasequoia.v1.Resource)
}
Resource::Resource(const Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Resource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  clear_has_id();
  switch (from.id_case()) {
    case kS: {
      _this->_internal_set_s(from._internal_s());
      break;
    }
    case kI: {
      _this->_internal_set_i(from._internal_i());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.metasequoia.v1.Resource)
}

inline void Resource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_id();
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:palm.metasequoia.v1.Resource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Resource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  if (has_id()) {
    clear_id();
  }
}

void Resource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Resource::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:palm.metasequoia.v1.Resource)
  switch (id_case()) {
    case kS: {
      _impl_.id_.s_.Destroy();
      break;
    }
    case kI: {
      // No need to clear
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ID_NOT_SET;
}


void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.metasequoia.v1.Resource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  clear_id();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Resource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.metasequoia.v1.Resource.s"));
        } else
          goto handle_unusual;
        continue;
      // int32 i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.metasequoia.v1.Resource.type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Resource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.metasequoia.v1.Resource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s = 1;
  if (_internal_has_s()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.metasequoia.v1.Resource.s");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s(), target);
  }

  // int32 i = 2;
  if (_internal_has_i()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_i(), target);
  }

  // string type = 11;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.metasequoia.v1.Resource.type");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.metasequoia.v1.Resource)
  return target;
}

size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.metasequoia.v1.Resource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 11;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  switch (id_case()) {
    // string s = 1;
    case kS: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_s());
      break;
    }
    // int32 i = 2;
    case kI: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Resource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Resource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Resource::GetClassData() const { return &_class_data_; }


void Resource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Resource*>(&to_msg);
  auto& from = static_cast<const Resource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.metasequoia.v1.Resource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.id_case()) {
    case kS: {
      _this->_internal_set_s(from._internal_s());
      break;
    }
    case kI: {
      _this->_internal_set_i(from._internal_i());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.metasequoia.v1.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  return true;
}

void Resource::InternalSwap(Resource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Resource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metasequoia_2eproto_getter, &descriptor_table_metasequoia_2eproto_once,
      file_level_metadata_metasequoia_2eproto[1]);
}

// ===================================================================

class Role::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Empty& administrator(const Role* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Empty& root(const Role* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Empty&
Role::_Internal::administrator(const Role* msg) {
  return *msg->_impl_.by_.administrator_;
}
const ::PROTOBUF_NAMESPACE_ID::Empty&
Role::_Internal::root(const Role* msg) {
  return *msg->_impl_.by_.root_;
}
void Role::set_allocated_administrator(::PROTOBUF_NAMESPACE_ID::Empty* administrator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_by();
  if (administrator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(administrator));
    if (message_arena != submessage_arena) {
      administrator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, administrator, submessage_arena);
    }
    set_has_administrator();
    _impl_.by_.administrator_ = administrator;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.metasequoia.v1.Role.administrator)
}
void Role::clear_administrator() {
  if (_internal_has_administrator()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.by_.administrator_;
    }
    clear_has_by();
  }
}
void Role::set_allocated_root(::PROTOBUF_NAMESPACE_ID::Empty* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_by();
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root));
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    set_has_root();
    _impl_.by_.root_ = root;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.metasequoia.v1.Role.root)
}
void Role::clear_root() {
  if (_internal_has_root()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.by_.root_;
    }
    clear_has_by();
  }
}
Role::Role(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.metasequoia.v1.Role)
}
Role::Role(const Role& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Role* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_by();
  switch (from.by_case()) {
    case kAdministrator: {
      _this->_internal_mutable_administrator()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_administrator());
      break;
    }
    case kRoot: {
      _this->_internal_mutable_root()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_root());
      break;
    }
    case kCode: {
      _this->_internal_set_code(from._internal_code());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.metasequoia.v1.Role)
}

inline void Role::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_by();
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:palm.metasequoia.v1.Role)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Role::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_by()) {
    clear_by();
  }
}

void Role::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Role::clear_by() {
// @@protoc_insertion_point(one_of_clear_start:palm.metasequoia.v1.Role)
  switch (by_case()) {
    case kAdministrator: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.by_.administrator_;
      }
      break;
    }
    case kRoot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.by_.root_;
      }
      break;
    }
    case kCode: {
      _impl_.by_.code_.Destroy();
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = BY_NOT_SET;
}


void Role::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.metasequoia.v1.Role)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_by();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Role::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Empty administrator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_administrator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Empty root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.metasequoia.v1.Role.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Role::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.metasequoia.v1.Role)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Empty administrator = 1;
  if (_internal_has_administrator()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::administrator(this),
        _Internal::administrator(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Empty root = 2;
  if (_internal_has_root()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::root(this),
        _Internal::root(this).GetCachedSize(), target, stream);
  }

  // string code = 3;
  if (_internal_has_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.metasequoia.v1.Role.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.metasequoia.v1.Role)
  return target;
}

size_t Role::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.metasequoia.v1.Role)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (by_case()) {
    // .google.protobuf.Empty administrator = 1;
    case kAdministrator: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.by_.administrator_);
      break;
    }
    // .google.protobuf.Empty root = 2;
    case kRoot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.by_.root_);
      break;
    }
    // string code = 3;
    case kCode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Role::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Role::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Role::GetClassData() const { return &_class_data_; }


void Role::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Role*>(&to_msg);
  auto& from = static_cast<const Role&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.metasequoia.v1.Role)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.by_case()) {
    case kAdministrator: {
      _this->_internal_mutable_administrator()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_administrator());
      break;
    }
    case kRoot: {
      _this->_internal_mutable_root()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_root());
      break;
    }
    case kCode: {
      _this->_internal_set_code(from._internal_code());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Role::CopyFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.metasequoia.v1.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  return true;
}

void Role::InternalSwap(Role* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.by_, other->_impl_.by_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Role::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metasequoia_2eproto_getter, &descriptor_table_metasequoia_2eproto_once,
      file_level_metadata_metasequoia_2eproto[2]);
}

// ===================================================================

class User::_Internal {
 public:
};

User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.metasequoia.v1.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  User* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_by();
  switch (from.by_case()) {
    case kId: {
      _this->_internal_set_id(from._internal_id());
      break;
    }
    case kCode: {
      _this->_internal_set_code(from._internal_code());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.metasequoia.v1.User)
}

inline void User::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_by();
}

User::~User() {
  // @@protoc_insertion_point(destructor:palm.metasequoia.v1.User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_by()) {
    clear_by();
  }
}

void User::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void User::clear_by() {
// @@protoc_insertion_point(one_of_clear_start:palm.metasequoia.v1.User)
  switch (by_case()) {
    case kId: {
      // No need to clear
      break;
    }
    case kCode: {
      _impl_.by_.code_.Destroy();
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = BY_NOT_SET;
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.metasequoia.v1.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_by();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.metasequoia.v1.User.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.metasequoia.v1.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string code = 2;
  if (_internal_has_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.metasequoia.v1.User.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.metasequoia.v1.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.metasequoia.v1.User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (by_case()) {
    // int32 id = 1;
    case kId: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
      break;
    }
    // string code = 2;
    case kCode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User::GetClassData() const { return &_class_data_; }


void User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<User*>(&to_msg);
  auto& from = static_cast<const User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.metasequoia.v1.User)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.by_case()) {
    case kId: {
      _this->_internal_set_id(from._internal_id());
      break;
    }
    case kCode: {
      _this->_internal_set_code(from._internal_code());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.metasequoia.v1.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.by_, other->_impl_.by_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metasequoia_2eproto_getter, &descriptor_table_metasequoia_2eproto_once,
      file_level_metadata_metasequoia_2eproto[3]);
}

// ===================================================================

class RbacCanRequest::_Internal {
 public:
  static const ::palm::metasequoia::v1::Resource& object(const RbacCanRequest* msg);
};

const ::palm::metasequoia::v1::Resource&
RbacCanRequest::_Internal::object(const RbacCanRequest* msg) {
  return *msg->_impl_.object_;
}
RbacCanRequest::RbacCanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.metasequoia.v1.RbacCanRequest)
}
RbacCanRequest::RbacCanRequest(const RbacCanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RbacCanRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::palm::metasequoia::v1::Resource(*from._impl_.object_);
  }
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.metasequoia.v1.RbacCanRequest)
}

inline void RbacCanRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.user_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RbacCanRequest::~RbacCanRequest() {
  // @@protoc_insertion_point(destructor:palm.metasequoia.v1.RbacCanRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RbacCanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.object_;
}

void RbacCanRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RbacCanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.metasequoia.v1.RbacCanRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RbacCanRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.metasequoia.v1.Resource object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.metasequoia.v1.RbacCanRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RbacCanRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.metasequoia.v1.RbacCanRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user(), target);
  }

  // .palm.metasequoia.v1.Resource object = 2;
  if (this->_internal_has_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.metasequoia.v1.RbacCanRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.metasequoia.v1.RbacCanRequest)
  return target;
}

size_t RbacCanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.metasequoia.v1.RbacCanRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .palm.metasequoia.v1.Resource object = 2;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RbacCanRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RbacCanRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RbacCanRequest::GetClassData() const { return &_class_data_; }


void RbacCanRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RbacCanRequest*>(&to_msg);
  auto& from = static_cast<const RbacCanRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.metasequoia.v1.RbacCanRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_object()) {
    _this->_internal_mutable_object()->::palm::metasequoia::v1::Resource::MergeFrom(
        from._internal_object());
  }
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RbacCanRequest::CopyFrom(const RbacCanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.metasequoia.v1.RbacCanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RbacCanRequest::IsInitialized() const {
  return true;
}

void RbacCanRequest::InternalSwap(RbacCanRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RbacCanRequest, _impl_.user_)
      + sizeof(RbacCanRequest::_impl_.user_)
      - PROTOBUF_FIELD_OFFSET(RbacCanRequest, _impl_.object_)>(
          reinterpret_cast<char*>(&_impl_.object_),
          reinterpret_cast<char*>(&other->_impl_.object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RbacCanRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metasequoia_2eproto_getter, &descriptor_table_metasequoia_2eproto_once,
      file_level_metadata_metasequoia_2eproto[4]);
}

// ===================================================================

class RbacHasRequest::_Internal {
 public:
  static const ::palm::metasequoia::v1::Role& role(const RbacHasRequest* msg);
};

const ::palm::metasequoia::v1::Role&
RbacHasRequest::_Internal::role(const RbacHasRequest* msg) {
  return *msg->_impl_.role_;
}
RbacHasRequest::RbacHasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.metasequoia.v1.RbacHasRequest)
}
RbacHasRequest::RbacHasRequest(const RbacHasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RbacHasRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_){nullptr}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    _this->_impl_.role_ = new ::palm::metasequoia::v1::Role(*from._impl_.role_);
  }
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.metasequoia.v1.RbacHasRequest)
}

inline void RbacHasRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_){nullptr}
    , decltype(_impl_.user_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RbacHasRequest::~RbacHasRequest() {
  // @@protoc_insertion_point(destructor:palm.metasequoia.v1.RbacHasRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RbacHasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.role_;
}

void RbacHasRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RbacHasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.metasequoia.v1.RbacHasRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.role_ != nullptr) {
    delete _impl_.role_;
  }
  _impl_.role_ = nullptr;
  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RbacHasRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.metasequoia.v1.Role role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RbacHasRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.metasequoia.v1.RbacHasRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user(), target);
  }

  // .palm.metasequoia.v1.Role role = 2;
  if (this->_internal_has_role()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::role(this),
        _Internal::role(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.metasequoia.v1.RbacHasRequest)
  return target;
}

size_t RbacHasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.metasequoia.v1.RbacHasRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .palm.metasequoia.v1.Role role = 2;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.role_);
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RbacHasRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RbacHasRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RbacHasRequest::GetClassData() const { return &_class_data_; }


void RbacHasRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RbacHasRequest*>(&to_msg);
  auto& from = static_cast<const RbacHasRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.metasequoia.v1.RbacHasRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _this->_internal_mutable_role()->::palm::metasequoia::v1::Role::MergeFrom(
        from._internal_role());
  }
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RbacHasRequest::CopyFrom(const RbacHasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.metasequoia.v1.RbacHasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RbacHasRequest::IsInitialized() const {
  return true;
}

void RbacHasRequest::InternalSwap(RbacHasRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RbacHasRequest, _impl_.user_)
      + sizeof(RbacHasRequest::_impl_.user_)
      - PROTOBUF_FIELD_OFFSET(RbacHasRequest, _impl_.role_)>(
          reinterpret_cast<char*>(&_impl_.role_),
          reinterpret_cast<char*>(&other->_impl_.role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RbacHasRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metasequoia_2eproto_getter, &descriptor_table_metasequoia_2eproto_once,
      file_level_metadata_metasequoia_2eproto[5]);
}

// ===================================================================

class RbacPermissionItem::_Internal {
 public:
  static const ::palm::metasequoia::v1::Resource& resource(const RbacPermissionItem* msg);
};

const ::palm::metasequoia::v1::Resource&
RbacPermissionItem::_Internal::resource(const RbacPermissionItem* msg) {
  return *msg->_impl_.resource_;
}
RbacPermissionItem::RbacPermissionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.metasequoia.v1.RbacPermissionItem)
}
RbacPermissionItem::RbacPermissionItem(const RbacPermissionItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RbacPermissionItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , decltype(_impl_.resource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::palm::metasequoia::v1::Resource(*from._impl_.resource_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.metasequoia.v1.RbacPermissionItem)
}

inline void RbacPermissionItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , decltype(_impl_.resource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RbacPermissionItem::~RbacPermissionItem() {
  // @@protoc_insertion_point(destructor:palm.metasequoia.v1.RbacPermissionItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RbacPermissionItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resource_;
}

void RbacPermissionItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RbacPermissionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.metasequoia.v1.RbacPermissionItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RbacPermissionItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.metasequoia.v1.RbacPermissionItem.action"));
        } else
          goto handle_unusual;
        continue;
      // .palm.metasequoia.v1.Resource resource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RbacPermissionItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.metasequoia.v1.RbacPermissionItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string action = 1;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.metasequoia.v1.RbacPermissionItem.action");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action(), target);
  }

  // .palm.metasequoia.v1.Resource resource = 2;
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.metasequoia.v1.RbacPermissionItem)
  return target;
}

size_t RbacPermissionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.metasequoia.v1.RbacPermissionItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 1;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .palm.metasequoia.v1.Resource resource = 2;
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RbacPermissionItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RbacPermissionItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RbacPermissionItem::GetClassData() const { return &_class_data_; }


void RbacPermissionItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RbacPermissionItem*>(&to_msg);
  auto& from = static_cast<const RbacPermissionItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.metasequoia.v1.RbacPermissionItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::palm::metasequoia::v1::Resource::MergeFrom(
        from._internal_resource());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RbacPermissionItem::CopyFrom(const RbacPermissionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.metasequoia.v1.RbacPermissionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RbacPermissionItem::IsInitialized() const {
  return true;
}

void RbacPermissionItem::InternalSwap(RbacPermissionItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.resource_, other->_impl_.resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RbacPermissionItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metasequoia_2eproto_getter, &descriptor_table_metasequoia_2eproto_once,
      file_level_metadata_metasequoia_2eproto[6]);
}

// ===================================================================

class RbacPermissionsForUserRequest::_Internal {
 public:
};

RbacPermissionsForUserRequest::RbacPermissionsForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.metasequoia.v1.RbacPermissionsForUserRequest)
}
RbacPermissionsForUserRequest::RbacPermissionsForUserRequest(const RbacPermissionsForUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RbacPermissionsForUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.permissions_){from._impl_.permissions_}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.metasequoia.v1.RbacPermissionsForUserRequest)
}

inline void RbacPermissionsForUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.permissions_){arena}
    , decltype(_impl_.user_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RbacPermissionsForUserRequest::~RbacPermissionsForUserRequest() {
  // @@protoc_insertion_point(destructor:palm.metasequoia.v1.RbacPermissionsForUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RbacPermissionsForUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.permissions_.~RepeatedPtrField();
}

void RbacPermissionsForUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RbacPermissionsForUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.metasequoia.v1.RbacPermissionsForUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.permissions_.Clear();
  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RbacPermissionsForUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.metasequoia.v1.RbacPermissionItem permissions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RbacPermissionsForUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.metasequoia.v1.RbacPermissionsForUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user(), target);
  }

  // repeated .palm.metasequoia.v1.RbacPermissionItem permissions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_permissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_permissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.metasequoia.v1.RbacPermissionsForUserRequest)
  return target;
}

size_t RbacPermissionsForUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.metasequoia.v1.RbacPermissionsForUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.metasequoia.v1.RbacPermissionItem permissions = 2;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->_impl_.permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RbacPermissionsForUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RbacPermissionsForUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RbacPermissionsForUserRequest::GetClassData() const { return &_class_data_; }


void RbacPermissionsForUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RbacPermissionsForUserRequest*>(&to_msg);
  auto& from = static_cast<const RbacPermissionsForUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.metasequoia.v1.RbacPermissionsForUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.permissions_.MergeFrom(from._impl_.permissions_);
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RbacPermissionsForUserRequest::CopyFrom(const RbacPermissionsForUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.metasequoia.v1.RbacPermissionsForUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RbacPermissionsForUserRequest::IsInitialized() const {
  return true;
}

void RbacPermissionsForUserRequest::InternalSwap(RbacPermissionsForUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.permissions_.InternalSwap(&other->_impl_.permissions_);
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RbacPermissionsForUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metasequoia_2eproto_getter, &descriptor_table_metasequoia_2eproto_once,
      file_level_metadata_metasequoia_2eproto[7]);
}

// ===================================================================

class RbacPermissionsForRoleRequest::_Internal {
 public:
  static const ::palm::metasequoia::v1::Role& role(const RbacPermissionsForRoleRequest* msg);
};

const ::palm::metasequoia::v1::Role&
RbacPermissionsForRoleRequest::_Internal::role(const RbacPermissionsForRoleRequest* msg) {
  return *msg->_impl_.role_;
}
RbacPermissionsForRoleRequest::RbacPermissionsForRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.metasequoia.v1.RbacPermissionsForRoleRequest)
}
RbacPermissionsForRoleRequest::RbacPermissionsForRoleRequest(const RbacPermissionsForRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RbacPermissionsForRoleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.permissions_){from._impl_.permissions_}
    , decltype(_impl_.role_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    _this->_impl_.role_ = new ::palm::metasequoia::v1::Role(*from._impl_.role_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.metasequoia.v1.RbacPermissionsForRoleRequest)
}

inline void RbacPermissionsForRoleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.permissions_){arena}
    , decltype(_impl_.role_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RbacPermissionsForRoleRequest::~RbacPermissionsForRoleRequest() {
  // @@protoc_insertion_point(destructor:palm.metasequoia.v1.RbacPermissionsForRoleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RbacPermissionsForRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.permissions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.role_;
}

void RbacPermissionsForRoleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RbacPermissionsForRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.metasequoia.v1.RbacPermissionsForRoleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.permissions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.role_ != nullptr) {
    delete _impl_.role_;
  }
  _impl_.role_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RbacPermissionsForRoleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.metasequoia.v1.Role role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.metasequoia.v1.RbacPermissionItem permissions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RbacPermissionsForRoleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.metasequoia.v1.RbacPermissionsForRoleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.metasequoia.v1.Role role = 1;
  if (this->_internal_has_role()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::role(this),
        _Internal::role(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.metasequoia.v1.RbacPermissionItem permissions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_permissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_permissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.metasequoia.v1.RbacPermissionsForRoleRequest)
  return target;
}

size_t RbacPermissionsForRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.metasequoia.v1.RbacPermissionsForRoleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.metasequoia.v1.RbacPermissionItem permissions = 2;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->_impl_.permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.metasequoia.v1.Role role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.role_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RbacPermissionsForRoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RbacPermissionsForRoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RbacPermissionsForRoleRequest::GetClassData() const { return &_class_data_; }


void RbacPermissionsForRoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RbacPermissionsForRoleRequest*>(&to_msg);
  auto& from = static_cast<const RbacPermissionsForRoleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.metasequoia.v1.RbacPermissionsForRoleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.permissions_.MergeFrom(from._impl_.permissions_);
  if (from._internal_has_role()) {
    _this->_internal_mutable_role()->::palm::metasequoia::v1::Role::MergeFrom(
        from._internal_role());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RbacPermissionsForRoleRequest::CopyFrom(const RbacPermissionsForRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.metasequoia.v1.RbacPermissionsForRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RbacPermissionsForRoleRequest::IsInitialized() const {
  return true;
}

void RbacPermissionsForRoleRequest::InternalSwap(RbacPermissionsForRoleRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.permissions_.InternalSwap(&other->_impl_.permissions_);
  swap(_impl_.role_, other->_impl_.role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RbacPermissionsForRoleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metasequoia_2eproto_getter, &descriptor_table_metasequoia_2eproto_once,
      file_level_metadata_metasequoia_2eproto[8]);
}

// ===================================================================

class RbacRolesForUserRequest::_Internal {
 public:
};

RbacRolesForUserRequest::RbacRolesForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.metasequoia.v1.RbacRolesForUserRequest)
}
RbacRolesForUserRequest::RbacRolesForUserRequest(const RbacRolesForUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RbacRolesForUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){from._impl_.roles_}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.metasequoia.v1.RbacRolesForUserRequest)
}

inline void RbacRolesForUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){arena}
    , decltype(_impl_.user_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RbacRolesForUserRequest::~RbacRolesForUserRequest() {
  // @@protoc_insertion_point(destructor:palm.metasequoia.v1.RbacRolesForUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RbacRolesForUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roles_.~RepeatedPtrField();
}

void RbacRolesForUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RbacRolesForUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.metasequoia.v1.RbacRolesForUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roles_.Clear();
  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RbacRolesForUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.metasequoia.v1.Role roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RbacRolesForUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.metasequoia.v1.RbacRolesForUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user(), target);
  }

  // repeated .palm.metasequoia.v1.Role roles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roles_size()); i < n; i++) {
    const auto& repfield = this->_internal_roles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.metasequoia.v1.RbacRolesForUserRequest)
  return target;
}

size_t RbacRolesForUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.metasequoia.v1.RbacRolesForUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.metasequoia.v1.Role roles = 2;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->_impl_.roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RbacRolesForUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RbacRolesForUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RbacRolesForUserRequest::GetClassData() const { return &_class_data_; }


void RbacRolesForUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RbacRolesForUserRequest*>(&to_msg);
  auto& from = static_cast<const RbacRolesForUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.metasequoia.v1.RbacRolesForUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.roles_.MergeFrom(from._impl_.roles_);
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RbacRolesForUserRequest::CopyFrom(const RbacRolesForUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.metasequoia.v1.RbacRolesForUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RbacRolesForUserRequest::IsInitialized() const {
  return true;
}

void RbacRolesForUserRequest::InternalSwap(RbacRolesForUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.roles_.InternalSwap(&other->_impl_.roles_);
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RbacRolesForUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metasequoia_2eproto_getter, &descriptor_table_metasequoia_2eproto_once,
      file_level_metadata_metasequoia_2eproto[9]);
}

// ===================================================================

class RbacRolesResponse::_Internal {
 public:
};

RbacRolesResponse::RbacRolesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.metasequoia.v1.RbacRolesResponse)
}
RbacRolesResponse::RbacRolesResponse(const RbacRolesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RbacRolesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.metasequoia.v1.RbacRolesResponse)
}

inline void RbacRolesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RbacRolesResponse::~RbacRolesResponse() {
  // @@protoc_insertion_point(destructor:palm.metasequoia.v1.RbacRolesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RbacRolesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void RbacRolesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RbacRolesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.metasequoia.v1.RbacRolesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RbacRolesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.metasequoia.v1.Role items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RbacRolesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.metasequoia.v1.RbacRolesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.metasequoia.v1.Role items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.metasequoia.v1.RbacRolesResponse)
  return target;
}

size_t RbacRolesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.metasequoia.v1.RbacRolesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.metasequoia.v1.Role items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RbacRolesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RbacRolesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RbacRolesResponse::GetClassData() const { return &_class_data_; }


void RbacRolesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RbacRolesResponse*>(&to_msg);
  auto& from = static_cast<const RbacRolesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.metasequoia.v1.RbacRolesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RbacRolesResponse::CopyFrom(const RbacRolesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.metasequoia.v1.RbacRolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RbacRolesResponse::IsInitialized() const {
  return true;
}

void RbacRolesResponse::InternalSwap(RbacRolesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RbacRolesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metasequoia_2eproto_getter, &descriptor_table_metasequoia_2eproto_once,
      file_level_metadata_metasequoia_2eproto[10]);
}

// ===================================================================

class RbacPermissionsResponse::_Internal {
 public:
};

RbacPermissionsResponse::RbacPermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.metasequoia.v1.RbacPermissionsResponse)
}
RbacPermissionsResponse::RbacPermissionsResponse(const RbacPermissionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RbacPermissionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.metasequoia.v1.RbacPermissionsResponse)
}

inline void RbacPermissionsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RbacPermissionsResponse::~RbacPermissionsResponse() {
  // @@protoc_insertion_point(destructor:palm.metasequoia.v1.RbacPermissionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RbacPermissionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void RbacPermissionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RbacPermissionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.metasequoia.v1.RbacPermissionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RbacPermissionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.metasequoia.v1.Permission items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RbacPermissionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.metasequoia.v1.RbacPermissionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.metasequoia.v1.Permission items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.metasequoia.v1.RbacPermissionsResponse)
  return target;
}

size_t RbacPermissionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.metasequoia.v1.RbacPermissionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.metasequoia.v1.Permission items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RbacPermissionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RbacPermissionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RbacPermissionsResponse::GetClassData() const { return &_class_data_; }


void RbacPermissionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RbacPermissionsResponse*>(&to_msg);
  auto& from = static_cast<const RbacPermissionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.metasequoia.v1.RbacPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RbacPermissionsResponse::CopyFrom(const RbacPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.metasequoia.v1.RbacPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RbacPermissionsResponse::IsInitialized() const {
  return true;
}

void RbacPermissionsResponse::InternalSwap(RbacPermissionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RbacPermissionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metasequoia_2eproto_getter, &descriptor_table_metasequoia_2eproto_once,
      file_level_metadata_metasequoia_2eproto[11]);
}

// ===================================================================

class RbacUsersResponse::_Internal {
 public:
};

RbacUsersResponse::RbacUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.metasequoia.v1.RbacUsersResponse)
}
RbacUsersResponse::RbacUsersResponse(const RbacUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RbacUsersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.metasequoia.v1.RbacUsersResponse)
}

inline void RbacUsersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RbacUsersResponse::~RbacUsersResponse() {
  // @@protoc_insertion_point(destructor:palm.metasequoia.v1.RbacUsersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RbacUsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void RbacUsersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RbacUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.metasequoia.v1.RbacUsersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RbacUsersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.metasequoia.v1.User items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RbacUsersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.metasequoia.v1.RbacUsersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.metasequoia.v1.User items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.metasequoia.v1.RbacUsersResponse)
  return target;
}

size_t RbacUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.metasequoia.v1.RbacUsersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.metasequoia.v1.User items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RbacUsersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RbacUsersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RbacUsersResponse::GetClassData() const { return &_class_data_; }


void RbacUsersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RbacUsersResponse*>(&to_msg);
  auto& from = static_cast<const RbacUsersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.metasequoia.v1.RbacUsersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RbacUsersResponse::CopyFrom(const RbacUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.metasequoia.v1.RbacUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RbacUsersResponse::IsInitialized() const {
  return true;
}

void RbacUsersResponse::InternalSwap(RbacUsersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RbacUsersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metasequoia_2eproto_getter, &descriptor_table_metasequoia_2eproto_once,
      file_level_metadata_metasequoia_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace metasequoia
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::metasequoia::v1::Permission*
Arena::CreateMaybeMessage< ::palm::metasequoia::v1::Permission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::metasequoia::v1::Permission >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::metasequoia::v1::Resource*
Arena::CreateMaybeMessage< ::palm::metasequoia::v1::Resource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::metasequoia::v1::Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::metasequoia::v1::Role*
Arena::CreateMaybeMessage< ::palm::metasequoia::v1::Role >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::metasequoia::v1::Role >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::metasequoia::v1::User*
Arena::CreateMaybeMessage< ::palm::metasequoia::v1::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::metasequoia::v1::User >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::metasequoia::v1::RbacCanRequest*
Arena::CreateMaybeMessage< ::palm::metasequoia::v1::RbacCanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::metasequoia::v1::RbacCanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::metasequoia::v1::RbacHasRequest*
Arena::CreateMaybeMessage< ::palm::metasequoia::v1::RbacHasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::metasequoia::v1::RbacHasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::metasequoia::v1::RbacPermissionItem*
Arena::CreateMaybeMessage< ::palm::metasequoia::v1::RbacPermissionItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::metasequoia::v1::RbacPermissionItem >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::metasequoia::v1::RbacPermissionsForUserRequest*
Arena::CreateMaybeMessage< ::palm::metasequoia::v1::RbacPermissionsForUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::metasequoia::v1::RbacPermissionsForUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::metasequoia::v1::RbacPermissionsForRoleRequest*
Arena::CreateMaybeMessage< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::metasequoia::v1::RbacRolesForUserRequest*
Arena::CreateMaybeMessage< ::palm::metasequoia::v1::RbacRolesForUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::metasequoia::v1::RbacRolesForUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::metasequoia::v1::RbacRolesResponse*
Arena::CreateMaybeMessage< ::palm::metasequoia::v1::RbacRolesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::metasequoia::v1::RbacRolesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::metasequoia::v1::RbacPermissionsResponse*
Arena::CreateMaybeMessage< ::palm::metasequoia::v1::RbacPermissionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::metasequoia::v1::RbacPermissionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::metasequoia::v1::RbacUsersResponse*
Arena::CreateMaybeMessage< ::palm::metasequoia::v1::RbacUsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::metasequoia::v1::RbacUsersResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
