// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metasequoia.proto

#include "metasequoia.pb.h"
#include "metasequoia.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace metasequoia {
namespace v1 {

static const char* Rbac_method_names[] = {
  "/palm.metasequoia.v1.Rbac/Can",
  "/palm.metasequoia.v1.Rbac/Has",
  "/palm.metasequoia.v1.Rbac/GetRolesForUser",
  "/palm.metasequoia.v1.Rbac/GetImplicitRolesForUser",
  "/palm.metasequoia.v1.Rbac/GetUsersForRole",
  "/palm.metasequoia.v1.Rbac/GetImplicitUsersForRole",
  "/palm.metasequoia.v1.Rbac/AddRolesForUser",
  "/palm.metasequoia.v1.Rbac/DeleteRolesForUser",
  "/palm.metasequoia.v1.Rbac/AddPermissionsForRole",
  "/palm.metasequoia.v1.Rbac/DeletePermissionsForRole",
  "/palm.metasequoia.v1.Rbac/GetPermissionsForUser",
  "/palm.metasequoia.v1.Rbac/GetImplicitPermissionsForUser",
  "/palm.metasequoia.v1.Rbac/AddPermissionsForUser",
  "/palm.metasequoia.v1.Rbac/DeletePermissionsForUser",
};

std::unique_ptr< Rbac::Stub> Rbac::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Rbac::Stub> stub(new Rbac::Stub(channel, options));
  return stub;
}

Rbac::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Can_(Rbac_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Has_(Rbac_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRolesForUser_(Rbac_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImplicitRolesForUser_(Rbac_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUsersForRole_(Rbac_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImplicitUsersForRole_(Rbac_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddRolesForUser_(Rbac_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRolesForUser_(Rbac_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPermissionsForRole_(Rbac_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermissionsForRole_(Rbac_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPermissionsForUser_(Rbac_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImplicitPermissionsForUser_(Rbac_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPermissionsForUser_(Rbac_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermissionsForUser_(Rbac_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Rbac::Stub::Can(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacCanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Can_, context, request, response);
}

void Rbac::Stub::async::Can(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacCanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Can_, context, request, response, std::move(f));
}

void Rbac::Stub::async::Can(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Can_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncCanRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacCanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Can_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncCanRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::Has(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacHasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Has_, context, request, response);
}

void Rbac::Stub::async::Has(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacHasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Has_, context, request, response, std::move(f));
}

void Rbac::Stub::async::Has(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Has_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncHasRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacHasRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Has_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncHasRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHasRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User& request, ::palm::metasequoia::v1::RbacRolesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::User, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRolesForUser_, context, request, response);
}

void Rbac::Stub::async::GetRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User* request, ::palm::metasequoia::v1::RbacRolesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::User, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRolesForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User* request, ::palm::metasequoia::v1::RbacRolesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacRolesResponse>* Rbac::Stub::PrepareAsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacRolesResponse, ::palm::metasequoia::v1::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacRolesResponse>* Rbac::Stub::AsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User& request, ::palm::metasequoia::v1::RbacRolesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::User, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImplicitRolesForUser_, context, request, response);
}

void Rbac::Stub::async::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User* request, ::palm::metasequoia::v1::RbacRolesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::User, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitRolesForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User* request, ::palm::metasequoia::v1::RbacRolesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacRolesResponse>* Rbac::Stub::PrepareAsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacRolesResponse, ::palm::metasequoia::v1::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImplicitRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacRolesResponse>* Rbac::Stub::AsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImplicitRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetUsersForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Role& request, ::palm::metasequoia::v1::RbacUsersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::Role, ::palm::metasequoia::v1::RbacUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUsersForRole_, context, request, response);
}

void Rbac::Stub::async::GetUsersForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Role* request, ::palm::metasequoia::v1::RbacUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::Role, ::palm::metasequoia::v1::RbacUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUsersForRole_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetUsersForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Role* request, ::palm::metasequoia::v1::RbacUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUsersForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacUsersResponse>* Rbac::Stub::PrepareAsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Role& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacUsersResponse, ::palm::metasequoia::v1::Role, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUsersForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacUsersResponse>* Rbac::Stub::AsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Role& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUsersForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Role& request, ::palm::metasequoia::v1::RbacUsersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::Role, ::palm::metasequoia::v1::RbacUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImplicitUsersForRole_, context, request, response);
}

void Rbac::Stub::async::GetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Role* request, ::palm::metasequoia::v1::RbacUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::Role, ::palm::metasequoia::v1::RbacUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitUsersForRole_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Role* request, ::palm::metasequoia::v1::RbacUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitUsersForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacUsersResponse>* Rbac::Stub::PrepareAsyncGetImplicitUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Role& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacUsersResponse, ::palm::metasequoia::v1::Role, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImplicitUsersForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacUsersResponse>* Rbac::Stub::AsyncGetImplicitUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Role& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImplicitUsersForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::AddRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddRolesForUser_, context, request, response);
}

void Rbac::Stub::async::AddRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRolesForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::AddRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncAddRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacRolesForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncAddRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRolesForUser_, context, request, response);
}

void Rbac::Stub::async::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRolesForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacRolesForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::AddPermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPermissionsForRole_, context, request, response);
}

void Rbac::Stub::async::AddPermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForRole_, context, request, response, std::move(f));
}

void Rbac::Stub::async::AddPermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncAddPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPermissionsForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncAddPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPermissionsForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::DeletePermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePermissionsForRole_, context, request, response);
}

void Rbac::Stub::async::DeletePermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForRole_, context, request, response, std::move(f));
}

void Rbac::Stub::async::DeletePermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncDeletePermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePermissionsForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncDeletePermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePermissionsForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User& request, ::palm::metasequoia::v1::RbacPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::User, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPermissionsForUser_, context, request, response);
}

void Rbac::Stub::async::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::User, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionsForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacPermissionsResponse>* Rbac::Stub::PrepareAsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacPermissionsResponse, ::palm::metasequoia::v1::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacPermissionsResponse>* Rbac::Stub::AsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User& request, ::palm::metasequoia::v1::RbacPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::User, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImplicitPermissionsForUser_, context, request, response);
}

void Rbac::Stub::async::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::User, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitPermissionsForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacPermissionsResponse>* Rbac::Stub::PrepareAsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacPermissionsResponse, ::palm::metasequoia::v1::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImplicitPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacPermissionsResponse>* Rbac::Stub::AsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::User& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImplicitPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::AddPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPermissionsForUser_, context, request, response);
}

void Rbac::Stub::async::AddPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::AddPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncAddPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncAddPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePermissionsForUser_, context, request, response);
}

void Rbac::Stub::async::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

Rbac::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacCanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacCanRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Can(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacHasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacHasRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Has(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::User, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::User* req,
             ::palm::metasequoia::v1::RbacRolesResponse* resp) {
               return service->GetRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::User, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::User* req,
             ::palm::metasequoia::v1::RbacRolesResponse* resp) {
               return service->GetImplicitRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::Role, ::palm::metasequoia::v1::RbacUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::Role* req,
             ::palm::metasequoia::v1::RbacUsersResponse* resp) {
               return service->GetUsersForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::Role, ::palm::metasequoia::v1::RbacUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::Role* req,
             ::palm::metasequoia::v1::RbacUsersResponse* resp) {
               return service->GetImplicitUsersForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacRolesForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AddRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacRolesForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AddPermissionsForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeletePermissionsForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::User, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::User* req,
             ::palm::metasequoia::v1::RbacPermissionsResponse* resp) {
               return service->GetPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::User, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::User* req,
             ::palm::metasequoia::v1::RbacPermissionsResponse* resp) {
               return service->GetImplicitPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AddPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeletePermissionsForUser(ctx, req, resp);
             }, this)));
}

Rbac::Service::~Service() {
}

::grpc::Status Rbac::Service::Can(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacCanRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::Has(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacHasRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetRolesForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::User* request, ::palm::metasequoia::v1::RbacRolesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetImplicitRolesForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::User* request, ::palm::metasequoia::v1::RbacRolesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetUsersForRole(::grpc::ServerContext* context, const ::palm::metasequoia::v1::Role* request, ::palm::metasequoia::v1::RbacUsersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetImplicitUsersForRole(::grpc::ServerContext* context, const ::palm::metasequoia::v1::Role* request, ::palm::metasequoia::v1::RbacUsersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::AddRolesForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::DeleteRolesForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::AddPermissionsForRole(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::DeletePermissionsForRole(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetPermissionsForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::User* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetImplicitPermissionsForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::User* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::AddPermissionsForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::DeletePermissionsForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace metasequoia
}  // namespace v1

