/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.saturn_xiv.palm.plugins.loquat.v1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-01-02")
public class AesEncryptResponse implements org.apache.thrift.TBase<AesEncryptResponse, AesEncryptResponse._Fields>, java.io.Serializable, Cloneable, Comparable<AesEncryptResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AesEncryptResponse");

  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SALT_FIELD_DESC = new org.apache.thrift.protocol.TField("salt", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AesEncryptResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AesEncryptResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer code; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer salt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CODE((short)1, "code"),
    SALT((short)2, "salt");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
          return CODE;
        case 2: // SALT
          return SALT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SALT, new org.apache.thrift.meta_data.FieldMetaData("salt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AesEncryptResponse.class, metaDataMap);
  }

  public AesEncryptResponse() {
  }

  public AesEncryptResponse(
    java.nio.ByteBuffer code,
    java.nio.ByteBuffer salt)
  {
    this();
    this.code = org.apache.thrift.TBaseHelper.copyBinary(code);
    this.salt = org.apache.thrift.TBaseHelper.copyBinary(salt);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AesEncryptResponse(AesEncryptResponse other) {
    if (other.isSetCode()) {
      this.code = org.apache.thrift.TBaseHelper.copyBinary(other.code);
    }
    if (other.isSetSalt()) {
      this.salt = org.apache.thrift.TBaseHelper.copyBinary(other.salt);
    }
  }

  @Override
  public AesEncryptResponse deepCopy() {
    return new AesEncryptResponse(this);
  }

  @Override
  public void clear() {
    this.code = null;
    this.salt = null;
  }

  public byte[] getCode() {
    setCode(org.apache.thrift.TBaseHelper.rightSize(code));
    return code == null ? null : code.array();
  }

  public java.nio.ByteBuffer bufferForCode() {
    return org.apache.thrift.TBaseHelper.copyBinary(code);
  }

  public AesEncryptResponse setCode(byte[] code) {
    this.code = code == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(code.clone());
    return this;
  }

  public AesEncryptResponse setCode(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer code) {
    this.code = org.apache.thrift.TBaseHelper.copyBinary(code);
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public byte[] getSalt() {
    setSalt(org.apache.thrift.TBaseHelper.rightSize(salt));
    return salt == null ? null : salt.array();
  }

  public java.nio.ByteBuffer bufferForSalt() {
    return org.apache.thrift.TBaseHelper.copyBinary(salt);
  }

  public AesEncryptResponse setSalt(byte[] salt) {
    this.salt = salt == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(salt.clone());
    return this;
  }

  public AesEncryptResponse setSalt(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer salt) {
    this.salt = org.apache.thrift.TBaseHelper.copyBinary(salt);
    return this;
  }

  public void unsetSalt() {
    this.salt = null;
  }

  /** Returns true if field salt is set (has been assigned a value) and false otherwise */
  public boolean isSetSalt() {
    return this.salt != null;
  }

  public void setSaltIsSet(boolean value) {
    if (!value) {
      this.salt = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        if (value instanceof byte[]) {
          setCode((byte[])value);
        } else {
          setCode((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SALT:
      if (value == null) {
        unsetSalt();
      } else {
        if (value instanceof byte[]) {
          setSalt((byte[])value);
        } else {
          setSalt((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE:
      return getCode();

    case SALT:
      return getSalt();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CODE:
      return isSetCode();
    case SALT:
      return isSetSalt();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof AesEncryptResponse)
      return this.equals((AesEncryptResponse)that);
    return false;
  }

  public boolean equals(AesEncryptResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_salt = true && this.isSetSalt();
    boolean that_present_salt = true && that.isSetSalt();
    if (this_present_salt || that_present_salt) {
      if (!(this_present_salt && that_present_salt))
        return false;
      if (!this.salt.equals(that.salt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
    if (isSetCode())
      hashCode = hashCode * 8191 + code.hashCode();

    hashCode = hashCode * 8191 + ((isSetSalt()) ? 131071 : 524287);
    if (isSetSalt())
      hashCode = hashCode * 8191 + salt.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AesEncryptResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCode(), other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSalt(), other.isSetSalt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salt, other.salt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AesEncryptResponse(");
    boolean first = true;

    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.code, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("salt:");
    if (this.salt == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.salt, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AesEncryptResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AesEncryptResponseStandardScheme getScheme() {
      return new AesEncryptResponseStandardScheme();
    }
  }

  private static class AesEncryptResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<AesEncryptResponse> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, AesEncryptResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readBinary();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SALT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.salt = iprot.readBinary();
              struct.setSaltIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, AesEncryptResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeBinary(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.salt != null) {
        oprot.writeFieldBegin(SALT_FIELD_DESC);
        oprot.writeBinary(struct.salt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AesEncryptResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AesEncryptResponseTupleScheme getScheme() {
      return new AesEncryptResponseTupleScheme();
    }
  }

  private static class AesEncryptResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<AesEncryptResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AesEncryptResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCode()) {
        optionals.set(0);
      }
      if (struct.isSetSalt()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCode()) {
        oprot.writeBinary(struct.code);
      }
      if (struct.isSetSalt()) {
        oprot.writeBinary(struct.salt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AesEncryptResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.code = iprot.readBinary();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.salt = iprot.readBinary();
        struct.setSaltIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

